{"normalizers":{"ordinalNumber":"function ordinalNumber(lang) {\n        function OrdinalNumbers(last, tenFirstNumbers) {\n            return (word, compareStr) => {\n                if (compareStr(word, last)) return '-1'\n                if (!Number.isNaN(parseInt(word, 10)))\n                    return parseInt(word, 10).toString()\n\n                const i = tenFirstNumbers.findIndex((a) => compareStr(a, word))\n\n                return i === -1 ? undefined : (i + 1).toString()\n            }\n        }\n\n        if (lang === 'pt-BR')\n            return OrdinalNumbers('último', [\n                'primeiro',\n                'segundo',\n                'terceiro',\n                'quarto',\n                'quinto',\n                'sexto',\n                'sétimo',\n                'oitavo',\n                'nono',\n                'décimo',\n            ])\n\n        return OrdinalNumbers('last', [\n            'first',\n            'second',\n            'third',\n            'fourth',\n            'fifth',\n            'sixth',\n            'seventh',\n            'eighth',\n            'ninth',\n            'tenth',\n        ])\n    }","boolean":"function boolean(lang) {\n        return function(word, compareStr) {\n            return word != undefined ? true : false\n        }\n    }","identity":"function identity(lang) {\n        return function(word, compareStr) {\n            return word\n        }\n    }","number":"function number(lang) {\n        return function(word, compareStr) {\n            const numbers = {\n                'pt-BR': ['zero', 'um', 'dois', 'três', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove', 'dez'],\n                'en-US': ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']\n            }\n\n            if (!isNaN(parseInt(word))) return parseInt(word).toString()\n\n            const val = numbers[lang].indexOf(word)\n\n            if (val !== -1) return val.toString()\n\n            // for some reason this is valid #42\n            // FUCKIN HELL\n            if (/^(#\\d+)$/.test(word)) return word.substr(1)\n\n            return undefined\n        }\n    }","elementarMathOperation":"function elementarMathOperation(lang) {\n        const enUS = [['plus', '+'], ['times', '*'], ['minus', '-'], ['divided', '/']];\n        const ptBR = [['mais', '+'], ['vezes', '*'], ['menos', '-'], ['dividido', '/']];\n        const langs = {\n            'en-US': enUS,\n            'pt-BR': ptBR\n        };\n        return (word, compareStr) => {\n            const op = langs[lang].find(([name]) => compareStr(name, word)) || [];\n            return op[1];\n        };\n    }"},"templates":{"{any}":{"value":"(.*)","examples":{"pt-BR":["quem é você","isto é um teste"],"en-US":["who are you","the universe is cracked"]}},"{term}":{"value":"^(?![\\* ]$).*","examples":{"pt-BR":["valor","lista","yellow","dog","andar","a"],"en-US":["value","graph","number","text","temp","a"]}},"{ordinalNumber}":{"value":"(\\S+)","examples":{"pt-BR":["1ª","42ª","último","primeiro","sétimo"],"en-US":["1ª","42ª","last","first","fourth"]}},"{numeral}":{"value":"(\\d+)","examples":{"pt-BR":["1","42"],"en-US":["1","42"]}},"{number}":{"value":"^(?![\\* ]$).*","examples":{"pt-BR":["1","2","three","four","five","six","42","21","19"],"en-US":["1","2","três","quatro","cinco","seis","42","21","19"]},"defaultNormalizer":"number"},"{char}":{"value":"(.)","examples":{"pt-BR":["a","B","A","z"],"en-US":["g","K","M"]}},"@anything":{"value":"","examples":{"pt-BR":["gap"],"en-US":["gap"]}}},"stopWords":{"en-US":{"words":["a -> P1 != (letter|symbol|word)","the","with","you","can","please","from -> S != (to)","to -> S != (from)","of","it","its","it's","is","are","was","were","in"],"expressions":[]},"pt-BR":{"words":["a -> P1 != (letra|símbolo|palavra)","o -> P1 != (letra|símbolo|palavra)","ao","você","com","pode","na","do -> S != (até)","de -> S != (até)","da -> S != (até)","dos","das","as","os","para -> S != (todo)","é","era","estava","como","uma","vá"],"expressions":["por favor"]}},"modules":[{"id":"typescript","grammar":{"en-US":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(change, switch)"}},{"v":"1","w":"2","value":{"label":"(language)"}},{"v":"2","w":"3","value":{"label":"(back)"}},{"v":"2","w":"4","value":{"label":"(portuguese)","sem":"to"}},{"v":"3","w":"4","value":{"label":"(portuguese)","sem":"to"}}],"value":{"id":"__change_lang","label":"Change input language","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Change input language","desc":"Changes input language to portuguese","examples":"\n      change language to portuguese,\n      switch language to portuguese,\n      switch language to english,\n      switch language back to french\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function changeLang(command, editor, context) {\n    console.log('[Spoken]: Executing: \"changeLang.\"');\n    console.log('This is an internal command this file should never run!');\n    return null;\n}\nexports.default = changeLang;\n","phrases":["change language to portuguese","switch language to portuguese","switch language to english","switch language back to french"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(conditional)"}},{"v":"1","w":"2","value":{"label":"(statement)"}},{"v":"2","w":"3","value":{"label":"(if)"}},{"v":"3","w":"4","value":{"label":"(else)","store":"otherwise","normalizer":"boolean"}},{"v":"2","w":"5","value":{"label":"([expressions])","store":"condition"}},{"v":"3","w":"5","value":{"label":"([expressions])","store":"condition"}},{"v":"4","w":"5","value":{"label":"([expressions])","store":"condition"}}],"value":{"id":"condition","label":"Condition Statement","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Creates a if/else statement","desc":"Creates a if/else statement with the provided expression as condition","examples":"\n        conditional statement,\n        conditional statement [expressions],\n        conditional statement if [expressions],\n        conditional statement if else [expressions]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function Condition(command, editor, context) {\n    console.log('[Spoken]: Executing: \"Condition.\"');\n    const anything = context.templates['@anything'].examples[command?.extra?.lang][0];\n    let { condition = anything, otherwise = false } = command;\n    condition = typeof condition === 'string' ? condition : condition?.value;\n    let text = `if(${condition}) {\\n\\n}${otherwise ? ' else {\\n\\n}' : ''}`;\n    const line = await editor.getLine();\n    await editor.write(text);\n    await editor.indentSelection();\n    await editor.goToLine(line._line + 1);\n    if (condition.includes(anything)) {\n        const pos = await editor.findPositionOf(anything);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return null;\n}\nexports.default = Condition;\n","phrases":["conditional statement","conditional statement call function test","conditional statement if text this can be any piece of writing text","conditional statement if else gap"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg62"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg62","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, pointer)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(symbol, letter)"}},{"v":"7","w":"5","value":{"label":"(symbol, letter)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalizer":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({char})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(begin, end)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(line)","sem":"of"}},{"v":"1","w":"11","value":{"label":"(next)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(symbols, symbols)"}},{"v":"13","w":"12","value":{"label":"(symbols, symbols)"}}],"value":{"id":"cursor","label":"Move cursor","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Move cursor","desc":"Moves the cursor to a different line or token","examples":"\n        pointer line 21,\n        pointer line 44,\n        cursor line 23,\n        pointer end of line,\n        pointer begin of line,\n        pointer first letter A,\n        pointer next five symbols\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function cursor(args, editor, context) {\n    console.log('[Spoken]: Executing: \"cursor.\"');\n    if (args.linePosition != null) {\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\n        return await editor.moveCursorTo(pos);\n    }\n    else if (args.line) {\n        return await editor.goToLine(args.line);\n    }\n    else if (!args.symbol) {\n        const nth = parseInt(args.leapSize || '1', 10);\n        return await editor.moveCursorTo(null, undefined, nth);\n    }\n    else {\n        if (args.leapSize == undefined)\n            args.leapSize = '1';\n        const nth = parseInt(args.leapSize || '1', 10);\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\n    }\n    return await editor.moveCursorTo('BEGIN_LINE');\n}\nvar LinePostionEnum;\n(function (LinePostionEnum) {\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\n})(LinePostionEnum || (LinePostionEnum = {}));\nexports.default = cursor;\n","phrases":["pointer line 21","pointer line 44","cursor line 23","pointer end of line","pointer begin of line","pointer first letter A","pointer next five symbols"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(expression)"}},{"v":"1","w":"2","value":{"label":"([expressions])","store":"left"}},{"v":"2","w":"3","value":{"label":"([math_operator], [logical_operator])","store":"operation"}},{"v":"4","w":"3","value":{"label":"([math_operator], [logical_operator])","store":"operation"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"right"}}],"value":{"id":"elementar_math_op","label":"Elementar Math Operation","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Writes a elementar math operation","desc":"Writes a elementar math operation (*, -, +, /)","examples":"\n      expression number 35 [math_operator] number 89 [math_operator] [string],\n      expression [variable_reference] [math_operator] [variable_reference],\n      expression [variable_reference] [logical_operator] [variable_reference],\n      expression [variable_reference] [math_operator] [function_call] [logical_operator] number 42\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function WriteElementarMathOperation(command, editor, context) {\n    console.log('[Spoken]: Executing: \"WriteElementarMathOperation\"');\n    let operation = toArray(command.operation);\n    let right = toArray(command.right);\n    let text = toValue(command.left);\n    for (let i = 0; i < right.length; i++) {\n        if (operation[i].isNegative) {\n            if (operation[i].operator === '===')\n                text += ' !== ' + toValue(right[i]);\n            else\n                text = '!(' + text + ' ' + operation[i].operator + ' ' + toValue(right[i]) + ')';\n        }\n        else {\n            text += ' ' + operation[i].operator + ' ' + toValue(right[i]);\n        }\n    }\n    if (command.parent)\n        return text;\n    await editor.write(text);\n    const wildcard = [command.left, ...right].find(item => typeof item !== 'string');\n    if (wildcard) {\n        const pos = await editor.findPositionOf(wildcard.value);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return undefined;\n}\nconst toArray = (arg) => Array.isArray(arg) ? arg : [arg];\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\nexports.default = WriteElementarMathOperation;\n","phrases":["expression number 35 divided by number 89 plus string O N U string","expression reference constant bike divided by constant age","expression reference constant bike less or equals than reference constant bike","expression variable label divided by execute function normalize on true with 2 arguments less or equals than number 42"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"([number], [string], [variable_reference], [elementar_math_op], [function_call])","store":"expression"}},{"v":"0","w":"2","value":{"label":"(gap)","store":"wildCard","normalizer":"identity"}},{"v":"0","w":"3","value":{"label":"(false, true)","store":"booleanConstants"}}],"value":{"id":"expressions","label":"Writes a expression","lang":"en-US","langName":"English","pad":"0.2","nodesep":"1","ranksep":"2","rankdir":"LR","alias":"true","title":"Writes a expression","desc":"Writes a expression in the editor, this is meant to be used inside another automatas","examples":"\n      false,\n      true,\n      gap,\n      [number],\n      [string],\n      [variable_reference],\n      [elementar_math_op],\n      [function_call]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function Expression(command, editor, context) {\n    console.log('[Spoken]: Executing: \"Expression\"');\n    let { expression, parent, wildCard, booleanConstants } = command;\n    // really ??? (fix later)\n    if (booleanConstants != null)\n        expression = booleanConstants == 1 ? 'true' : 'false';\n    if (parent) {\n        return expression ? expression : { value: wildCard, isWildCard: true };\n    }\n    return await editor.write(expression || wildCard);\n}\nexports.default = Expression;\n","phrases":["false","true","gap","number 43","text this can be any piece of writing text","reference variable horse","expression reference constant bike divided by constant age","call function test"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(call, execute)"}},{"v":"1","w":"2","value":{"label":"(function)"}},{"v":"2","w":"3","value":{"label":"([multi_word_token])","store":"functionName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"3","w":"4","value":{"label":"(λ)"}},{"v":"2","w":"4","value":{"label":"({term})","store":"functionName"}},{"v":"4","w":"11","value":{"label":"(of, on, at)","disableSpellcheck":"true"}},{"v":"4","w":"5","value":{"label":"([expressions])","store":"caller"}},{"v":"11","w":"5","value":{"label":"([expressions])","store":"caller"}},{"v":"4","w":"6","value":{"label":"(arguments)","sem":"with"}},{"v":"5","w":"6","value":{"label":"(arguments)","sem":"with"}},{"v":"6","w":"7","value":{"label":"([expressions])","store":"args"}},{"v":"7","w":"8","value":{"label":"(and)"}},{"v":"8","w":"7","value":{"label":"([expressions])","store":"args"}},{"v":"4","w":"9","value":{"label":"({number})","store":"argsNumber","sem":"with"}},{"v":"5","w":"9","value":{"label":"({number})","store":"argsNumber","sem":"with"}},{"v":"9","w":"10","value":{"label":"(arguments)"}}],"value":{"id":"function_call","label":"Calls a function","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","priority":"2","title":"Calls a function","desc":"Calls a function with the specified arguments in the desired caller","examples":"\n      call function test,\n      execute function normalize on [expressions] with 2 arguments,\n      execute function remove on [expressions] with arguments [expressions] and [expressions],\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function FunctionCall(command, editor, context) {\n    console.log('[Spoken]: Executing: \"FunctionCall\"');\n    const anything = context.templates['@anything'].examples[command?.extra?.lang];\n    const functionName = join(command.functionName);\n    const argsNumber = command.argsNumber ? parseInt(command.argsNumber, 10) : command.oneArg ? 1 : NaN;\n    const args = command.args ? toArray(command.args) : [];\n    const caller = command.caller ? toValue(command.caller) : null;\n    let text = functionName + '(';\n    if (argsNumber) {\n        text += new Array(argsNumber).fill(anything).join(', ');\n    }\n    else if (args.length) {\n        text += (args.map(item => typeof item === 'string' ? item : anything).join(', '));\n    }\n    text += ')';\n    if (caller)\n        text = caller + '.' + text;\n    if (command.parent)\n        return text;\n    const line = await editor.getLine();\n    await editor.write(text);\n    await editor.indentSelection();\n    if (argsNumber > 0) {\n        const pos = await editor.findPositionOf(anything[0]);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return undefined;\n}\nconst toArray = (arg) => Array.isArray(arg) ? arg : [arg];\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\nconst join = (item) => typeof item === 'string' ? item : item.join('');\nexports.default = FunctionCall;\n","phrases":["call function test","execute function normalize on true with 2 arguments","execute function remove on true with arguments reference variable horse and expression reference constant bike divided by constant age"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new, create, declare)"}},{"v":"1","w":"2","value":{"label":"(function)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"fnName"}},{"v":"3","w":"4","value":{"label":"({number})","store":"argsNumber"}},{"v":"4","w":"5","value":{"label":"(arguments)"}},{"v":"3","w":"6","value":{"label":"(return, returning)"}},{"v":"5","w":"6","value":{"label":"(return, returning)"}},{"v":"0","w":"6","value":{"label":"(return)","store":"returnOnly"}},{"v":"6","w":"7","value":{"label":"([expressions])","store":"returnValue"}}],"value":{"id":"function_declaration","label":"Creates a function","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","priority":"2","title":"Creates a function","desc":"Creates a function with the desired number of args and return value","examples":"\n        declare function multiply with [number] arguments,\n        declare function multiply with 2 arguments return [expressions],\n        declare function divide return [expressions]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function FunctionDeclaration(command, editor, context) {\n    console.log('[Spoken]: Executing: \"FunctionDeclaration\"');\n    const anything = context.templates['@anything'].examples[command?.extra?.lang];\n    let { fnName, argsNumber, returnValue, returnOnly } = command;\n    argsNumber = argsNumber != null ? parseInt(argsNumber, 10) : 0;\n    let text = '';\n    if (returnOnly == undefined) {\n        text = `function ${fnName}(`;\n        if (argsNumber > 0) {\n            text += new Array(argsNumber).fill(anything).join(', ');\n        }\n        text += ') {\\n';\n        if (returnValue != null) {\n            text += 'return ' + toValue(returnValue);\n        }\n        text += '\\n}';\n    }\n    else {\n        text = 'return ' + toValue(returnValue);\n    }\n    if (command.parent)\n        return text;\n    const line = await editor.getLine();\n    await editor.write(text);\n    await editor.indentSelection();\n    const r = await editor.goToLine(line._line + 1);\n    if (argsNumber > 0) {\n        const pos = await editor.findPositionOf(anything[0]);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return r;\n}\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\nexports.default = FunctionDeclaration;\n","phrases":["declare function multiply with number 43 arguments","declare function multiply with 2 arguments return reference variable horse","declare function divide return text this can be any piece of writing text"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(go)"}},{"v":"1","w":"2","value":{"label":"(to)"}},{"v":"0","w":"3","value":{"label":"(line)"}},{"v":"1","w":"3","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(line)"}},{"v":"3","w":"5","value":{"label":"(number)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}},{"v":"5","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Change line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Change line","desc":"Moves the cursor to a different line","examples":"\n        go to line [number],\n        go to line number [number],\n        line number [number],\n        line [number]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function goToLine(command, editor, context) {\n    console.log('[Spoken]: Executing: \"goToLine.\"');\n    return await editor.goToLine(command.line);\n}\nexports.default = goToLine;\n","phrases":["go to line number 140","go to line number 123","line number 140","line number 14"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg80"},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"circle"},"parent":"sg80"},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"sg80","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(and, or, equals, =)","store":"logicalOperator"}},{"v":"2","w":"1","value":{"label":"(and, or, equals, =)","store":"logicalOperator"}},{"v":"0","w":"2","value":{"label":"(not, negative)","store":"isNegative","normalizer":"boolean"}},{"v":"0","w":"3","value":{"label":"(less, greater)","store":"inequalityOperator"}},{"v":"2","w":"3","value":{"label":"(less, greater)","store":"inequalityOperator"}},{"v":"3","w":"4","value":{"label":"(or, λ)"}},{"v":"4","w":"5","value":{"label":"(equals, =)","store":"orEqual","normalizer":"boolean"}},{"v":"3","w":"7","value":{"label":"(than)"}},{"v":"5","w":"7","value":{"label":"(than)"}}],"value":{"id":"logical_operator","label":"Writes a logical operator","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","alias":"true","title":"Writes a logical operator","desc":"Writes a logical operator (===, !==, &&, ||, >, <, >=, <=) meant to be used inside expressions","examples":"\n      and,\n      or,\n      equals,\n      less than,\n      greater than,\n      less or equals than,\n      greater or equals than,\n      not equals,\n      negative equals,\n      negative and,\n      negative or\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function LogicalOperator(command, editor, context) {\n    console.log('[Spoken]: Executing: \"LogicalOperator\"');\n    const { logicalOperator, isNegative = false, inequalityOperator, orEqual = false } = command;\n    if (logicalOperator !== undefined) {\n        const operator = ['&&', '||', '===', '==='][logicalOperator];\n        return { operator, isNegative };\n    }\n    else if (inequalityOperator !== undefined) {\n        const operator = ['<', '>'][inequalityOperator] + (orEqual ? '=' : '');\n        return { operator, isNegative };\n    }\n    return { operator: 'error', isNegative: false };\n}\nexports.default = LogicalOperator;\n","phrases":["and","or","equals","less than","greater than","less or equals than","greater or equals than","not equals","negative equals","negative and","negative or"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(plus, times, minus, divided, module, +, x, -, /, %)","store":"mathOperator"}},{"v":"1","w":"1","value":{"label":"(by)"}}],"value":{"id":"math_operator","label":"Writes a math operator","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","alias":"true","title":"Writes a math operator","desc":"Writes a math operator (*, -, +, /, %) meant to be used inside expressions","examples":"\n      plus,\n      times,\n      minus,\n      divided by,\n      module\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function MathOperator(command, editor, context) {\n    console.log('[Spoken]: Executing: \"MathOperator\"');\n    const { mathOperator } = command;\n    const operator = ['+', '*', '-', '/', '%'][mathOperator % 5] || 'error';\n    return { operator };\n}\n// @ts-ignore\nexports.default = MathOperator;\n","phrases":["plus","times","minus","divided by","module"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"3","value":{"label":"(*)"}},{"v":"3","w":"3","value":{"label":"({any})","store":"words"}},{"v":"3","w":"4","value":{"label":"(*)"}}],"value":{"id":"multi_word_token","label":"Group multiple words together","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Group multiple words together","desc":"Group multiple words together in one variable meant to be used as alias in other commands","examples":"\n      quote blue car quote,\n      quote multi word token quote,\n      quote to upper case quote,\n      quote to string quote,\n      quote to integer quote,\n      quote is null quote,\n      quote has next quote,\n      quote is full quote,\n      quote camel case quote,\n      quote get string could quote,\n      quote get color quote,\n      quote really good function quote,\n      quote U S A quote,\n      quote W H O quote,\n      quote F A T O S quote\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function MultiWordTokens(command, editor, context) {\n    console.log('[Spoken]: Executing: \"MultiWordTokens\"');\n    function camelCase(words) {\n        return words.map((a, i) => i ? a.charAt(0).toUpperCase() + a.slice(1) : a);\n    }\n    if (command.extra?.case === 'camel') {\n        return camelCase(command.words);\n    }\n    return command.words;\n}\nexports.default = MultiWordTokens;\n","phrases":["quote blue car quote","quote multi word token quote","quote to upper case quote","quote to string quote","quote to integer quote","quote is null quote","quote has next quote","quote is full quote","quote camel case quote","quote get string could quote","quote get color quote","quote really good function quote","quote U S A quote","quote W H O quote","quote F A T O S quote"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg85"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg87"},{"v":"5","value":{"shape":"circle"},"parent":"sg85"},{"v":"sg85","value":{"shape":"circle"}},{"v":"sg87","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new)"}},{"v":"5","w":"1","value":{"label":"(new)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"5","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"4","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"0","w":"4","value":{"label":"(line)"}},{"v":"0","w":"5","value":{"label":"(create)"}},{"v":"5","w":"5","value":{"label":"(a)"}}],"value":{"id":"new_line","label":"New line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"New line","desc":"Creates a new line above or below the current line","examples":"\n        create line,\n        create a line,\n        create line above,\n        create line below\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function newLine(command, editor, context) {\n    console.log('[Spoken]: Executing: \"new line.\"');\n    return await editor.newLine(command.position);\n}\nexports.default = newLine;\n","phrases":["create line","create a line","create line above","create line below"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(number)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"number"}},{"v":"0","w":"3","value":{"label":"({number})","store":"number"}}],"value":{"id":"number","label":"Writes a number","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","priority":"2","title":"Writes a number","desc":"Writes a number in the editor","examples":"\n      number one,\n      number four,\n      number five,\n      number 43,\n      number 14,\n      number 140,\n      140,\n      123,\n      42,\n      18\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function WriteNumber(command, editor, context) {\n    console.log('[Spoken]: Executing: \"WriteNumber\"');\n    const { number, parent } = command;\n    if (parent)\n        return number;\n    return await editor.write(number);\n}\nexports.default = WriteNumber;\n","phrases":["number one","number four","number five","number 43","number 14","number 140","140","123","42","18"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(remove)"}},{"v":"1","w":"2","value":{"label":"(line)","store":"isLine","normalizer":"boolean"}},{"v":"1","w":"3","value":{"label":"(selection)","store":"isSelection","normalizer":"boolean"}}],"value":{"id":"remove_ln_sec","label":"Remove","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Remove","desc":"Removes the current line or the current selection","examples":"\n        remove line,\n        remove selection\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function remove(command, editor, context) {\n    console.log('[Spoken]: Executing: \"remove line/selection.\"');\n    if (command.isLine) {\n        const line = await editor.getLine();\n        if (line instanceof Error)\n            throw line;\n        return await editor.remove(line.lineNumber);\n    }\n    else {\n        return await editor.write('');\n    }\n}\nexports.default = remove;\n","phrases":["remove line","remove selection"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"doublecircle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"circle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"}},{"v":"13","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(repetition)"}},{"v":"1","w":"2","value":{"label":"(statement)"}},{"v":"2","w":"9","value":{"label":"(for)"}},{"v":"9","w":"10","value":{"label":"(every)"}},{"v":"10","w":"11","value":{"label":"({term})","store":"item"}},{"v":"11","w":"12","value":{"label":"(of, λ)"}},{"v":"12","w":"13","value":{"label":"([expressions])","store":"collection"}},{"v":"2","w":"3","value":{"label":"(from)"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"from"}},{"v":"4","w":"5","value":{"label":"(to)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"to"}},{"v":"6","w":"7","value":{"label":"(step)"}},{"v":"7","w":"8","value":{"label":"([expressions])","store":"step"}}],"value":{"id":"repetition","label":"Repetition Statement","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Creates a for loop statement","desc":"Creates a for loop statement with the provided expressions as parameters","examples":"\n        repetition statement from [number] to [number],\n        repetition statement from [number] to [number] step expression variable i plus number 5,\n        repetition statement for every car of constant cars,\n        repetition statement for every animal of earth,\n        repetition statement for every prime of variable primes,\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function Repetition(command, editor, context) {\n    console.log('[Spoken]: Executing: \"Repetition.\"');\n    const gap = context.templates['@anything'].examples[command?.extra?.lang][0];\n    let text = `for(${gap}; ${gap}; ${gap}) {\\n\\n}`;\n    if (command.from == undefined && command.item == undefined) {\n        text = `for(${gap}; ${gap}; ${gap}) {\\n\\n}`;\n    }\n    else if (command.from != null && command.to != null) {\n        const from = toValue(command.from);\n        const to = toValue(command.to);\n        const step = command.step ? toValue(command.step) : 'i + 1';\n        text = `for(let i = ${from}; i < ${to}; i = ${step}) {\\n\\n}`;\n    }\n    else if (command.item != null && command.collection != null) {\n        const item = command.item;\n        const collection = toValue(command.collection);\n        text = `for(const ${item} of ${collection}) {\\n\\n}`;\n    }\n    const line = await editor.getLine();\n    await editor.write(text);\n    await editor.indentSelection();\n    await editor.goToLine(line._line + 1);\n    if (command.collection && text.includes(gap)) {\n        const pos = await editor.findPositionOf(gap);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return null;\n}\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\nexports.default = Repetition;\n","phrases":["repetition statement from 18 to 123","repetition statement from number 140 to number 14 step expression variable i plus number 5","repetition statement for every car of constant cars","repetition statement for every animal of earth","repetition statement for every prime of variable primes"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(run)"}},{"v":"1","w":"2","value":{"label":"(current, this)"}},{"v":"2","w":"3","value":{"label":"(file)"}}],"value":{"id":"run","label":"Run file","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Run current file","desc":"Run the current file in the terminal using node","examples":"\n        run current file,\n        run this file\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function run(command, editor, context) {\n    console.log('[Spoken]: Executing: \"run.\"');\n    const info = await editor.fileInfo();\n    return await editor.writeOnTerminal('node \"' + info.fileName + '\"');\n}\nexports.default = run;\n","phrases":["run current file","run this file"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"},"parent":"sg95"},{"v":"13","value":{"shape":"circle"}},{"v":"14","value":{"shape":"circle"}},{"v":"15","value":{"shape":"circle"}},{"v":"16","value":{"shape":"circle"}},{"v":"17","value":{"shape":"doublecircle"}},{"v":"18","value":{"shape":"circle"},"parent":"sg91"},{"v":"19","value":{"shape":"circle"}},{"v":"20","value":{"shape":"doublecircle"}},{"v":"sg91","value":{"shape":"circle"}},{"v":"sg95","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(select)"}},{"v":"1","w":"2","value":{"label":"(letter, symbol)"}},{"v":"18","w":"2","value":{"label":"(letter, symbol)"}},{"v":"2","w":"3","value":{"label":"({char})","store":"word"}},{"v":"1","w":"4","value":{"label":"(word)"}},{"v":"18","w":"4","value":{"label":"(word)"}},{"v":"4","w":"20","value":{"label":"([multi_word_token])","store":"word","extraArgs":"{\"case\": \"camel\"}"}},{"v":"4","w":"3","value":{"label":"({term})","store":"word"}},{"v":"1","w":"5","value":{"label":"(from)"}},{"v":"1","w":"18","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"wordPosition"}},{"v":"5","w":"13","value":{"label":"(line)","store":"selectLine"}},{"v":"13","w":"19","value":{"label":"(number)"}},{"v":"13","w":"14","value":{"label":"({number})","store":"from"}},{"v":"19","w":"14","value":{"label":"({number})","store":"from"}},{"v":"14","w":"15","value":{"label":"(to)"}},{"v":"15","w":"16","value":{"label":"(line, λ)"}},{"v":"16","w":"17","value":{"label":"({number})","store":"to"}},{"v":"5","w":"11","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"fromPosition"}},{"v":"5","w":"6","value":{"label":"(letter, symbol)"}},{"v":"11","w":"6","value":{"label":"(letter, symbol)"}},{"v":"6","w":"7","value":{"label":"({char})","store":"from"}},{"v":"7","w":"8","value":{"label":"(to)"}},{"v":"8","w":"9","value":{"label":"(letter, symbol, λ)"}},{"v":"12","w":"9","value":{"label":"(letter, symbol, λ)"}},{"v":"8","w":"12","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"toPosition"}},{"v":"9","w":"10","value":{"label":"({char})","store":"to"}}],"value":{"id":"select","label":"Select","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Select","desc":"Select a piece of the text in the current line","examples":"\n        select the letter B,\n        select the symbol 5,\n        select the letter Q,\n        select the first letter B,\n        select the second letter K,\n        select the last workd this,\n        select the word ball,\n        select the word [multi_word_token],\n        select from line 2 to line 15,\n        select from line number 45 to line 90,\n        select from letter A to letter Z,\n        select from second leter G to last letter P\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function Select(command, editor, context) {\n    console.log('[Spoken]: Executing: \"select\"');\n    command.word = Array.isArray(command.word) ? command.word.join('') : command.word;\n    if (command.selectLine != undefined) {\n        return await editor.select(parseInt(command.from, 10), parseInt(command.to, 10), true);\n    }\n    else if (command.word != undefined) {\n        const occurences = await editor.findPositionOf(command.word);\n        let wordPosition = parseInt(command.wordPosition, 10) || 1;\n        if (wordPosition === -1)\n            wordPosition = occurences.length;\n        if (occurences.length) {\n            return await editor.select(occurences[wordPosition - 1][0], occurences[wordPosition - 1][1] - 1, false);\n        }\n        throw new Error('Nothing found for string: ' + command.word);\n    }\n    const from = command.from || '';\n    const to = command.to || '';\n    let fromPos = parseInt(command.fromPosition, 10) || 1;\n    let toPos = parseInt(command.toPosition, 10) || 1;\n    if (from === '' || to === '') {\n        throw new Error('Invalid arguments!');\n    }\n    const matchFrom = await editor.findPositionOf(from);\n    if (fromPos === -1)\n        fromPos = matchFrom.length;\n    const pad = matchFrom[fromPos - 1][1] || 0;\n    const matchTo = await editor.findPositionOf(to, undefined, pad);\n    if (toPos === -1)\n        toPos = matchTo.length;\n    return await editor.select(matchFrom[fromPos - 1][0], pad + matchTo[toPos - 1][0], false);\n}\nexports.default = Select;\n","phrases":["select the letter B","select the symbol 5","select the letter Q","select the first letter B","select the second letter K","select the last workd this","select the word ball","select the word quote is full quote","select from line 2 to line 15","select from line number 45 to line 90","select from letter A to letter Z","select from second leter G to last letter P"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(string, text)"}},{"v":"2","w":"2","value":{"label":"({any})","store":"string"}},{"v":"2","w":"4","value":{"label":"(string, text)"}}],"value":{"id":"string","label":"Writes a string","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Writes a string","desc":"Writes a string in the editor","examples":"\n      string hello world string,\n      string null pointer exeception is bad string,\n      text this can be any piece of writing text,\n      string hello my name is giovani girogio string,\n      text what is happening peter text,\n      text H E L L O text,\n      string O N U string,\n      string U S A string\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function WriteString(command, editor, context) {\n    console.log('[Spoken]: Executing: \"WriteString\"');\n    command.string = Array.isArray(command.string) ? command.string : [command.string];\n    const text = '\"' + command.string.join(' ') + '\"';\n    if (command.parent)\n        return text;\n    return await editor.write(text);\n}\nexports.default = WriteString;\n","phrases":["string hello world string","string null pointer exeception is bad string","text this can be any piece of writing text","string hello my name is giovani girogio string","text what is happening peter text","text H E L L O text","string O N U string","string U S A string"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(undo, redo)","store":"task"}},{"v":"1","w":"2","value":{"label":"(that)"}},{"v":"1","w":"3","value":{"label":"(last)"}},{"v":"3","w":"4","value":{"label":"(operation, command)"}},{"v":"2","w":"5","value":{"label":"(again)"}},{"v":"4","w":"5","value":{"label":"(again)"}}],"value":{"id":"undo_redo","label":"Undo or redo the last command","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Undo or redo the last operation/command","desc":"Undo or redo the last operation, used to correct mistakes. Just like CTRL + (Z | Y).","examples":"\n        undo that,\n        undo that again,\n        redo the last operation,\n        undo the last operation again\n        redo that\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function undoRedo(command, editor, context) {\n    console.log('[Spoken]: Executing: \"Undo/Redo.\"');\n    const task = command.task;\n    if (task === 0)\n        return await editor.undo();\n    else\n        return await editor.redo();\n}\nexports.default = undoRedo;\n","phrases":["undo that","undo that again","redo the last operation","undo the last operation again","redo that"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new, declare, create)","store":"isNew","normalizer":"boolean"}},{"v":"0","w":"2","value":{"label":"(variable, constant)","store":"memType"}},{"v":"1","w":"2","value":{"label":"(variable, constant)","store":"memType"}},{"v":"2","w":"3","value":{"label":"(called, named)"}},{"v":"3","w":"4","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"2","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"3","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"(equals, =)"}},{"v":"7","w":"5","value":{"label":"(equals, =)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"expression"}}],"value":{"id":"variable_assignment","label":"Stores a value in a variable","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Stores a value in a variable","desc":"Stores a number, string etc in a variable","examples":"\n        new variable value equals [expressions],\n        variable called batch equals [expressions],\n        declare variable called [multi_word_token] equals [expressions]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function NewVariable(command, editor, context) {\n    console.log('[Spoken]: Executing: \"NewVariable\"');\n    let { isNew, varName, expression, memType } = command;\n    const value = typeof expression === 'string' ? expression : expression?.value;\n    const allocate = memType === 0 ? 'let ' : 'const ';\n    varName = Array.isArray(varName) ? varName.join('') : varName;\n    const text = `${isNew ? allocate : ''}${varName}${value ? ` = ${value}` : ''}`;\n    await editor.write(text);\n    await editor.indentSelection();\n    if (typeof expression !== 'string' && expression?.value != null) {\n        const pos = await editor.findPositionOf(expression.value);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return undefined;\n}\nexports.default = NewVariable;\n","phrases":["new variable value equals expression reference constant bike divided by constant age","variable called batch equals gap","declare variable called quote to upper case quote equals true"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(reference)"}},{"v":"0","w":"2","value":{"label":"(variable, constant)"}},{"v":"1","w":"2","value":{"label":"(variable, constant)"}},{"v":"0","w":"6","value":{"label":"(namespace)","store":"isNamespace","normalizer":"boolean"}},{"v":"1","w":"6","value":{"label":"(namespace)","store":"isNamespace","normalizer":"boolean"}},{"v":"6","w":"2","value":{"label":"(λ)"}},{"v":"2","w":"4","value":{"label":"(called)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}}],"value":{"id":"variable_reference","label":"References a variable","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"References a variable","desc":"Writes a variable or constant in the editor","examples":"\n      variable value,\n      variable label,\n      constant name,\n      constant age,\n      constant language,\n      namespace color,\n      reference variable horse,\n      reference constant bike,\n      reference namespace bike,\n      namespace called [multi_word_token],\n      constant called [multi_word_token],\n      variable called [multi_word_token],\n      reference variable called [multi_word_token],\n      reference constant called [multi_word_token]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function VariableReference(command, editor, context) {\n    console.log('[Spoken]: Executing: \"VariableReference\"');\n    let { varName, parent, isNamespace = false } = command;\n    varName = Array.isArray(varName) ? varName : [varName];\n    varName = isNamespace ? varName.map(a => a[0].toUpperCase() + a.substr(1)).join('') : varName.join('');\n    if (parent)\n        return varName;\n    return await editor.write(varName);\n}\nexports.default = VariableReference;\n","phrases":["variable value","variable label","constant name","constant age","constant language","namespace color","reference variable horse","reference constant bike","reference namespace bike","namespace called quote has next quote","constant called quote is null quote","variable called quote to upper case quote","reference variable called quote get color quote","reference constant called quote is full quote"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"},"parent":"sg115"},{"v":"10","value":{"shape":"doublecircle"}},{"v":"sg115","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(print)"}},{"v":"0","w":"2","value":{"label":"(write)"}},{"v":"2","w":"1","value":{"label":"(down, λ)"}},{"v":"2","w":"3","value":{"label":"(it)"}},{"v":"3","w":"1","value":{"label":"(down, λ)"}},{"v":"1","w":"4","value":{"label":"(space)","store":"isSpace","normalizer":"boolean"}},{"v":"1","w":"5","value":{"label":"({any})","store":"text"}},{"v":"5","w":"5","value":{"label":"({any})","store":"text"}},{"v":"1","w":"6","value":{"label":"(letter)","store":"isDitaction","normalizer":"boolean"}},{"v":"6","w":"7","value":{"label":"({char})","store":"text"}},{"v":"9","w":"7","value":{"label":"({char})","store":"text"}},{"v":"7","w":"8","value":{"label":"(and)"}},{"v":"8","w":"9","value":{"label":"(letter)"}},{"v":"1","w":"10","value":{"label":"(dot)","store":"isDot","normalizer":"boolean"}}],"value":{"id":"write","label":"Write text","lang":"en-US","langName":"English","pad":"0.2","disableStopWords":"true","rankdir":"LR","title":"Write text","desc":"Write some text in the editor","examples":"\n        write hello how are you friend,\n        print my name is Giovani,\n        print it down how are you mate,\n        write letter B and letter E and letter T\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function write(command, editor, context) {\n    console.log('[Spoken]: Executing: \"write.\"');\n    let text = null;\n    if (command.isSpace)\n        text = ' ';\n    else if (command.isDot)\n        text = '.';\n    else\n        text = Array.isArray(command.text) ? command.text?.join(command.isDitaction ? '' : ' ') : command.text;\n    return await editor.write(text);\n}\nexports.default = write;\n","phrases":["write hello how are you friend","print my name is Giovani","print it down how are you mate","write letter B and letter E and letter T"]}}],"pt-BR":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(troque, trocar, mude, mudar)"}},{"v":"1","w":"2","value":{"label":"(linguagem)"}},{"v":"2","w":"4","value":{"label":"(inglês)","sem":"para"}}],"value":{"id":"__change_lang","label":"Mudar linguagem de entrada","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Mudar linguagem de entrada","desc":"Mudar linguagem de entrada para inglês","examples":"\n      mude a linguagem para inglês,\n      troque a linguagem para inglês,\n      mudar linguagem para francês,\n      trocar linguagem para inglês\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function changeLang(command, editor, context) {\n    console.log('[Spoken]: Executing: \"changeLang.\"');\n    console.log('This is an internal command this file should never run!');\n    return null;\n}\nexports.default = changeLang;\n","phrases":["mude a linguagem para inglês","troque a linguagem para inglês","mudar linguagem para francês","trocar linguagem para inglês"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(estrutura)"}},{"v":"1","w":"2","value":{"label":"(condicional)"}},{"v":"2","w":"3","value":{"label":"(se)","disableSpellcheck":"true"}},{"v":"2","w":"7","value":{"label":"([expressions])","store":"condition"}},{"v":"3","w":"7","value":{"label":"([expressions])","store":"condition"}},{"v":"3","w":"6","value":{"label":"(se)","disableSpellcheck":"true"}},{"v":"6","w":"4","value":{"label":"(não)","store":"otherwise","normalizer":"boolean","disableSpellcheck":"true"}},{"v":"3","w":"4","value":{"label":"(senão, sinal)","store":"otherwise","normalizer":"boolean","disableSpellcheck":"true"}},{"v":"4","w":"5","value":{"label":"([expressions])","store":"condition"}}],"value":{"id":"condition","label":"Estrutura condicional","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Estrutura condicional","desc":"Cria uma estrutura condicional if/else","examples":"\n      estrutura condicional,\n      estrutura condicional [expressions],\n      estrutura condicional se [expressions],\n      estrutura condicional se senão [expressions]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function Condition(command, editor, context) {\n    console.log('[Spoken]: Executing: \"Condition.\"');\n    const anything = context.templates['@anything'].examples[command?.extra?.lang][0];\n    let { condition = anything, otherwise = false } = command;\n    condition = typeof condition === 'string' ? condition : condition?.value;\n    let text = `if(${condition}) {\\n\\n}${otherwise ? ' else {\\n\\n}' : ''}`;\n    const line = await editor.getLine();\n    await editor.write(text);\n    await editor.indentSelection();\n    await editor.goToLine(line._line + 1);\n    if (condition.includes(anything)) {\n        const pos = await editor.findPositionOf(anything);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return null;\n}\nexports.default = Condition;\n","phrases":["estrutura condicional","estrutura condicional expressão gap","estrutura condicional se execute a função teste","estrutura condicional se senão execute a função teste"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg64"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg64","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, ponteiro)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"7","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalizer":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({char})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(começo, final)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(linha)","sem":"da"}},{"v":"1","w":"11","value":{"label":"(próximo)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(símbolo, letra)"}},{"v":"13","w":"12","value":{"label":"(símbolo, letra)"}}],"value":{"id":"cursor","label":"Mover o cursor","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Mover o cursor","desc":"Move o cursor para uma linha ou símbolo","examples":"\n        ponteiro linha 21,\n        ponteiro linha 44,\n        cursor linha 23,\n        ponteiro final da linha,\n        ponteiro começo da linha,\n        ponteiro primeira letra A,\n        ponteiro próximos 5 símbolos\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function cursor(args, editor, context) {\n    console.log('[Spoken]: Executing: \"cursor.\"');\n    if (args.linePosition != null) {\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\n        return await editor.moveCursorTo(pos);\n    }\n    else if (args.line) {\n        return await editor.goToLine(args.line);\n    }\n    else if (!args.symbol) {\n        const nth = parseInt(args.leapSize || '1', 10);\n        return await editor.moveCursorTo(null, undefined, nth);\n    }\n    else {\n        if (args.leapSize == undefined)\n            args.leapSize = '1';\n        const nth = parseInt(args.leapSize || '1', 10);\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\n    }\n    return await editor.moveCursorTo('BEGIN_LINE');\n}\nvar LinePostionEnum;\n(function (LinePostionEnum) {\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\n})(LinePostionEnum || (LinePostionEnum = {}));\nexports.default = cursor;\n","phrases":["ponteiro linha 21","ponteiro linha 44","cursor linha 23","ponteiro final da linha","ponteiro começo da linha","ponteiro primeira letra A","ponteiro próximos 5 símbolos"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(expressão)"}},{"v":"1","w":"2","value":{"label":"([expressions])","store":"left"}},{"v":"2","w":"3","value":{"label":"([math_operator], [logical_operator])","store":"operation"}},{"v":"4","w":"3","value":{"label":"([math_operator], [logical_operator])","store":"operation"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"right"}}],"value":{"id":"elementar_math_op","label":"Operação Matemática Elementar","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Escreve uma operação matemática elementar","desc":"Escreve uma operação matemática elementar (*, -, +, /)","examples":"\n      expressão [expressions] [math_operator] [expressions],\n      expressão [expressions] [logical_operator] [expressions]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function WriteElementarMathOperation(command, editor, context) {\n    console.log('[Spoken]: Executing: \"WriteElementarMathOperation\"');\n    let operation = toArray(command.operation);\n    let right = toArray(command.right);\n    let text = toValue(command.left);\n    for (let i = 0; i < right.length; i++) {\n        if (operation[i].isNegative) {\n            if (operation[i].operator === '===')\n                text += ' !== ' + toValue(right[i]);\n            else\n                text = '!(' + text + ' ' + operation[i].operator + ' ' + toValue(right[i]) + ')';\n        }\n        else {\n            text += ' ' + operation[i].operator + ' ' + toValue(right[i]);\n        }\n    }\n    if (command.parent)\n        return text;\n    await editor.write(text);\n    const wildcard = [command.left, ...right].find(item => typeof item !== 'string');\n    if (wildcard) {\n        const pos = await editor.findPositionOf(wildcard.value);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return undefined;\n}\nconst toArray = (arg) => Array.isArray(arg) ? arg : [arg];\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\nexports.default = WriteElementarMathOperation;\n","phrases":["expressão expressão gap mais falso","expressão número 14 não ou texto U S A texto"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"([number], [string], [variable_reference], [elementar_math_op], [function_call])","store":"expression"}},{"v":"0","w":"2","value":{"label":"(gap)","store":"wildCard","normalizer":"identity"}},{"v":"0","w":"3","value":{"label":"(falso, verdadeiro)","store":"booleanConstants"}}],"value":{"id":"expressions","label":"Escreve uma expressão","lang":"pt-BR","langName":"Português","pad":"0.2","nodesep":"1","ranksep":"2","rankdir":"LR","alias":"true","title":"Escreve uma expressão","desc":"Escreve uma expressão no editor de texto, esse automata foi projetado para ser usado em outros automatas","examples":"\n      falso,\n      verdadeiro,\n      gap,\n      [number],\n      [string],\n      [variable_reference],\n      [elementar_math_op],\n      [function_call]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function Expression(command, editor, context) {\n    console.log('[Spoken]: Executing: \"Expression\"');\n    let { expression, parent, wildCard, booleanConstants } = command;\n    // really ??? (fix later)\n    if (booleanConstants != null)\n        expression = booleanConstants == 1 ? 'true' : 'false';\n    if (parent) {\n        return expression ? expression : { value: wildCard, isWildCard: true };\n    }\n    return await editor.write(expression || wildCard);\n}\nexports.default = Expression;\n","phrases":["falso","verdadeiro","gap","número 14","texto U S A texto","variável chamada * hola me nombre es felipe *","expressão gap","execute a função teste"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(chame, chamar, execute)"}},{"v":"1","w":"2","value":{"label":"(função)","sem":"a"}},{"v":"2","w":"3","value":{"label":"([multi_word_token])","store":"functionName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"3","w":"4","value":{"label":"(λ)"}},{"v":"2","w":"4","value":{"label":"({term})","store":"functionName"}},{"v":"4","w":"11","value":{"label":"(da, na, do, no)"}},{"v":"4","w":"5","value":{"label":"([expressions])","store":"caller"}},{"v":"11","w":"5","value":{"label":"([expressions])","store":"caller"}},{"v":"4","w":"6","value":{"label":"(argumentos)","sem":"com"}},{"v":"5","w":"6","value":{"label":"(argumentos)","sem":"com"}},{"v":"6","w":"7","value":{"label":"([expressions])","store":"args"}},{"v":"7","w":"8","value":{"label":"(e)"}},{"v":"8","w":"7","value":{"label":"([expressions])","store":"args"}},{"v":"4","w":"9","value":{"label":"({number})","store":"argsNumber","sem":"com"}},{"v":"5","w":"9","value":{"label":"({number})","store":"argsNumber","sem":"com"}},{"v":"9","w":"10","value":{"label":"(argumentos)"}}],"value":{"id":"function_call","label":"Chama uma função","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","priority":"2","title":"Chama uma função","desc":"Chama uma função com os determinados argumentos no determinado caller","examples":"\n      execute a função teste,\n      execute a função normalizar no [expressions] com 2 argumentos,\n      execute a função remover no [expressions] com os argumentos [expressions] e [expressions]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function FunctionCall(command, editor, context) {\n    console.log('[Spoken]: Executing: \"FunctionCall\"');\n    const anything = context.templates['@anything'].examples[command?.extra?.lang];\n    const functionName = join(command.functionName);\n    const argsNumber = command.argsNumber ? parseInt(command.argsNumber, 10) : command.oneArg ? 1 : NaN;\n    const args = command.args ? toArray(command.args) : [];\n    const caller = command.caller ? toValue(command.caller) : null;\n    let text = functionName + '(';\n    if (argsNumber) {\n        text += new Array(argsNumber).fill(anything).join(', ');\n    }\n    else if (args.length) {\n        text += (args.map(item => typeof item === 'string' ? item : anything).join(', '));\n    }\n    text += ')';\n    if (caller)\n        text = caller + '.' + text;\n    if (command.parent)\n        return text;\n    const line = await editor.getLine();\n    await editor.write(text);\n    await editor.indentSelection();\n    if (argsNumber > 0) {\n        const pos = await editor.findPositionOf(anything[0]);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return undefined;\n}\nconst toArray = (arg) => Array.isArray(arg) ? arg : [arg];\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\nconst join = (item) => typeof item === 'string' ? item : item.join('');\nexports.default = FunctionCall;\n","phrases":["execute a função teste","execute a função normalizar no falso com 2 argumentos","execute a função remover no expressão gap com os argumentos número 14 e falso"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova, declare, crie)"}},{"v":"1","w":"2","value":{"label":"(função)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"fnName"}},{"v":"3","w":"4","value":{"label":"({number})","store":"argsNumber"}},{"v":"4","w":"5","value":{"label":"(argumentos)"}},{"v":"3","w":"6","value":{"label":"(retorna, retornando)"}},{"v":"5","w":"6","value":{"label":"(retorna, retornando)"}},{"v":"0","w":"6","value":{"label":"(retorne)","store":"returnOnly"}},{"v":"6","w":"7","value":{"label":"([expressions])","store":"returnValue"}}],"value":{"id":"function_declaration","label":"Cria uma função","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","priority":"2","title":"Cria uma função","desc":"Cria uma função com o número de argumentos especificados e um valor de retorno","examples":"\n        nova função multiplicar com [number] argumentos,\n        nova função multiplicar com 2 argumentos retorna [expressions],\n        declare a função dividir retornando [expressions]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function FunctionDeclaration(command, editor, context) {\n    console.log('[Spoken]: Executing: \"FunctionDeclaration\"');\n    const anything = context.templates['@anything'].examples[command?.extra?.lang];\n    let { fnName, argsNumber, returnValue, returnOnly } = command;\n    argsNumber = argsNumber != null ? parseInt(argsNumber, 10) : 0;\n    let text = '';\n    if (returnOnly == undefined) {\n        text = `function ${fnName}(`;\n        if (argsNumber > 0) {\n            text += new Array(argsNumber).fill(anything).join(', ');\n        }\n        text += ') {\\n';\n        if (returnValue != null) {\n            text += 'return ' + toValue(returnValue);\n        }\n        text += '\\n}';\n    }\n    else {\n        text = 'return ' + toValue(returnValue);\n    }\n    if (command.parent)\n        return text;\n    const line = await editor.getLine();\n    await editor.write(text);\n    await editor.indentSelection();\n    const r = await editor.goToLine(line._line + 1);\n    if (argsNumber > 0) {\n        const pos = await editor.findPositionOf(anything[0]);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return r;\n}\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\nexports.default = FunctionDeclaration;\n","phrases":["nova função multiplicar com número quatro argumentos","nova função multiplicar com 2 argumentos retorna falso","declare a função dividir retornando variável chamada * hola me nombre es felipe *"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(vá, vai)"}},{"v":"1","w":"2","value":{"label":"(para)"}},{"v":"2","w":"5","value":{"label":"(a)"}},{"v":"0","w":"3","value":{"label":"(linha)"}},{"v":"1","w":"3","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(linha)"}},{"v":"5","w":"3","value":{"label":"(linha)"}},{"v":"3","w":"6","value":{"label":"(número)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}},{"v":"6","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Trocar linha","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Trocar linha","desc":"Move or cursor para uma linha diferente","examples":"\n        linha [number],\n        vá para a linha [number],\n        linha número [number],\n        linha [number]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function goToLine(command, editor, context) {\n    console.log('[Spoken]: Executing: \"goToLine.\"');\n    return await editor.goToLine(command.line);\n}\nexports.default = goToLine;\n","phrases":["linha número 43","vá para a linha número dois","linha número número quatro","linha número 43"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg83"},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"circle"},"parent":"sg83"},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"sg83","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(e, ou, igual, =)","store":"logicalOperator"}},{"v":"2","w":"1","value":{"label":"(e, ou, igual, =)","store":"logicalOperator"}},{"v":"0","w":"2","value":{"label":"(não, negativo)","store":"isNegative","normalizer":"boolean"}},{"v":"0","w":"3","value":{"label":"(menor, maior)","store":"inequalityOperator","disableSpellcheck":"true"}},{"v":"2","w":"3","value":{"label":"(menor, maior)","store":"inequalityOperator","disableSpellcheck":"true"}},{"v":"3","w":"4","value":{"label":"(ou)"}},{"v":"4","w":"5","value":{"label":"(igual, =)","store":"orEqual","normalizer":"boolean"}},{"v":"3","w":"7","value":{"label":"(que)"}},{"v":"5","w":"7","value":{"label":"(a)"}}],"value":{"id":"logical_operator","label":"Escreve um operador lógico","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","alias":"true","title":"Escreve um operador lógico","desc":"Escreve um operador lógico (===, !==, &&, ||, >, <, >=, <=) pensando para ser usado com expressões","examples":"\n      e,\n      ou,\n      igual,\n      menor que,\n      maior que,\n      menor ou igual a,\n      maior ou igual a,\n      não igual,\n      negativo igual,\n      não e,\n      não ou\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function LogicalOperator(command, editor, context) {\n    console.log('[Spoken]: Executing: \"LogicalOperator\"');\n    const { logicalOperator, isNegative = false, inequalityOperator, orEqual = false } = command;\n    if (logicalOperator !== undefined) {\n        const operator = ['&&', '||', '===', '==='][logicalOperator];\n        return { operator, isNegative };\n    }\n    else if (inequalityOperator !== undefined) {\n        const operator = ['<', '>'][inequalityOperator] + (orEqual ? '=' : '');\n        return { operator, isNegative };\n    }\n    return { operator: 'error', isNegative: false };\n}\nexports.default = LogicalOperator;\n","phrases":["e","ou","igual","menor que","maior que","menor ou igual a","maior ou igual a","não igual","negativo igual","não e","não ou"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(mais, vezes, menos, dividido, módulo, +, x, -, /, %)","store":"mathOperator","disableSpellcheck":"true"}},{"v":"1","w":"1","value":{"label":"(por)"}}],"value":{"id":"math_operator","label":"Escreve um operador matemático","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","alias":"true","title":"Escreve uma operador matemático","desc":"Escreve um operador matemático (*, -, +, /, '%') pensando para ser usado com expressões","examples":"\n      mais,\n      vezes,\n      menos,\n      dividido por,\n      módulo\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function MathOperator(command, editor, context) {\n    console.log('[Spoken]: Executing: \"MathOperator\"');\n    const { mathOperator } = command;\n    const operator = ['+', '*', '-', '/', '%'][mathOperator % 5] || 'error';\n    return { operator };\n}\n// @ts-ignore\nexports.default = MathOperator;\n","phrases":["mais","vezes","menos","dividido por","módulo"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"3","value":{"label":"(*)"}},{"v":"3","w":"3","value":{"label":"({any})","store":"words"}},{"v":"3","w":"4","value":{"label":"(*)"}}],"value":{"id":"multi_word_token","label":"Agrupa múltiplas palavras","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Agrupa múltiplas palavras","desc":"Agrupa múltiplas palavras juntas, projetado para ser usado dentro de outros automatas","examples":"\n      aspas carro azul aspas,\n      aspas nome composto de múltiplas palavras aspas,\n      aspas frase parseada aspas,\n      aspas transação crédito texto aspas,\n      aspas preço total aspas,\n      aspas preço por item aspas,\n      aspas W H O aspas,\n      aspas N U L L aspas,\n      aspas A B C D aspas,\n      aspas camel case aspas,\n      * hola me nombre es felipe *\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function MultiWordTokens(command, editor, context) {\n    console.log('[Spoken]: Executing: \"MultiWordTokens\"');\n    function camelCase(words) {\n        return words.map((a, i) => i ? a.charAt(0).toUpperCase() + a.slice(1) : a);\n    }\n    if (command.extra?.case === 'camel') {\n        return camelCase(command.words);\n    }\n    return command.words;\n}\nexports.default = MultiWordTokens;\n","phrases":["aspas carro azul aspas","aspas nome composto de múltiplas palavras aspas","aspas frase parseada aspas","aspas transação crédito texto aspas","aspas preço total aspas","aspas preço por item aspas","aspas W H O aspas","aspas N U L L aspas","aspas A B C D aspas","aspas camel case aspas","* hola me nombre es felipe *"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg88"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg90"},{"v":"5","value":{"shape":"circle"},"parent":"sg88"},{"v":"sg88","value":{"shape":"circle"}},{"v":"sg90","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova)"}},{"v":"5","w":"1","value":{"label":"(nova)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"5","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"4","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"0","w":"4","value":{"label":"(linha)"}},{"v":"0","w":"5","value":{"label":"(crie)"}},{"v":"5","w":"5","value":{"label":"(uma)"}},{"v":"4","w":"2","value":{"label":"(nova)"}}],"value":{"id":"new_line","label":"Linha nova","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Linha nova","desc":"Cria uma linha nova abaixo ou acima da linha atual","examples":"\n        criar linha,\n        nova linha,\n        nova linha acima,\n        nova linha abaixo\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function newLine(command, editor, context) {\n    console.log('[Spoken]: Executing: \"new line.\"');\n    return await editor.newLine(command.position);\n}\nexports.default = newLine;\n","phrases":["criar linha","nova linha","nova linha acima","nova linha abaixo"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(número)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"number"}}],"value":{"id":"number","label":"Escreve um número","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","priority":"2","title":"Escreve um número","desc":"Escreve um número no editor","examples":"\n      número dois,\n      número quatro,\n      número cinco,\n      número 43,\n      número 14,\n      número 140\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function WriteNumber(command, editor, context) {\n    console.log('[Spoken]: Executing: \"WriteNumber\"');\n    const { number, parent } = command;\n    if (parent)\n        return number;\n    return await editor.write(number);\n}\nexports.default = WriteNumber;\n","phrases":["número dois","número quatro","número cinco","número 43","número 14","número 140"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(remover, remova, remove)"}},{"v":"1","w":"2","value":{"label":"(linha)","store":"isLine","normalizer":"boolean"}},{"v":"1","w":"3","value":{"label":"(seleção)","store":"isSelection","normalizer":"boolean"}}],"value":{"id":"remove_ln_sec","label":"Remover","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Remover","desc":"Remove a linha atual ou a seleção","examples":"\n        remover linha,\n        remova linha,\n        remover seleção\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function remove(command, editor, context) {\n    console.log('[Spoken]: Executing: \"remove line/selection.\"');\n    if (command.isLine) {\n        const line = await editor.getLine();\n        if (line instanceof Error)\n            throw line;\n        return await editor.remove(line.lineNumber);\n    }\n    else {\n        return await editor.write('');\n    }\n}\nexports.default = remove;\n","phrases":["remover linha","remova linha","remover seleção"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"doublecircle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"circle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"}},{"v":"13","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(estrutura)"}},{"v":"1","w":"1","value":{"label":"(de)"}},{"v":"1","w":"2","value":{"label":"(repetição)"}},{"v":"2","w":"9","value":{"label":"(para)"}},{"v":"9","w":"10","value":{"label":"(todo)"}},{"v":"10","w":"11","value":{"label":"({term})","store":"item"}},{"v":"11","w":"12","value":{"label":"(de, da, do, em, λ)"}},{"v":"12","w":"13","value":{"label":"([expressions])","store":"collection"}},{"v":"2","w":"3","value":{"label":"(de, da, do, λ)"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"from"}},{"v":"4","w":"5","value":{"label":"(até)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"to"}},{"v":"6","w":"7","value":{"label":"(etapa)"}},{"v":"7","w":"8","value":{"label":"([expressions])","store":"step"}}],"value":{"id":"repetition","label":"Estrutura de repetição","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Estrutura de repetição","desc":"Cria uma estrutura de repetição for","examples":"\n        estrutura de repetição do [number] até [number],\n        estrutura de repetição do [number] até [number] etapa expressão variável i mais número 5,\n        estrutura de repetição para todo carro em constante carros,\n        estrutura de repetição para todo animal na terra,\n        estrutura de repetição para todo primo na variável primos,\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function Repetition(command, editor, context) {\n    console.log('[Spoken]: Executing: \"Repetition.\"');\n    const gap = context.templates['@anything'].examples[command?.extra?.lang][0];\n    let text = `for(${gap}; ${gap}; ${gap}) {\\n\\n}`;\n    if (command.from == undefined && command.item == undefined) {\n        text = `for(${gap}; ${gap}; ${gap}) {\\n\\n}`;\n    }\n    else if (command.from != null && command.to != null) {\n        const from = toValue(command.from);\n        const to = toValue(command.to);\n        const step = command.step ? toValue(command.step) : 'i + 1';\n        text = `for(let i = ${from}; i < ${to}; i = ${step}) {\\n\\n}`;\n    }\n    else if (command.item != null && command.collection != null) {\n        const item = command.item;\n        const collection = toValue(command.collection);\n        text = `for(const ${item} of ${collection}) {\\n\\n}`;\n    }\n    const line = await editor.getLine();\n    await editor.write(text);\n    await editor.indentSelection();\n    await editor.goToLine(line._line + 1);\n    if (command.collection && text.includes(gap)) {\n        const pos = await editor.findPositionOf(gap);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return null;\n}\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\nexports.default = Repetition;\n","phrases":["estrutura de repetição do número 14 até número 140","estrutura de repetição do número dois até número 14 etapa expressão variável i mais número 5","estrutura de repetição para todo carro em constante carros","estrutura de repetição para todo animal na terra","estrutura de repetição para todo primo na variável primos"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(execute, executar)"}},{"v":"1","w":"4","value":{"label":"(este)"}},{"v":"4","w":"3","value":{"label":"(arquivo)"}},{"v":"1","w":"2","value":{"label":"(arquivo)"}},{"v":"2","w":"3","value":{"label":"(atual)"}}],"value":{"id":"run","label":"Executar arquivo","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Executar arquivo","desc":"Executa o arquivo atual no terminal usando node","examples":"\n        executar este arquivo,\n        executar arquivo atual\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function run(command, editor, context) {\n    console.log('[Spoken]: Executing: \"run.\"');\n    const info = await editor.fileInfo();\n    return await editor.writeOnTerminal('node \"' + info.fileName + '\"');\n}\nexports.default = run;\n","phrases":["executar este arquivo","executar arquivo atual"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"},"parent":"sg100"},{"v":"13","value":{"shape":"circle"}},{"v":"14","value":{"shape":"circle"}},{"v":"15","value":{"shape":"circle"}},{"v":"16","value":{"shape":"circle"}},{"v":"17","value":{"shape":"doublecircle"}},{"v":"18","value":{"shape":"circle"},"parent":"sg96"},{"v":"19","value":{"shape":"circle"}},{"v":"20","value":{"shape":"doublecircle"}},{"v":"sg96","value":{"shape":"circle"}},{"v":"sg100","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(selecione, selecionar)"}},{"v":"1","w":"2","value":{"label":"(letra, símbolo)"}},{"v":"18","w":"2","value":{"label":"(letra, símbolo)"}},{"v":"2","w":"3","value":{"label":"({char})","store":"word"}},{"v":"1","w":"4","value":{"label":"(palavra)"}},{"v":"18","w":"4","value":{"label":"(palavra)"}},{"v":"4","w":"20","value":{"label":"([multi_word_token])","store":"word","extraArgs":"{\"case\": \"camel\"}"}},{"v":"4","w":"3","value":{"label":"({term})","store":"word"}},{"v":"1","w":"5","value":{"label":"(de, da)"}},{"v":"1","w":"18","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"wordPosition"}},{"v":"5","w":"13","value":{"label":"(linha)","store":"selectLine"}},{"v":"13","w":"19","value":{"label":"(número)"}},{"v":"13","w":"14","value":{"label":"({number})","store":"from"}},{"v":"19","w":"14","value":{"label":"({number})","store":"from"}},{"v":"14","w":"15","value":{"label":"(até)"}},{"v":"15","w":"16","value":{"label":"(linha, λ)"}},{"v":"16","w":"17","value":{"label":"({number})","store":"to"}},{"v":"5","w":"11","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"fromPosition"}},{"v":"5","w":"6","value":{"label":"(letra, símbolo)"}},{"v":"11","w":"6","value":{"label":"(letra, símbolo)"}},{"v":"6","w":"7","value":{"label":"({char})","store":"from"}},{"v":"7","w":"8","value":{"label":"(até)"}},{"v":"8","w":"9","value":{"label":"(letra, símbolo, λ)"}},{"v":"12","w":"9","value":{"label":"(letra, símbolo, λ)"}},{"v":"8","w":"12","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"toPosition"}},{"v":"9","w":"10","value":{"label":"({char})","store":"to"}}],"value":{"id":"select","label":"Selecionar","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Selecionar","desc":"Seleciona um pedaço de texto na linha atual","examples":"\n        selecione a letra B,\n        selecione a símbolo 5,\n        selecione a letra Q,\n        selecione a primeira letra B,\n        selecione a segunda letra K,\n        selecione a última palavra valor,\n        selecione a palavra lista,\n        selecione a palavra [multi_word_token],\n        selecione da linha 2 até a linha 15,\n        selecione da linha número 45 até a linha 90,\n        selecione da letra A até a letra Z,\n        selecione da segunda letra G até a última letra P\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function Select(command, editor, context) {\n    console.log('[Spoken]: Executing: \"select\"');\n    command.word = Array.isArray(command.word) ? command.word.join('') : command.word;\n    if (command.selectLine != undefined) {\n        return await editor.select(parseInt(command.from, 10), parseInt(command.to, 10), true);\n    }\n    else if (command.word != undefined) {\n        const occurences = await editor.findPositionOf(command.word);\n        let wordPosition = parseInt(command.wordPosition, 10) || 1;\n        if (wordPosition === -1)\n            wordPosition = occurences.length;\n        if (occurences.length) {\n            return await editor.select(occurences[wordPosition - 1][0], occurences[wordPosition - 1][1] - 1, false);\n        }\n        throw new Error('Nothing found for string: ' + command.word);\n    }\n    const from = command.from || '';\n    const to = command.to || '';\n    let fromPos = parseInt(command.fromPosition, 10) || 1;\n    let toPos = parseInt(command.toPosition, 10) || 1;\n    if (from === '' || to === '') {\n        throw new Error('Invalid arguments!');\n    }\n    const matchFrom = await editor.findPositionOf(from);\n    if (fromPos === -1)\n        fromPos = matchFrom.length;\n    const pad = matchFrom[fromPos - 1][1] || 0;\n    const matchTo = await editor.findPositionOf(to, undefined, pad);\n    if (toPos === -1)\n        toPos = matchTo.length;\n    return await editor.select(matchFrom[fromPos - 1][0], pad + matchTo[toPos - 1][0], false);\n}\nexports.default = Select;\n","phrases":["selecione a letra B","selecione a símbolo 5","selecione a letra Q","selecione a primeira letra B","selecione a segunda letra K","selecione a última palavra valor","selecione a palavra lista","selecione a palavra aspas preço total aspas","selecione da linha 2 até a linha 15","selecione da linha número 45 até a linha 90","selecione da letra A até a letra Z","selecione da segunda letra G até a última letra P"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(string, text)"}},{"v":"2","w":"2","value":{"label":"({any})","store":"string"}},{"v":"2","w":"4","value":{"label":"(string, text)"}}],"value":{"id":"string","label":"Escreve uma string","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Escreve uma string","desc":"Escreve uma string no editor","examples":"\n      string olá mundo string,\n      string erros de ponteiro nulos são ruims string,\n      texto podemos dizer qualquer frase texto,\n      string Olá meu nome é Giovani Giorgio string,\n      texto e ele vai ligar pra todas até achar uma gata pra dar um passeio texto,\n      texto U S A texto,\n      texto B R T texto,\n      string G R A S S string\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function WriteString(command, editor, context) {\n    console.log('[Spoken]: Executing: \"WriteString\"');\n    command.string = Array.isArray(command.string) ? command.string : [command.string];\n    const text = '\"' + command.string.join(' ') + '\"';\n    if (command.parent)\n        return text;\n    return await editor.write(text);\n}\nexports.default = WriteString;\n","phrases":["string olá mundo string","string erros de ponteiro nulos são ruims string","texto podemos dizer qualquer frase texto","string Olá meu nome é Giovani Giorgio string","texto e ele vai ligar pra todas até achar uma gata pra dar um passeio texto","texto U S A texto","texto B R T texto","string G R A S S string"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(desfazer, refazer)","store":"task"}},{"v":"0","w":"2","value":{"label":"(desfaça, refaça)","store":"task"}},{"v":"1","w":"3","value":{"label":"(isso)"}},{"v":"2","w":"3","value":{"label":"(isso)"}},{"v":"1","w":"4","value":{"label":"(último)"}},{"v":"2","w":"4","value":{"label":"(último)"}},{"v":"4","w":"5","value":{"label":"(comando, operação)"}},{"v":"3","w":"6","value":{"label":"(também)"}},{"v":"5","w":"6","value":{"label":"(também)"}}],"value":{"id":"undo_redo","label":"Desfaz ou refaz o último comando","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Refazer ou desfazer a última operação","desc":"Refazer ou desfazer a última operação, usado para corrgir erros.","examples":"\n        desfaça isso,\n        desfazer isto,\n        desfaça a última operação,\n        refaça isso,\n        refazer a última operação\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function undoRedo(command, editor, context) {\n    console.log('[Spoken]: Executing: \"Undo/Redo.\"');\n    const task = command.task;\n    if (task === 0)\n        return await editor.undo();\n    else\n        return await editor.redo();\n}\nexports.default = undoRedo;\n","phrases":["desfaça isso","desfazer isto","desfaça a última operação","refaça isso","refazer a última operação"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova, declare, crie)","store":"isNew","normalizer":"boolean"}},{"v":"0","w":"2","value":{"label":"(variável, constante)","store":"memType"}},{"v":"1","w":"2","value":{"label":"(variável, constante)","store":"memType"}},{"v":"2","w":"3","value":{"label":"(chamada)"}},{"v":"3","w":"4","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"2","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"3","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"(igual, =)"}},{"v":"7","w":"5","value":{"label":"(igual, =)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"expression"}}],"value":{"id":"variable_assignment","label":"Guarda um valor em uma variável","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Guarda um valor em uma variável","desc":"Guarda um valor, inteiro, texto e etc em uma variável","examples":"\n        nova variável valor igual a [expressions],\n        variável valor igual a [expressions],\n        nova variável chamada [multi_word_token] igual a [expressions]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function NewVariable(command, editor, context) {\n    console.log('[Spoken]: Executing: \"NewVariable\"');\n    let { isNew, varName, expression, memType } = command;\n    const value = typeof expression === 'string' ? expression : expression?.value;\n    const allocate = memType === 0 ? 'let ' : 'const ';\n    varName = Array.isArray(varName) ? varName.join('') : varName;\n    const text = `${isNew ? allocate : ''}${varName}${value ? ` = ${value}` : ''}`;\n    await editor.write(text);\n    await editor.indentSelection();\n    if (typeof expression !== 'string' && expression?.value != null) {\n        const pos = await editor.findPositionOf(expression.value);\n        if (pos.length) {\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\n        }\n    }\n    return undefined;\n}\nexports.default = NewVariable;\n","phrases":["nova variável valor igual a variável chamada * hola me nombre es felipe *","variável valor igual a variável chamada * hola me nombre es felipe *","nova variável chamada aspas transação crédito texto aspas igual a texto U S A texto"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(referência, refira)"}},{"v":"0","w":"2","value":{"label":"(variável, constante)"}},{"v":"1","w":"2","value":{"label":"(variável, constante)"}},{"v":"0","w":"6","value":{"label":"(namespace)","store":"isNamespace","normalizer":"boolean"}},{"v":"1","w":"6","value":{"label":"(namespace)","store":"isNamespace","normalizer":"boolean"}},{"v":"6","w":"2","value":{"label":"(λ)"}},{"v":"2","w":"4","value":{"label":"(chamada)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}}],"value":{"id":"variable_reference","label":"Referencia a uma variável","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Referencia a uma variável","desc":"Refere a uma variável ou constante já declarada","examples":"\n      variável valor,\n      variável descrição,\n      constante name,\n      constante idade,\n      constante linguagem,\n      namespace cor,\n      referência variável cavalo,\n      referência constante bicicleta,\n      referência namespace bicicleta,\n      namespace chamado [multi_word_token],\n      constante chamada [multi_word_token],\n      variável chamada [multi_word_token],\n      referêncie variável chamada [multi_word_token],\n      referêncie constante chamada [multi_word_token]\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function VariableReference(command, editor, context) {\n    console.log('[Spoken]: Executing: \"VariableReference\"');\n    let { varName, parent, isNamespace = false } = command;\n    varName = Array.isArray(varName) ? varName : [varName];\n    varName = isNamespace ? varName.map(a => a[0].toUpperCase() + a.substr(1)).join('') : varName.join('');\n    if (parent)\n        return varName;\n    return await editor.write(varName);\n}\nexports.default = VariableReference;\n","phrases":["variável valor","variável descrição","constante name","constante idade","constante linguagem","namespace cor","referência variável cavalo","referência constante bicicleta","referência namespace bicicleta","namespace chamado aspas nome composto de múltiplas palavras aspas","constante chamada aspas transação crédito texto aspas","variável chamada * hola me nombre es felipe *","referêncie variável chamada aspas N U L L aspas","referêncie constante chamada aspas preço total aspas"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"},"parent":"sg116"},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"sg116","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(escreva)"}},{"v":"1","w":"3","value":{"label":"({any})","store":"text"}},{"v":"1","w":"2","value":{"label":"(espaço)","store":"isSpace","normalizer":"boolean"}},{"v":"3","w":"3","value":{"label":"({any})","store":"text"}},{"v":"1","w":"11","value":{"label":"(a)"}},{"v":"11","w":"6","value":{"label":"(letra)","store":"isDitaction","normalizer":"boolean"}},{"v":"6","w":"7","value":{"label":"({char})","store":"text"}},{"v":"9","w":"7","value":{"label":"({char})","store":"text"}},{"v":"7","w":"8","value":{"label":"(e, i)"}},{"v":"8","w":"9","value":{"label":"(letra)"}},{"v":"1","w":"10","value":{"label":"(ponto)","store":"isDot","normalizer":"boolean"}}],"value":{"id":"write","label":"Escrever texto","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Escrever texto","desc":"Escreve um pedaço de texto no editor de texto","examples":"\n        escreva ola como vai você,\n        escreva apenas um teste,\n        escreva meu nome é giovani girogio,\n        escreva letra a B e letra O e letra I\n    ","impl":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function write(command, editor, context) {\n    console.log('[Spoken]: Executing: \"write.\"');\n    let text = null;\n    if (command.isSpace)\n        text = ' ';\n    else if (command.isDot)\n        text = '.';\n    else\n        text = Array.isArray(command.text) ? command.text?.join(command.isDitaction ? '' : ' ') : command.text;\n    return await editor.write(text);\n}\nexports.default = write;\n","phrases":["escreva ola como vai você","escreva apenas um teste","escreva meu nome é giovani girogio","escreva letra a B e letra O e letra I"]}}]},"desc":"Collection of voice commands of the typescript language","label":"Typescript voice commands"}]}