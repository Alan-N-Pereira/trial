{"version":3,"file":"static/js/472.944bfc27.chunk.js","mappings":"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EACA,KACA,IACA,GACA,EACAH,EACA,iCACA,GACR,IAAK,gCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeE,MACf,EACA,KACA,IACA,GACA,EACAH,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeG,IACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeG,IACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeG,IACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeI,UACf,EACA,KACA,KACA,EACA,GACAL,EACAA,GACA,GAER,IAAK,2BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,IACA,KACA,EACA,GACAN,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeC,MACf,EACA,IACA,IACA,EACA,EACAF,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,0BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,IACA,KACA,EACA,GACAN,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeM,SACf,EACA,KACA,KACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeM,SACf,EACA,KACA,KACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,kCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeM,SACf,EACA,KACA,KACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeO,UACf,EACA,KACA,IACA,EACA,GACAR,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeO,UACf,EACA,KACA,IACA,EACA,GACAR,EACAA,GACA,GACR,IAAK,oCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeO,UACf,EACA,KACA,IACA,EACA,GACAR,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeQ,KACf,EACA,KACA,IACA,EACA,GACAT,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeQ,KACf,EACA,KACA,IACA,EACA,GACAT,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeQ,KACf,EACA,KACA,IACA,EACA,GACAT,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeS,KACf,EACA,KACA,KACA,EACA,GACAV,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeS,KACf,EACA,KACA,IACA,EACA,GACAV,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeI,UACf,EACA,KACA,KACA,EACA,GACAL,EACAA,GACA,GACR,IAAK,0BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeU,KACf,EACA,IACA,IACA,EACA,EACAX,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeU,KACf,EACA,IACA,IACA,EACA,EACAX,EACA,2BACA,GACR,IAAK,6BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,MACA,MACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,MACA,MACA,EACA,GACAN,EACA,8BACA,GACR,IAAK,6BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,MACA,MACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeK,IACf,EACA,MACA,MACA,EACA,GACAN,EACA,8BACA,GACR,IAAK,gBACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeW,OACf,EACA,KACA,KACA,EACA,GACAZ,EACAA,GACA,GACR,IAAK,oBACD,OAAO,IAAI9tC,EACP1vB,EAAAy9D,eAAeY,KACf,EACA,KACA,IACA,EACA,GACAb,EACAA,GACA,GAER,QACI,OAAO,IAAI9tC,EACP1v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","sources":["../node_modules/base64-js/index.js","../node_modules/bent/src/browser.js","../node_modules/bent/src/core.js","../node_modules/buffer/index.js","../node_modules/ieee754/index.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ConsoleLoggingListener.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/FileAudioSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/MicAudioSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/PCMRecorder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ProxyInfo.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ReplayableAudioNode.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestConfigBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestMessageAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketConnection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketMessageAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AddedLmIntent.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AgentConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AvatarSynthesisAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveTokenAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConnectionFactoryBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriberConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriptionServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogConnectorFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnState.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnStateManager.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarBuilder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/EnumTranslation.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/HeaderNames.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/QueryParameterNames.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognitionEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognizerConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RequestSession.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/ActivityResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/Enums.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/IntentResponse.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechDetected.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechHypothesis.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechKeyword.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SynthesisAudioMetadata.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationHypothesis.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TurnStatusPayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceRecognizerBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceTelemetryListener.Internal.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionMessage.Internal.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisAdapterBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisRestAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisTurn.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesizerConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriberConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationRequestSession.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationServiceAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorInterfaces.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/TranscriberRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriptionServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationStatus.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/VoiceServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/WebsocketMessageFormatter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/AudioSourceEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/BackgroundError.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ChunkedArrayBufferStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionOpenResponse.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DeferralMap.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DialogEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Error.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/EventSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Events.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Guid.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IConnection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/List.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/OCSPEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/PlatformEvent.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Promise.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Queue.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RawWebsocketMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RiffPcmEncoder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Stream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/StringUtils.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Timeout.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ActivityReceivedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioFileWriter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioInputStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioStreamFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/BaseAudioPlayer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PullAudioInputStreamCallback.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PushAudioOutputStreamCallback.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/SpeakerAudioDestination.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarSynthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarVideoFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarWebRTCConnectionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/BotFrameworkConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetails.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetailsBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationErrorCodes.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationEventArgsBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Connection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessageEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Contracts.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConversationTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CustomCommandsConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Diagnostics.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConnector.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/KeywordRecognitionModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageIdMode.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageUnderstandingModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LogLevel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/MeetingTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchDetails.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/OutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PhraseListGrammar.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ProfanityOption.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGradingSystem.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGranularity.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyCollection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyId.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Recognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ResultReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServiceEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServicePropertyChannel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SessionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SourceLanguageConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerIdentificationModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerVerificationModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBookmarkEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBoundaryType.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisOutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisVisemeEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisWordBoundaryEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechTranslationConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisVoicesResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Synthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Conversation.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationCommon.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationExpirationEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriber.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriptionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslator.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/IParticipant.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Meeting.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriber.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ParticipantChangedReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Translations.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TurnStatusReceivedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceInfo.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfile.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileClient.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileEnrollmentResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfilePhraseResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileType.ts","../node_modules/path-browserify/index.js","../node_modules/uuid/dist/commonjs-browser/index.js","../node_modules/uuid/dist/commonjs-browser/md5.js","../node_modules/uuid/dist/commonjs-browser/native.js","../node_modules/uuid/dist/commonjs-browser/nil.js","../node_modules/uuid/dist/commonjs-browser/parse.js","../node_modules/uuid/dist/commonjs-browser/regex.js","../node_modules/uuid/dist/commonjs-browser/rng.js","../node_modules/uuid/dist/commonjs-browser/sha1.js","../node_modules/uuid/dist/commonjs-browser/stringify.js","../node_modules/uuid/dist/commonjs-browser/v1.js","../node_modules/uuid/dist/commonjs-browser/v3.js","../node_modules/uuid/dist/commonjs-browser/v35.js","../node_modules/uuid/dist/commonjs-browser/v4.js","../node_modules/uuid/dist/commonjs-browser/v5.js","../node_modules/uuid/dist/commonjs-browser/validate.js","../node_modules/uuid/dist/commonjs-browser/version.js"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n","'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { AgentConfig } from \"./src/common.speech/Exports.js\";\r\n\r\n// Note: this instantiation ensures the above import isn't\r\n// removed on compile. The import being absent causes an error on running\r\nvoid new AgentConfig();\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports.js\";\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel.js\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports.js\";\r\nimport { Contracts } from \"../sdk/Contracts.js\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n    private privEnableConsoleOutput: boolean = true;\r\n\r\n    public logCallback: (s: string) => void;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public set enableConsoleOutput(enableOutput: boolean) {\r\n        this.privEnableConsoleOutput = enableOutput;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.logCallback) {\r\n                this.logCallback(log);\r\n            }\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            if (this.privEnableConsoleOutput) {\r\n                switch (event.eventType) {\r\n                    case LogLevel.Debug:\r\n                        // eslint-disable-next-line no-console\r\n                        console.debug(log);\r\n                        break;\r\n                    case LogLevel.Info:\r\n                        // eslint-disable-next-line no-console\r\n                        console.info(log);\r\n                        break;\r\n                    case LogLevel.Warning:\r\n                        // eslint-disable-next-line no-console\r\n                        console.warn(log);\r\n                        break;\r\n                    case LogLevel.Error:\r\n                        // eslint-disable-next-line no-console\r\n                        console.error(log);\r\n                        break;\r\n                    default:\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(log);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./ConsoleLoggingListener.js\";\r\nexport * from \"./IRecorder.js\";\r\nexport * from \"./MicAudioSource.js\";\r\nexport * from \"./FileAudioSource.js\";\r\nexport * from \"./PCMRecorder.js\";\r\nexport * from \"./WebsocketConnection.js\";\r\nexport * from \"./WebsocketMessageAdapter.js\";\r\nexport * from \"./ReplayableAudioNode.js\";\r\nexport * from \"./ProxyInfo.js\";\r\nexport * from \"./RestMessageAdapter.js\";\r\nexport * from \"./RestConfigBase.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl): Promise<{\r\n            bitspersample: number;\r\n            channelcount: number;\r\n            connectivity: connectivity.Unknown;\r\n            manufacturer: string;\r\n            model: string;\r\n            samplerate: number;\r\n            type: type.File;\r\n        }> => ( Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            })\r\n        ));\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 4296;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event): void => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string): void => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>): void  =>  onerror(ev.toString());\r\n\r\n                reader.onload = (event: Event): void => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e as string);\r\n        }\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { IStreamChunk } from \"../common/Stream.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { IRecorder } from \"./IRecorder.js\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error as string);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            // eslint-disable-next-line\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = (): void => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream): void => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: any): void => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any): void => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async (): Promise<void> => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: (): string => audioNodeId,\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            // eslint-disable-next-line @typescript-eslint/await-thenable\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\r\n            {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            }\r\n        ));\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        const attachScriptProcessor = (): void => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                } catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event: AudioProcessingEvent): void => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n        const skipAudioWorklet = !!this.privSpeechProcessorScript && this.privSpeechProcessorScript.toLowerCase() === \"ignore\";\r\n\r\n        if (!!context.audioWorklet && !skipAudioWorklet) {\r\n            if (!this.privSpeechProcessorScript) {\r\n                const workletScript = `class SP extends AudioWorkletProcessor {\r\n                    constructor(options) {\r\n                      super(options);\r\n                    }\r\n                    process(inputs, outputs) {\r\n                      const input = inputs[0];\r\n                      const output = [];\r\n                      for (let channel = 0; channel < input.length; channel += 1) {\r\n                        output[channel] = input[channel];\r\n                      }\r\n                      this.port.postMessage(output[0]);\r\n                      return true;\r\n                    }\r\n                  }\r\n                  registerProcessor('speech-processor', SP);`;\r\n                const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n                this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n            }\r\n\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then((): void => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent): void => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch((): void => {\r\n                    attachScriptProcessor();\r\n                });\r\n        } else {\r\n            try {\r\n                attachScriptProcessor();\r\n            } catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err as string}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources(context: AudioContext): void {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: MediaStreamTrack): void => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports.js\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports.js\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>): IStreamChunk<ArrayBuffer> => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IErrorMessages } from \"../common/Exports.js\";\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\nexport interface IRestParams {\r\n    apiVersion: string;\r\n    authorization: string;\r\n    clientAppId: string;\r\n    contentTypeKey: string;\r\n    correlationId: string;\r\n    languageCode: string;\r\n    nickname: string;\r\n    profanity: string;\r\n    requestId: string;\r\n    roomId: string;\r\n    sessionToken: string;\r\n    subscriptionKey: string;\r\n    subscriptionRegion: string;\r\n    token: string;\r\n}\r\n\r\nexport class RestConfigBase {\r\n\r\n    public static get requestOptions(): IRequestOptions {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n\r\n    public static get configParams(): IRestParams {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n\r\n    public static get restErrors(): IErrorMessages {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n\r\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 10000,\r\n    };\r\n\r\n    private static readonly privRestErrors: IErrorMessages = {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    };\r\n\r\n    private static readonly privDefaultParams: IRestParams = {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        contentTypeKey: \"Content-Type\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    };\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport bent, { BentResponse, RequestBody } from \"bent\";\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports.js\";\r\nimport { IRequestOptions } from \"./Exports.js\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\ninterface JsonError {\r\n    error?: {\r\n        message: string;\r\n    };\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: { [key: string]: string } = {};\r\n            arr.forEach((line: string): void => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: { [key: string]: any } = {},\r\n        body: any = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: JsonError = {}): IRestResponse => {\r\n            const d: { statusText?: string; statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const send = (postData: RequestBody): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\r\n            sendRequest(params, postData).then( async (data: BentResponse): Promise<void> => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: JsonError = await data.json() as JsonError;\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string): void => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.Post && body) {\r\n            this.privHeaders[\"content-type\"] = \"application/json\";\r\n            this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n        }\r\n        send(body as RequestBody);\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private queryParams(params: { [key: string]: string } = {}): string {\r\n        return Object.keys(params)\r\n            .map((k: string): string => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter.js\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public state(): ConnectionState {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Node.JS specific web socket / browser support.\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\nimport * as http from \"http\";\r\nimport * as net from \"net\";\r\nimport * as tls from \"tls\";\r\nimport Agent from \"agent-base\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\n\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                options.agent = this.getAgent();\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error as string));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (): void => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }): void => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }): void => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }): void => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage): void => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string): void => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close(reason?: string): Promise<void> {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage(sendItem: ISendItem): Promise<void> {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e as string}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((): void => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem): void => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent(event: ConnectionEvent): void {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private getAgent(): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: { proxyInfo: ProxyInfo } = new Agent.Agent(this.createConnection) as unknown as { proxyInfo: ProxyInfo } ;\r\n\r\n        if (this.proxyInfo !== undefined &&\r\n            this.proxyInfo.HostName !== undefined &&\r\n            this.proxyInfo.Port > 0) {\r\n            agent.proxyInfo = this.proxyInfo;\r\n        }\r\n\r\n        return agent as unknown as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private createConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: true,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.proxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        return socketPromise;\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel.js\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string;\r\n        connectionId: string;\r\n        conversationId: string;\r\n        fromId: string;\r\n        commandsCulture: string;\r\n        ttsAudioFormat: string;\r\n    };\r\n    version: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    AvatarSynthesizer,\r\n    PropertyId,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    ISynthesisSectionVideo,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\n\r\nexport class AvatarSynthesisAdapter extends SynthesisAdapterBase {\r\n    private readonly privAvatarSynthesizer: AvatarSynthesizer;\r\n    private readonly privAvatarConfig: AvatarConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        avatarSynthesizer: AvatarSynthesizer,\r\n        avatarConfig: AvatarConfig,\r\n        ) {\r\n\r\n        super(authentication, connectionFactory,\r\n            synthesizerConfig, undefined);\r\n        this.privAvatarSynthesizer = avatarSynthesizer;\r\n        this.privSynthesizer = avatarSynthesizer as Synthesizer;\r\n        this.privAvatarConfig = avatarConfig;\r\n    }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(undefined);\r\n    }\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        this.privSynthesizerConfig.synthesisVideoSection = {\r\n            format: {\r\n                bitrate: this.privAvatarConfig.videoFormat?.bitrate,\r\n                codec: this.privAvatarConfig.videoFormat?.codec,\r\n                crop: {\r\n                    bottomRight: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.y,\r\n                    },\r\n                    topLeft: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.y,\r\n                    },\r\n                },\r\n                resolution: {\r\n                    height: this.privAvatarConfig.videoFormat?.height,\r\n                    width: this.privAvatarConfig.videoFormat?.width,\r\n                },\r\n            },\r\n            protocol: {\r\n                name: \"WebRTC\",\r\n                webrtcConfig: {\r\n                    clientDescription: btoa(this.privSynthesizerConfig.parameters.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP)),\r\n                    iceServers: this.privAvatarConfig.remoteIceServers ?? this.privAvatarSynthesizer.iceServers,\r\n                },\r\n            },\r\n            talkingAvatar: {\r\n                background: {\r\n                    color: this.privAvatarConfig.backgroundColor,\r\n                    image: {\r\n                        url: this.privAvatarConfig.backgroundImage?.toString(),\r\n                    }\r\n                },\r\n                character: this.privAvatarConfig.character,\r\n                customized: this.privAvatarConfig.customized,\r\n                style: this.privAvatarConfig.style,\r\n            }\r\n        } as ISynthesisSectionVideo;\r\n    }\r\n\r\n\r\n    protected onAvatarEvent(metadata: ISynthesisMetadata): void {\r\n        if (!!this.privAvatarSynthesizer.avatarEventReceived) {\r\n            const avatarEventArgs: AvatarEventArgs = new AvatarEventArgs(\r\n                metadata.Data.Offset,\r\n                metadata.Data.Name);\r\n            try {\r\n                this.privAvatarSynthesizer.avatarEventReceived(this.privAvatarSynthesizer, avatarEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication.js\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    public constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private static privTokenPrefix: string = \"Bearer \";\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    public constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n","import { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionResult\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis\r\n} from \"./Exports.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\r\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        void connectionMessage;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        void result;\r\n        void offset;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        void result;\r\n        void duration;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        let processed: boolean = false;\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                if (!!this.handleSpeechHypothesisMessage) {\r\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (!!this.handleSpeechPhraseMessage) {\r\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n            // Implementing to allow inheritance\r\n            void sessionId;\r\n            void requestId;\r\n            void cancellationReason;\r\n            void errorCode;\r\n            void error;\r\n        }\r\n\r\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\r\n\r\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody);\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n        const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        let offset = simpleOffset;\r\n\r\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n        if (ResultReason.Canceled === resultReason) {\r\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n            await this.cancelRecognitionLocal(\r\n                cancelReason,\r\n                cancellationErrorCode,\r\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n        } else {\r\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        simple.DisplayText,\r\n                        simple.Duration,\r\n                        simpleOffset,\r\n                        simple.Language,\r\n                        simple.LanguageDetectionConfidence,\r\n                        simple.SpeakerId,\r\n                        undefined,\r\n                        textBody,\r\n                        resultProps);\r\n                } else {\r\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody);\r\n                    const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                    const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        detailed.Text,\r\n                        detailed.Duration,\r\n                        totalOffset,\r\n                        detailed.Language,\r\n                        detailed.LanguageDetectionConfidence,\r\n                        detailed.SpeakerId,\r\n                        undefined,\r\n                        offsetCorrectedJson,\r\n                        resultProps);\r\n\r\n                        offset = result.offset;\r\n                }\r\n\r\n                this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleSpeechHypothesis(textBody: string): void {\r\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody);\r\n        const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            ResultReason.RecognizingSpeech,\r\n            hypothesis.Text,\r\n            hypothesis.Duration,\r\n            offset,\r\n            hypothesis.Language,\r\n            hypothesis.LanguageDetectionConfidence,\r\n            hypothesis.SpeakerId,\r\n            undefined,\r\n            textBody,\r\n            resultProps);\r\n\r\n        this.privRequestSession.onHypothesis(offset);\r\n\r\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\r\n    private readonly universalUri: string = \"/speech/universal/v2\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setV2UrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = `${host}${this.universalUri}`;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    protected setV2UrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionResult,\r\n    ConversationTranscriber,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\nimport { PhraseDetection, SpeakerDiarization } from \"./ServiceRecognizerBase.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class ConversationTranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privConversationTranscriber: ConversationTranscriber;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationTranscriber: ConversationTranscriber) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationTranscriber);\r\n        this.privConversationTranscriber = conversationTranscriber;\r\n        this.setSpeakerDiarizationJson();\r\n    }\r\n\r\n    protected setSpeakerDiarizationJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = \"Conversation\";\r\n            const speakerDiarization: SpeakerDiarization = {};\r\n            speakerDiarization.mode = \"Anonymous\";\r\n            speakerDiarization.audioSessionId = this.privDiarizationSessionId;\r\n            speakerDiarization.audioOffsetMs = 0;\r\n            phraseDetection.speakerDiarization = speakerDiarization;\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: ConversationTranscriptionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new ConversationTranscriptionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new ConversationTranscriptionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privConversationTranscriber.transcribing) {\r\n                    try {\r\n                        this.privConversationTranscriber.transcribing(this.privConversationTranscriber, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: ConversationTranscriptionEventArgs = new ConversationTranscriptionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privConversationTranscriber.transcribed) {\r\n                            try {\r\n                                this.privConversationTranscriber.transcribed(this.privConversationTranscriber, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privConversationTranscriber.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privConversationTranscriber.canceled(this.privConversationTranscriber, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports.js\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride =\r\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\r\n            this.listenOnce(recoMode, successCallback, errorCallback);\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\r\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e as string);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        try {\r\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\r\n                            if (!processed) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(\"Connection to service terminated.\");\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection, true);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig(connection: IConnection): Promise<void> {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext(connection: IConnection): Promise<void> {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: { [section: string]: any } = {};\r\n            definition.text = keywords[i];\r\n            if (i < keywordOffsets.length) {\r\n                definition.offset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\r\n        this.speechContext.setSection(\"keywordDetection\", [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: \"EndOfTurn\" },\r\n            type: \"startTrigger\"\r\n        }]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../common/Error.js\";\r\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState.js\";\r\n\r\nexport class DialogServiceTurnStateManager {\r\n    private privTurnMap: Map<string, DialogServiceTurnState>;\r\n\r\n    public constructor() {\r\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\r\n        return;\r\n    }\r\n\r\n    public StartTurn(id: string): DialogServiceTurnState {\r\n        if (this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\r\n        }\r\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\r\n        this.privTurnMap.set(id, turnState);\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public GetTurn(id: string): DialogServiceTurnState {\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public CompleteTurn(id: string): DialogServiceTurnState {\r\n        if (!this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\r\n        }\r\n        const turnState = this.privTurnMap.get(id);\r\n        turnState.complete();\r\n        this.privTurnMap.delete(id);\r\n        return turnState;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase);\r\n        } else {\r\n            this.privPhrases.push(phrase);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar);\r\n        } else {\r\n            this.privGrammars.push(grammar);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports.js\";\r\nimport { RecognitionStatus } from \"./Exports.js\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus, expectEndOfDictation: boolean = false): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.EndOfDictation:\r\n                // If we need the result in EndOfDictation (typically some session level result),\r\n                // translate into RecognizedSpeech, otherwise NoMatch\r\n                reason = expectEndOfDictation ? ResultReason.RecognizedSpeech : ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication.js\";\r\nexport * from \"./CognitiveTokenAuthentication.js\";\r\nexport * from \"./IAuthentication.js\";\r\nexport * from \"./IConnectionFactory.js\";\r\nexport * from \"./ISynthesisConnectionFactory.js\";\r\nexport * from \"./IntentConnectionFactory.js\";\r\nexport * from \"./SpeakerRecognitionConnectionFactory.js\";\r\nexport * from \"./RecognitionEvents.js\";\r\nexport * from \"./ServiceRecognizerBase.js\";\r\nexport * from \"./ConversationServiceRecognizer.js\";\r\nexport * from \"./RecognizerConfig.js\";\r\nexport * from \"./SpeechServiceInterfaces.js\";\r\nexport * from \"./WebsocketMessageFormatter.js\";\r\nexport * from \"./SpeechConnectionFactory.js\";\r\nexport * from \"./ConversationTranscriberConnectionFactory.js\";\r\nexport * from \"./TranscriberConnectionFactory.js\";\r\nexport * from \"./TranslationConnectionFactory.js\";\r\nexport * from \"./SpeechSynthesisConnectionFactory.js\";\r\nexport * from \"./EnumTranslation.js\";\r\nexport * from \"./ServiceMessages/Enums.js\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd.js\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis.js\";\r\nexport * from \"./ServiceMessages/TranslationPhrase.js\";\r\nexport * from \"./TranslationServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/SpeechDetected.js\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis.js\";\r\nexport * from \"./ServiceMessages/SpeechKeyword.js\";\r\nexport * from \"./SpeechServiceRecognizer.js\";\r\nexport * from \"./ConversationTranscriptionServiceRecognizer.js\";\r\nexport * from \"./TranscriptionServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase.js\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase.js\";\r\nexport * from \"./AddedLmIntent.js\";\r\nexport * from \"./IntentServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/IntentResponse.js\";\r\nexport * from \"./ServiceMessages/SpeakerResponse.js\";\r\nexport * from \"./RequestSession.js\";\r\nexport * from \"./SpeechContext.js\";\r\nexport * from \"./DynamicGrammarBuilder.js\";\r\nexport * from \"./DynamicGrammarInterfaces.js\";\r\nexport * from \"./DialogServiceAdapter.js\";\r\nexport * from \"./AgentConfig.js\";\r\nexport * from \"./Transcription/Exports.js\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nexport * from \"./SynthesisTurn.js\";\r\nexport * from \"./SynthesisAdapterBase.js\";\r\nexport { AvatarSynthesisAdapter } from \"./AvatarSynthesisAdapter.js\";\r\nexport { SpeechSynthesisAdapter } from \"./SpeechSynthesisAdapter.js\";\r\nexport * from \"./SynthesisRestAdapter.js\";\r\nexport * from \"./SynthesizerConfig.js\";\r\nexport * from \"./SynthesisContext.js\";\r\nexport * from \"./SpeakerRecognitionConfig.js\";\r\nexport * from \"./SpeakerServiceRecognizer.js\";\r\nexport * from \"./VoiceServiceRecognizer.js\";\r\nexport * from \"./SpeechServiceConfig.js\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static Authorization: string = \"Authorization\";\r\n    public static SpIDAuthKey: string = \"Apim-Subscription-Id\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = (): void => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n\r\n                if (null !== intentResponse && !!intentResponse.topScoringIntent && !!intentResponse.topScoringIntent.intent) {\r\n                    let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                    if (this.privUmbrellaIntent !== undefined) {\r\n                        addedIntent = this.privUmbrellaIntent;\r\n                    }\r\n\r\n                    if (!!addedIntent) {\r\n                        const intentId = addedIntent === undefined || addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                        let reason = ev.result.reason;\r\n\r\n                        if (undefined !== intentId) {\r\n                            reason = ResultReason.RecognizedIntent;\r\n                        }\r\n\r\n                        // make sure, properties is set.\r\n                        const properties = (undefined !== ev.result.properties) ?\r\n                            ev.result.properties : new PropertyCollection();\r\n\r\n                        properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                        ev = new IntentRecognitionEventArgs(\r\n                            new IntentRecognitionResult(\r\n                                intentId,\r\n                                ev.result.resultId,\r\n                                reason,\r\n                                ev.result.text,\r\n                                ev.result.duration,\r\n                                ev.result.offset,\r\n                                undefined,\r\n                                undefined,\r\n                                ev.result.errorDetails,\r\n                                ev.result.json,\r\n                                properties),\r\n                            ev.offset,\r\n                            ev.sessionId);\r\n\r\n                    }\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static SegmentationSilenceTimeoutMs: string = \"segmentationSilenceTimeoutMs\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n    public static Postprocessing: string = \"postprocessing\";\r\n    public static CtsMeetingId: string = \"meetingId\";\r\n    public static CtsDeviceId: string = \"deviceId\";\r\n    public static CtsIsParticipant: string = \"isParticipant\";\r\n    public static EnableAvatar: string = \"enableTalkingAvatar\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    public constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    public constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\nimport { Context, SpeechServiceConfig } from \"./Exports.js\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n    private privEnableSpeakerId: boolean;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n        this.privEnableSpeakerId = false;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push( { language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push( { language, endpoint: \"\" } );\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public set isSpeakerDiarizationEnabled(value: boolean) {\r\n        this.privEnableSpeakerId = value;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents.js\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal.js\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecognitionBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    public constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n\r\n    // The number of bytes sent for the current recognition.\r\n    // Counter is reset to 0 each time recognition is started.\r\n    public get recognitionBytesSent(): number {\r\n        return this.privRecognitionBytesSent;\r\n    }\r\n\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privRecognitionBytesSent = 0;\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext(): void {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n        this.privRecognitionBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (!!this.privServiceTelemetryListener) {\r\n                this.privServiceTelemetryListener.dispose();\r\n            }\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent(event: SpeechRecognitionEvent): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IActivityPayloadResponse {\r\n    conversationId: string;\r\n    messageDataStreamType: number;\r\n    messagePayload: string | object;\r\n    version: number;\r\n}\r\n\r\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\r\n    private privActivityResponse: IActivityPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privActivityResponse = JSON.parse(json) as IActivityPayloadResponse;\r\n    }\r\n\r\n    public static fromJSON(json: string): ActivityPayloadResponse {\r\n        return new ActivityPayloadResponse(json);\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privActivityResponse.conversationId;\r\n    }\r\n\r\n    public get messageDataStreamType(): number {\r\n        return this.privActivityResponse.messageDataStreamType;\r\n    }\r\n\r\n    public get messagePayload(): string | object {\r\n        return this.privActivityResponse.messagePayload;\r\n    }\r\n\r\n    public get version(): number {\r\n        return this.privActivityResponse.version;\r\n    }\r\n}\r\n\r\nexport enum MessageDataStreamType {\r\n    None = 0,\r\n    TextToSpeechAudio = 1,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                    if (!!details.DisplayWords) {\r\n                        for (const word of details.DisplayWords) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n    BadRequest,\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IIntentResponse {\r\n    query?: string;\r\n    topScoringIntent?: ISingleIntent;\r\n    entities?: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private privIntentResponse: IIntentResponse;\r\n\r\n    private constructor(json: string) {\r\n        if (json === \"\") {\r\n            this.privIntentResponse = {};\r\n        } else {\r\n            this.privIntentResponse = JSON.parse(json) as IIntentResponse;\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.privIntentResponse.query;\r\n    }\r\n\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.privIntentResponse.topScoringIntent;\r\n    }\r\n\r\n    public get entities(): IIntentEntity[] {\r\n        return this.privIntentResponse.entities;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json) as ISimpleSpeechPhrase;\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechStartDetected = JSON.parse(json) as ISpeechDetected;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase.js\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechHypothesis = JSON.parse(json) as ISpeechHypothesis;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.keyword\r\nexport interface ISpeechKeyword {\r\n    Status: string;\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class SpeechKeyword implements ISpeechKeyword {\r\n    private privSpeechKeyword: ISpeechKeyword;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechKeyword = JSON.parse(json) as ISpeechKeyword;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechKeyword {\r\n        return new SpeechKeyword(json);\r\n    }\r\n\r\n    public get Status(): string {\r\n        return this.privSpeechKeyword.Status;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechKeyword.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechKeyword.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechKeyword.Duration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"../../sdk/Exports.js\";\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\",\r\n    SentenceBoundary = \"SentenceBoundary\",\r\n    SessionEnd = \"SessionEnd\",\r\n    AvatarSignal = \"TalkingAvatarSignal\",\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        Duration: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n            BoundaryType: SpeechSynthesisBoundaryType;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n        Name: string;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json) as ISynthesisAudioMetadata;\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(hypothesis: ITranslationHypothesis) {\r\n        this.privTranslationHypothesis = hypothesis;\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = TranslationStatus[this.privTranslationHypothesis.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationHypothesis {\r\n        return new TranslationHypothesis(JSON.parse(json) as ITranslationHypothesis);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationHypothesis: { SpeechHypothesis: ITranslationHypothesis }): TranslationHypothesis {\r\n        Contracts.throwIfNullOrUndefined(translationHypothesis, \"translationHypothesis\");\r\n        const hypothesis: ITranslationHypothesis = translationHypothesis.SpeechHypothesis;\r\n        translationHypothesis.SpeechHypothesis = undefined;\r\n        hypothesis.Translation = (translationHypothesis as unknown as ITranslations);\r\n        return new TranslationHypothesis(hypothesis);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privTranslationHypothesis.PrimaryLanguage?.Language;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations, RecognitionStatus } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Translation?: ITranslations;\r\n    Text?: string;\r\n    DisplayText?: string;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private privTranslationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(phrase: ITranslationPhrase) {\r\n        this.privTranslationPhrase = phrase;\r\n        this.privTranslationPhrase.RecognitionStatus = RecognitionStatus[this.privTranslationPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n        if (this.privTranslationPhrase.Translation !== undefined) {\r\n            this.privTranslationPhrase.Translation.TranslationStatus = TranslationStatus[this.privTranslationPhrase.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationPhrase {\r\n        return new TranslationPhrase(JSON.parse(json) as ITranslationPhrase);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationResponse: { SpeechPhrase: ITranslationPhrase }): TranslationPhrase {\r\n        Contracts.throwIfNullOrUndefined(translationResponse, \"translationResponse\");\r\n        const phrase: ITranslationPhrase = translationResponse.SpeechPhrase;\r\n        translationResponse.SpeechPhrase = undefined;\r\n        phrase.Translation = (translationResponse as unknown as ITranslations);\r\n        phrase.Text = phrase.DisplayText;\r\n        return new TranslationPhrase(phrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privTranslationPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationPhrase.Duration;\r\n    }\r\n\r\n    public get Text(): string | undefined {\r\n        return this.privTranslationPhrase.Text;\r\n    }\r\n\r\n    public get Language(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public get Confidence(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Confidence;\r\n    }\r\n\r\n    public get Translation(): ITranslations | undefined {\r\n        return this.privTranslationPhrase.Translation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisStatus } from \"../Exports.js\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus?: SynthesisStatus;\r\n    FailureReason?: string;\r\n    Status?: SynthesisStatus;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private privSynthesisEnd: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisEnd = JSON.parse(json) as ITranslationSynthesisEnd;\r\n        if (!!this.privSynthesisEnd.SynthesisStatus) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.SynthesisStatus as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n        if (!!this.privSynthesisEnd.Status) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.Status as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.privSynthesisEnd.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.privSynthesisEnd.FailureReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITurnStatusResponsePayload {\r\n    interactionId: string;\r\n    conversationId: string;\r\n    statusCode: any;\r\n}\r\n\r\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\r\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privMessageStatusResponse = JSON.parse(json) as ITurnStatusResponsePayload;\r\n    }\r\n\r\n    public static fromJSON(json: string): TurnStatusResponsePayload {\r\n        return new TurnStatusResponsePayload(json);\r\n    }\r\n\r\n    public get interactionId(): string {\r\n        return this.privMessageStatusResponse.interactionId;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privMessageStatusResponse.conversationId;\r\n    }\r\n\r\n    public get statusCode(): any {\r\n        // Payloads may contain a limited set of textual representations or a numeric status\r\n        // code. The textual values are here converted into numeric ones.\r\n        switch (this.privMessageStatusResponse.statusCode) {\r\n            case \"Success\":\r\n                return 200;\r\n            case \"Failed\":\r\n                return 400;\r\n            case \"TimedOut\":\r\n                return 429;\r\n            default:\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                return this.privMessageStatusResponse.statusCode;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports.js\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation.js\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CustomModel {\r\n    language: string;\r\n    endpoint: string;\r\n}\r\n\r\nexport interface PhraseDetection {\r\n    customModels?: CustomModel[];\r\n    onInterim?: { action: string };\r\n    onSuccess?: { action: string };\r\n    mode?: string;\r\n    INTERACTIVE?: Segmentation;\r\n    CONVERSATION?: Segmentation;\r\n    DICTATION?: Segmentation;\r\n    speakerDiarization?: SpeakerDiarization;\r\n}\r\n\r\nexport interface SpeakerDiarization {\r\n    mode?: string;\r\n    audioSessionId?: string;\r\n    audioOffsetMs?: number;\r\n    identityProvider?: string;\r\n}\r\n\r\nexport interface Segmentation {\r\n    segmentation: {\r\n        mode: \"Custom\";\r\n        segmentationSilenceTimeoutMs: number;\r\n    };\r\n}\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n    protected privExpectContentAssessmentResponse: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n            if (typeof globalThis !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = globalThis.setTimeout.bind(globalThis);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n\r\n        this.setLanguageIdJson();\r\n        this.setOutputDetailLevelJson();\r\n    }\r\n\r\n    protected setTranslationJson(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            const languages = targetLanguages.split(\",\");\r\n            const translationVoice: string =  this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n            const action = ( translationVoice !== undefined ) ? \"Synthesize\" : \"None\";\r\n            this.privSpeechContext.setSection(\"translation\", {\r\n                onSuccess: { action },\r\n                output: { interimResults: { mode: \"Always\" } },\r\n                targetLanguages: languages,\r\n            });\r\n\r\n            if (translationVoice !== undefined) {\r\n                const languageToVoiceMap: { [key: string]: string } = {};\r\n                for (const lang of languages) {\r\n                    languageToVoiceMap[lang] = translationVoice;\r\n                }\r\n                this.privSpeechContext.setSection(\"synthesis\", {\r\n                    defaultVoices: languageToVoiceMap\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void {\r\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n        }\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            phraseDetection.onInterim = { action: \"Translate\" };\r\n            phraseDetection.onSuccess = { action: \"Translate\" };\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"None\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"None\"\r\n                }\r\n            });\r\n        }\r\n\r\n        this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n        this.setSpeechSegmentationTimeoutJson();\r\n        this.setTranslationJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    public set expectContentAssessmentResponse(value: boolean) {\r\n        this.privExpectContentAssessmentResponse = value;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                return this.receiveMessage();\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports.js\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents.js\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent(e: PlatformEvent): void {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError(statusCode: number): string {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport { Context } from \"./Exports.js\";\r\n\r\nexport class SpeakerRecognitionConfig {\r\n    private privParameters: PropertyCollection;\r\n    private privContext: Context;\r\n\r\n    public constructor(\r\n        context: Context,\r\n        parameters: PropertyCollection) {\r\n        this.privContext = context ? context : new Context(null);\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.privContext;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        endpointPath: string,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\r\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\r\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private scenarioToPath(mode: string): string {\r\n        switch (mode) {\r\n            case \"TextIndependentVerification\":\r\n            case \"2\":\r\n                return \"verification/text-independent\";\r\n            case \"TextDependentVerification\":\r\n            case \"1\":\r\n                return \"verification/text-dependent\";\r\n            default:\r\n                return \"identification/text-independent\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"recognition\", connectionId);\r\n    }\r\n}\r\n\r\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"profile\", connectionId);\r\n    }\r\n}\r\n\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ISpeechConfigAudioDevice,\r\n    SpeakerResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeakerServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerRecognizer: SpeakerRecognizer;\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privResultDeferral: Deferred<SpeakerRecognitionResult>;\r\n    private privSpeakerModel: SpeakerRecognitionModel;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: SpeakerRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerRecognizer = recognizer;\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.recognizeSpeaker = (model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> => this.recognizeSpeakerOnce(model);\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speaker.response\":\r\n                const response: SpeakerResponse = JSON.parse(connectionMessage.textBody) as SpeakerResponse;\r\n                let result: SpeakerRecognitionResult;\r\n                if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.Canceled,\r\n                        CancellationErrorCode.ServiceError,\r\n                        response.status.reason\r\n                        );\r\n                } else {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.RecognizedSpeaker,\r\n                        );\r\n                }\r\n                if (!!this.privResultDeferral) {\r\n                    this.privResultDeferral.resolve(result);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privResultDeferral) {\r\n            const result: SpeakerRecognitionResult = new SpeakerRecognitionResult(\r\n                {\r\n                    scenario: this.privSpeakerModel.scenario,\r\n                    status: { statusCode: error, reason: error }\r\n                },\r\n                ResultReason.Canceled,\r\n                errorCode,\r\n                error\r\n                );\r\n            try {\r\n                this.privResultDeferral.resolve(result);\r\n            } catch (error) {\r\n                this.privResultDeferral.reject(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async recognizeSpeakerOnce(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        this.privSpeakerModel = model;\r\n        this.voiceProfileType = model.scenario;\r\n        if (!this.privResultDeferral) {\r\n            this.privResultDeferral = new Deferred<SpeakerRecognitionResult>();\r\n        }\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(this.extractSpeakerContext(model));\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return this.privResultDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(context: SpeakerContext): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await this.sendSpeakerRecognition(connection, context);\r\n        // await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private async sendSpeakerRecognition(connection: IConnection, context: SpeakerContext): Promise<void> {\r\n        const speakerContextJson = JSON.stringify(context);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            speakerContextJson));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    IDynamicGrammar,\r\n} from \"./Exports.js\";\r\n\r\ninterface Context {\r\n    [section: string]: any;\r\n}\r\n\r\ninterface PhraseContext {\r\n    [section: string]: any;\r\n    phraseDetection?: {\r\n        enrichment?: {\r\n            pronunciationAssessment: any;\r\n            contentAssessment?: {\r\n                topic: string;\r\n            };\r\n        };\r\n        speakerDiarization?: {\r\n            mode?: string;\r\n            audioSessionId?: string;\r\n            audioOffsetMs?: number;\r\n            identityProvider?: string;\r\n        };\r\n        mode?: string;\r\n    };\r\n    phraseOutput?: {\r\n        detailed?: {\r\n            options?: string[];\r\n        };\r\n        format?: any;\r\n    };\r\n}\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: PhraseContext = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    public constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Gets a section of the speech.context object.\r\n     * @param sectionName Name of the section to get.\r\n     * @return string or Context JSON serializable object that represents the value.\r\n     */\r\n    public getSection(sectionName: string): string | Context {\r\n        return (this.privContext[sectionName] || {}) as string | Context;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | Context): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string,\r\n        contentAssessmentTopic: string,\r\n        isSpeakerDiarizationEnabled: boolean = false): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseDetection.enrichment === undefined) {\r\n            this.privContext.phraseDetection.enrichment = {\r\n                pronunciationAssessment: {}\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params) as Context;\r\n        if (isSpeakerDiarizationEnabled) {\r\n            this.privContext.phraseDetection.mode = \"Conversation\";\r\n        }\r\n        this.setWordLevelTimings();\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"SNR\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"SNR\");\r\n        }\r\n        if (!!contentAssessmentTopic) {\r\n            this.privContext.phraseDetection.enrichment.contentAssessment = {\r\n                topic: contentAssessmentTopic\r\n            };\r\n            this.privContext.phraseOutput.detailed.options.push(\"ContentAssessment\");\r\n        }\r\n    }\r\n\r\n    public setDetailedOutputFormat(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n    }\r\n\r\n    public setWordLevelTimings(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n    }\r\n\r\n    public setSpeakerDiarizationAudioOffsetMs(audioOffsetMs: number): void {\r\n        this.privContext.phraseDetection.speakerDiarization.audioOffsetMs = audioOffsetMs;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\" && !Array.isArray(value)) {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n    public synthesis: {\r\n        video: ISynthesisSectionVideo;\r\n    };\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.40.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n\r\nexport interface ICoordinate {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n// For avatar synthesis\r\nexport interface ISynthesisSectionVideo {\r\n    protocol: {\r\n        name: string;\r\n        webrtcConfig: {\r\n            clientDescription: string;\r\n            iceServers: {\r\n                urls: string[];\r\n                username: string;\r\n                credential: string;\r\n            }[];\r\n        };\r\n    };\r\n    format: {\r\n        bitrate: number;\r\n        codec: string;\r\n        crop: {\r\n            topLeft: ICoordinate;\r\n            bottomRight: ICoordinate;\r\n        };\r\n        resolution: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n    };\r\n    talkingAvatar: {\r\n        character: string;\r\n        customized: boolean;\r\n        style: string;\r\n        background: {\r\n            color: string;\r\n        };\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus, this.privExpectContentAssessmentResponse);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioDestination } from \"../common/Exports.js\";\r\nimport {\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\n\r\nexport class SpeechSynthesisAdapter extends SynthesisAdapterBase {\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n            super(authentication, connectionFactory, synthesizerConfig, audioDestination);\r\n            this.privSpeechSynthesizer = speechSynthesizer;\r\n            this.privSynthesizer = speechSynthesizer as Synthesizer;\r\n        }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(this.privSpeechSynthesizer);\r\n    }\r\n\r\n    protected onSynthesisStarted(requestId: string): void {\r\n        const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n            new SpeechSynthesisResult(\r\n                requestId,\r\n                ResultReason.SynthesizingAudioStarted,\r\n            )\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n            this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n        }\r\n    }\r\n\r\n    protected onSynthesizing(audio: ArrayBuffer): void {\r\n        if (!!this.privSpeechSynthesizer.synthesizing) {\r\n            try {\r\n                const audioWithHeader = this.privSynthesisTurn.audioOutputFormat.addHeader(audio);\r\n                const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                    new SpeechSynthesisResult(\r\n                        this.privSynthesisTurn.requestId,\r\n                        ResultReason.SynthesizingAudio,\r\n                        audioWithHeader));\r\n                this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCancelled(result: SpeechSynthesisResult): void {\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCompleted(result: SpeechSynthesisResult): void {\r\n        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n            try {\r\n                this.privSpeechSynthesizer.synthesisCompleted(\r\n                    this.privSpeechSynthesizer,\r\n                    new SpeechSynthesisEventArgs(result)\r\n                );\r\n            } catch (e) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onWordBoundary(wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n            try {\r\n                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onVisemeReceived(visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n            try {\r\n                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onBookmarkReached(bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n            try {\r\n                this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined && endpointId !== \"\") {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomVoiceDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n            }\r\n        }\r\n\r\n        if (config.avatarEnabled) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.EnableAvatar) === -1) {\r\n                queryParams[QueryParameterNames.EnableAvatar] = \"true\";\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport abstract class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSynthesizer: Synthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => void = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected receiveMessageOverride: () => void = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => void = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    protected privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privActivityTemplate: string;\r\n    protected privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext();\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            this.onSynthesisStarted(requestId);\r\n\r\n            void this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e as string);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    public async stopSpeaking(): Promise<void> {\r\n        await this.connectImpl();\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"synthesis.control\",\r\n            this.privSynthesisTurn.requestId,\r\n            \"application/json\",\r\n            JSON.stringify({\r\n                action: \"stop\"\r\n            })\r\n        ));\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        _cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        this.onSynthesisCancelled(result);\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected processTypeSpecificMessages(_connectionMessage: SpeechConnectionMessage): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse(connectionMessage.textBody);\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            this.onSynthesizing(connectionMessage.binaryBody);\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                case MetadataType.SentenceBoundary:\r\n                                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Duration,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset,\r\n                                        metadata.Data.text.BoundaryType);\r\n                                    this.onWordBoundary(wordBoundaryEventArgs);\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n                                    this.onBookmarkReached(bookmarkEventArgs);\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n                                        this.onVisemeReceived(visemeEventArgs);\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.AvatarSignal:\r\n                                    this.onAvatarEvent(metadata);\r\n                                    break;\r\n                                case MetadataType.SessionEnd:\r\n                                    this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            result = await this.privSynthesisTurn.constructSynthesisResult();\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error as string);\r\n                            }\r\n                        }\r\n                        this.onSynthesisCompleted(result);\r\n                        break;\r\n\r\n                    default:\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext(connection: IConnection): Promise<void> {\r\n        this.setSynthesisContextSynthesisSection();\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected abstract setSynthesisContextSynthesisSection(): void;\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(\r\n                    `Unable to contact server. StatusCode: ${response.statusCode},\r\n                    ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Url)} Reason: ${response.reason}`);\r\n            }\r\n        }, (error: string): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig(connection: IConnection, SpeechServiceConfigJson: string): Promise<void> {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage(connection: IConnection, ssml: string, requestId: string): Promise<void> {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        this.setSpeechConfigSynthesisSection();\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n\r\n    protected onAvatarEvent(_metadata: ISynthesisMetadata): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisStarted(_requestId: string): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesizing(_audio: ArrayBuffer): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCancelled(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCompleted(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onWordBoundary(_wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onVisemeReceived(_visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onBookmarkReached(_bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        return;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PropertyId, SpeechSynthesizer } from \"../sdk/Exports.js\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | object): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    public setSynthesisSection(speechSynthesizer: SpeechSynthesizer): void {\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext(speechSynthesizer);\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n    }\r\n\r\n    private buildSynthesisContext(speechSynthesizer: SpeechSynthesizer): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!speechSynthesizer?.bookmarkReached),\r\n                    punctuationBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                    sentenceBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),\r\n                    sessionEndEnabled: true,\r\n                    visemeEnabled: (!!speechSynthesizer?.visemeReceived),\r\n                    wordBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: speechSynthesizer?.autoDetectSourceLanguage\r\n            }\r\n        } as ISynthesisSection;\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string;\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean;\r\n            wordBoundaryEnabled: string;\r\n            punctuationBoundaryEnabled: string;\r\n            visemeEnabled: boolean;\r\n            sentenceBoundaryEnabled: string;\r\n            sessionEndEnabled: boolean;\r\n        };\r\n    };\r\n    language: {\r\n        autoDetection: boolean;\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    public constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n","import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privAuthentication: IAuthentication;\r\n\r\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioDestination\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ISynthesisMetadata, MetadataType } from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents.js\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n    webrtc: {\r\n        connectionString: string;\r\n    };\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    public get currentSentenceOffset(): number {\r\n        return this.privSentenceOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n\r\n    public get extraProperties(): PropertyCollection {\r\n        if (!!this.privWebRTCSDP) {\r\n            const properties = new PropertyCollection();\r\n            properties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, this.privWebRTCSDP);\r\n            return properties;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privSentenceOffset: number = 0;\r\n    private privNextSearchSentenceIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n    private privAudioDuration: number;\r\n    private privWebRTCSDP: string;\r\n\r\n    public constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = this.audioOutputFormat.addHeader(audio);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        this.privWebRTCSDP = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage(responseJson: string): void {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse(): void {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(responseJson: string): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        if (!!response.webrtc) {\r\n            this.privWebRTCSDP = response.webrtc.connectionString;\r\n        }\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTextBoundaryEvent(metadata: ISynthesisMetadata): void {\r\n        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public onSessionEnd(metadata: ISynthesisMetadata): void {\r\n        this.privAudioDuration = metadata.Data.Offset;\r\n    }\r\n\r\n    public async constructSynthesisResult(): Promise<SpeechSynthesisResult> {\r\n        const audioBuffer: ArrayBuffer = await this.getAllReceivedAudioWithHeader();\r\n        return new SpeechSynthesisResult(\r\n            this.requestId,\r\n            ResultReason.SynthesizingAudioCompleted,\r\n            audioBuffer,\r\n            undefined,\r\n            this.extraProperties,\r\n            this.audioDuration\r\n        );\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent(event: SpeechSynthesisEvent): void {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Check if the text is an XML(SSML) tag\r\n     * @param text\r\n     * @private\r\n     */\r\n    private static isXmlTag(text: string): boolean {\r\n        return text.length >= 2 && text[0] === \"<\" && text[text.length - 1] === \">\";\r\n    }\r\n\r\n    private updateTextOffset(text: string, type: MetadataType): void {\r\n        if (type === MetadataType.WordBoundary) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);\r\n            if (this.privSentenceOffset >= 0) {\r\n                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if current idx is in XML(SSML) tag\r\n     * @param idx\r\n     * @private\r\n     */\r\n    private withinXmlTag(idx: number): boolean {\r\n        return this.privRawText.indexOf(\"<\", idx + 1) > this.privRawText.indexOf(\">\", idx + 1);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport {\r\n    Context,\r\n    ISynthesisSectionVideo,\r\n    SpeechServiceConfig\r\n    } from \"./Exports.js\";\r\n\r\nexport enum SynthesisServiceType {\r\n    Standard,\r\n    Custom,\r\n}\r\n\r\nexport class SynthesizerConfig {\r\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privParameters: PropertyCollection;\r\n    public avatarEnabled: boolean = false;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get synthesisServiceType(): SynthesisServiceType {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n\r\n    public set synthesisServiceType(value: SynthesisServiceType) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n\r\n    public set synthesisVideoSection(value: ISynthesisSectionVideo) {\r\n        this.privSpeechServiceConfig.Context.synthesis = {\r\n            video: value\r\n        };\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\r\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n        }\r\n\r\n        if (language && !(QueryParameterNames.Language in queryParams)) {\r\n            queryParams[QueryParameterNames.Language] = language;\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    RestConfigBase\r\n} from \"../../common.browser/RestConfigBase.js\";\r\n\r\nexport class ConversationConnectionConfig extends RestConfigBase {\r\n\r\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\r\n    private static readonly privRestPath: string = \"/capito/room\";\r\n    private static readonly privApiVersion: string = \"2.0\";\r\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\r\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\r\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\r\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferentiateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\r\n\r\n    public static get host(): string {\r\n        return ConversationConnectionConfig.privHost;\r\n    }\r\n\r\n    public static get apiVersion(): string {\r\n        return ConversationConnectionConfig.privApiVersion;\r\n    }\r\n\r\n    public static get clientAppId(): string {\r\n        return ConversationConnectionConfig.privClientAppId;\r\n    }\r\n\r\n    public static get defaultLanguageCode(): string {\r\n        return ConversationConnectionConfig.privDefaultLanguageCode;\r\n    }\r\n\r\n    public static get restPath(): string {\r\n        return ConversationConnectionConfig.privRestPath;\r\n    }\r\n\r\n    public static get webSocketPath(): string {\r\n        return ConversationConnectionConfig.privWebSocketPath;\r\n    }\r\n\r\n    public static get transcriptionEventKeys(): string[] {\r\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports.js\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter.js\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports.js\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json: { type: string } = JSON.parse(this.textBody) as { type: string };\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports.js\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports.js\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationResult,\r\n    ResultReason,\r\n    Translations\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    CognitiveTokenAuthentication,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase\r\n} from \"../Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\nimport { ConversationRequestSession } from \"./ConversationRequestSession.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalParticipant\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer.js\";\r\nimport {\r\n    CommandResponsePayload,\r\n    IParticipantPayloadResponse,\r\n    IParticipantsListPayloadResponse,\r\n    ITranslationResponsePayload,\r\n    ParticipantPayloadResponse,\r\n    ParticipantsListPayloadResponse,\r\n    SpeechResponsePayload,\r\n    TextResponsePayload\r\n} from \"./ServiceMessages/Exports.js\";\r\n\r\n/**\r\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\r\n */\r\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\r\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\r\n    private privConversationConnectionFactory: IConnectionFactory;\r\n    private privConversationAuthFetchEventId: string;\r\n    private privConversationAuthentication: IAuthentication;\r\n    private privConversationRequestSession: ConversationRequestSession;\r\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private privLastPartialUtteranceId: string;\r\n    private privConversationIsDisposed: boolean;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\r\n\r\n        this.privLastPartialUtteranceId = \"\";\r\n        this.privConversationServiceConnector = conversationServiceConnector;\r\n        this.privConversationAuthentication = authentication;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\r\n        this.recognizeOverride = (): Promise<void> => this.noOp();\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\r\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\r\n        this.privConversationConnectionFactory = connectionFactory;\r\n        this.privConversationIsDisposed = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return super.isDisposed() || this.privConversationIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privConversationIsDisposed = true;\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n        await super.dispose(reason);\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new ConversationConnectionMessage(\r\n            MessageType.Text,\r\n            message));\r\n    }\r\n\r\n    public async sendMessageAsync(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\r\n    }\r\n\r\n    protected privDisconnect(): Promise<void> {\r\n        if (this.terminateMessageLoop) {\r\n            return;\r\n        }\r\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\r\n            this.privConversationRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    protected async processTypeSpecificMessages(): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n            cancellationReason,\r\n            error,\r\n            errorCode,\r\n            undefined,\r\n            sessionId);\r\n\r\n        try {\r\n            if (!!this.privConversationServiceConnector.canceled) {\r\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\r\n            }\r\n        } catch {\r\n            // continue on error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Establishes a websocket connection to the end point.\r\n     */\r\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Process incoming websocket messages\r\n     */\r\n    private async receiveConversationMessageOverride(): Promise<void> {\r\n        if (this.isDisposed() || this.terminateMessageLoop) {\r\n            return Promise.resolve();\r\n        }\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\r\n            if (this.isDisposed() || this.terminateMessageLoop) {\r\n                // We're done.\r\n                communicationCustodian.resolve();\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!message) {\r\n                return this.receiveConversationMessageOverride();\r\n            }\r\n\r\n            const sessionId: string = this.privConversationRequestSession.sessionId;\r\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\r\n            let sendFinal: boolean = false;\r\n\r\n            try {\r\n                switch (conversationMessageType) {\r\n                    case \"info\":\r\n                    case \"participant_command\":\r\n                    case \"command\":\r\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\r\n                        switch (commandPayload.command.toLowerCase()) {\r\n\r\n                            /**\r\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\r\n                             * The consuming client must wait for this message to arrive\r\n                             * before starting to send their own data.\r\n                             */\r\n                            case \"participantlist\":\r\n\r\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\r\n                                    const participant: IInternalParticipant = {\r\n                                        avatar: p.avatar,\r\n                                        displayName: p.nickname,\r\n                                        id: p.participantId,\r\n                                        isHost: p.ishost,\r\n                                        isMuted: p.ismuted,\r\n                                        isUsingTts: p.usetts,\r\n                                        preferredLanguage: p.locale\r\n                                    };\r\n                                    return participant;\r\n                                });\r\n\r\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\r\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\r\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\r\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\r\n                                            participantsPayload.muteAll, participantsResult, sessionId));\r\n                                }\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\r\n                             * This is sent at the start of the Conversation\r\n                             */\r\n                            case \"settranslatetolanguages\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\r\n                             * If sent by the participant the setting will effect only their own profanity level.\r\n                             * If sent by the host, the setting will effect all participants including the host.\r\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\r\n                             */\r\n                            case \"setprofanityfiltering\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMute' is sent if the participant has been muted by the host.\r\n                             * Check the 'participantId' to determine if the current user has been muted.\r\n                             */\r\n                            case \"setmute\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setMute,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\r\n                             */\r\n                            case \"setmuteall\":\r\n\r\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\r\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\r\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\r\n                             */\r\n                            case \"roomexpirationwarning\":\r\n\r\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\r\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\r\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\r\n                             */\r\n                            case \"setusetts\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setUseTTS,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\r\n                             */\r\n                            case \"setlockstate\":\r\n\r\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\r\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\r\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'ChangeNickname' is received if a user changes their display name.\r\n                             * Any cached particpiants list should be updated to reflect the display name.\r\n                             */\r\n                            case \"changenickname\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.changeNickname,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'JoinSession' is sent when a user joins the Conversation.\r\n                             */\r\n                            case \"joinsession\":\r\n\r\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const joiningParticipant: IInternalParticipant = {\r\n                                    avatar: joinParticipantPayload.avatar,\r\n                                    displayName: joinParticipantPayload.nickname,\r\n                                    id: joinParticipantPayload.participantId,\r\n                                    isHost: joinParticipantPayload.ishost,\r\n                                    isMuted: joinParticipantPayload.ismuted,\r\n                                    isUsingTts: joinParticipantPayload.usetts,\r\n                                    preferredLanguage: joinParticipantPayload.locale,\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(\r\n                                            joiningParticipant,\r\n                                            sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\r\n                             */\r\n                            case \"leavesession\":\r\n\r\n                                const leavingParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\r\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\r\n                             */\r\n                            case \"disconnectsession\":\r\n\r\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                                const disconnectParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                break;\r\n\r\n                            case \"token\":\r\n                                const token = new CognitiveTokenAuthentication(\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    },\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    });\r\n                                this.authentication = token;\r\n                                this.privConversationServiceConnector.onToken(token);\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * Message not recognized.\r\n                             */\r\n                            default:\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    /**\r\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\r\n                     */\r\n                    case \"partial\":\r\n\r\n                    /**\r\n                     * 'final' (or 'phrase') represents a finalized speech message.\r\n                     */\r\n                    case \"final\":\r\n\r\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\r\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\r\n\r\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\r\n                            this.getTranslations(speechPayload.translations),\r\n                            speechPayload.language,\r\n                            speechPayload.id,\r\n                            conversationResultReason,\r\n                            speechPayload.recognition,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (speechPayload.isFinal) {\r\n                            // check the length, sometimes empty finals are returned\r\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\r\n                                sendFinal = true;\r\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\r\n                                // send final as normal. We had a non-empty partial for this same utterance\r\n                                // so sending the empty final is important\r\n                                sendFinal = true;\r\n                            } else {\r\n                                // suppress unneeded final\r\n                            }\r\n\r\n                            if (sendFinal) {\r\n                                if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\r\n                                }\r\n                            }\r\n                        } else if (speechResult.text !== undefined) {\r\n                            this.privLastPartialUtteranceId = speechPayload.id;\r\n                            if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n\r\n                    /**\r\n                     * \"translated_message\" is a text message or instant message (IM).\r\n                     */\r\n                    case \"translated_message\":\r\n\r\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\r\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\r\n\r\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\r\n                            this.getTranslations(textPayload.translations),\r\n                            textPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            textPayload.originalText,\r\n                            undefined,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (!!this.privConversationServiceConnector.translationReceived) {\r\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore any unsupported message types\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                // continue\r\n            }\r\n            return this.receiveConversationMessageOverride();\r\n        } catch (e) {\r\n            this.terminateMessageLoop = true;\r\n        }\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\r\n\r\n        try {\r\n            const r = await messageRetrievalPromise;\r\n            return r;\r\n        } catch (error) {\r\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigPromise = undefined;\r\n                    return this.configConnection();\r\n                }\r\n                return this.privConnectionConfigPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigPromise = undefined;\r\n                return this.configConnection();\r\n            });\r\n        }\r\n        if (this.terminateMessageLoop) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResultTranslations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResultTranslations) {\r\n                translations.set(translation.lang, translation.translation);\r\n            }\r\n        }\r\n\r\n        return translations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports.js\";\r\nimport { StringUtils } from \"../../common/StringUtils.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation.js\";\r\nimport { HeaderNames } from \"../HeaderNames.js\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports.js\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { ConversationTranslationResult, SessionEventArgs } from \"../../sdk/Exports.js\";\r\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class MuteAllEventArgs extends SessionEventArgs {\r\n    private privIsMuted: boolean;\r\n\r\n    public constructor(isMuted: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsMuted = isMuted;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n}\r\n\r\nexport class LockRoomEventArgs extends SessionEventArgs {\r\n    private privIsLocked: boolean;\r\n\r\n    public constructor(isLocked: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsLocked = isLocked;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsLocked;\r\n    }\r\n}\r\n\r\nexport class ParticipantEventArgs extends SessionEventArgs {\r\n    private privParticipant: IInternalParticipant;\r\n\r\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privParticipant = participant;\r\n    }\r\n\r\n    public get participant(): IInternalParticipant {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n\r\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\r\n    private privValue: boolean | number | string | string[];\r\n    private privKey: string;\r\n    private privParticipantId: string;\r\n\r\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privKey = key;\r\n        this.privValue = value;\r\n        this.privParticipantId = participantId;\r\n    }\r\n\r\n    public get value(): boolean | number | string |  string[] {\r\n        return this.privValue;\r\n    }\r\n\r\n    public get key(): string {\r\n        return this.privKey;\r\n    }\r\n    public get id(): string {\r\n        return this.privParticipantId;\r\n    }\r\n}\r\n\r\nexport class ParticipantsListEventArgs extends SessionEventArgs {\r\n\r\n    private privRoomId: string;\r\n    private privSessionToken: string;\r\n    private privTranslateTo: string[];\r\n    private privProfanityFilter: string;\r\n    private privRoomProfanityFilter: string;\r\n    private privIsRoomLocked: boolean;\r\n    private privIsMuteAll: boolean;\r\n    private privParticipants: IInternalParticipant[];\r\n\r\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\r\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privRoomId = conversationId;\r\n        this.privSessionToken = token;\r\n        this.privTranslateTo = translateTo;\r\n        this.privProfanityFilter = profanityFilter;\r\n        this.privRoomProfanityFilter = roomProfanityFilter;\r\n        this.privIsRoomLocked = isRoomLocked;\r\n        this.privIsRoomLocked = isMuteAll;\r\n        this.privParticipants = participants;\r\n    }\r\n    public get sessionToken(): string {\r\n        return this.privSessionToken;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privRoomId;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privTranslateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privProfanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privRoomProfanityFilter;\r\n    }\r\n\r\n    public get isRoomLocked(): boolean {\r\n        return this.privIsRoomLocked;\r\n    }\r\n\r\n    public get isMuteAll(): boolean {\r\n        return this.privIsMuteAll;\r\n    }\r\n\r\n    public get participants(): IInternalParticipant[] {\r\n        return this.privParticipants;\r\n    }\r\n}\r\n\r\nexport class ConversationReceivedTranslationEventArgs {\r\n    private privPayload: ConversationTranslationResult;\r\n    private privCommand: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(command: string, payload: ConversationTranslationResult,  sessionId?: string) {\r\n        this.privPayload = payload;\r\n        this.privCommand = command;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get payload(): ConversationTranslationResult {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privCommand;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    } from \"../../sdk/Exports.js\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n    // set programmatically\r\n    isHost: boolean;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    profanity?: boolean;\r\n    preferredLanguage?: string;\r\n    translateToLanguages?: string[];\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\r\n    }\r\n\r\n    /**\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout,\r\n} from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig.js\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation.js\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation.js\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory.js\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        const webWorkerLoadType: string = this.privProperties.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n            this.privClearTimeout = Timeout.clearTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privClearTimeout = window.clearTimeout.bind(window);\r\n            } else {\r\n                this.privSetTimeout = setTimeout;\r\n                this.privClearTimeout = clearTimeout;\r\n            }\r\n        }\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle update of service auth token (#694)\r\n     */\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversation.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n            }\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        const PromiseToEmptyCallback = <T>(promise: Promise<T>, cb?: Callback, err?: Callback): void => {\r\n            if (promise !== undefined) {\r\n                promise.then((): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e as string}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any): void => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        // eslint-disable-next-line no-empty\r\n                    } catch (error) { }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        };\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { ConversationManager } from \"./ConversationManager.js\";\r\nexport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nexport { ConversationRecognizerFactory } from \"./ConversationTranslatorRecognizer.js\";\r\nexport { TranscriberRecognizer } from \"./TranscriberRecognizer.js\";\r\nexport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\nexport {\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants} from \"./ConversationTranslatorInterfaces.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nconst parseCommandResponse = (json: string): ICommandResponsePayload => JSON.parse(json) as ICommandResponsePayload;\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = parseCommandResponse(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n}\r\n","export { CommandResponsePayload } from \"./CommandResponsePayload.js\";\r\nexport { IParticipantsListPayloadResponse, IParticipantPayloadResponse, ParticipantsListPayloadResponse, ParticipantPayloadResponse } from \"./ParticipantResponsePayload.js\";\r\nexport { ITranslationResponsePayload, SpeechResponsePayload, TextResponsePayload } from \"./TranslationResponsePayload.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming list of participants\r\n */\r\nexport interface IParticipantsListPayloadResponse {\r\n    roomid: string;\r\n    id: string;\r\n    command: string;\r\n    participants: IParticipantPayloadResponse[];\r\n    token: string;\r\n    translateTo: string[];\r\n    profanityFilter: string;\r\n    roomProfanityFilter: string;\r\n    roomLocked: boolean;\r\n    muteAll: boolean;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Defines the payload for incoming participant\r\n */\r\nexport interface IParticipantPayloadResponse {\r\n    nickname: string;\r\n    locale: string;\r\n    usetts: boolean;\r\n    ismuted: boolean;\r\n    ishost: boolean;\r\n    participantId: string;\r\n    avatar?: string;\r\n}\r\n\r\nconst parseListResponse = (json: string): IParticipantsListPayloadResponse => JSON.parse(json) as IParticipantsListPayloadResponse;\r\nconst parseParticipantResponse = (json: string): IParticipantPayloadResponse => JSON.parse(json) as IParticipantPayloadResponse;\r\n\r\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\r\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantsPayloadResponse = parseListResponse(json);\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privParticipantsPayloadResponse.roomid;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privParticipantsPayloadResponse.id;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privParticipantsPayloadResponse.command;\r\n    }\r\n\r\n    public get participants(): IParticipantPayloadResponse[] {\r\n        return this.privParticipantsPayloadResponse.participants;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privParticipantsPayloadResponse.token;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privParticipantsPayloadResponse.translateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.profanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\r\n    }\r\n\r\n    public get roomLocked(): boolean {\r\n        return this.privParticipantsPayloadResponse.roomLocked;\r\n    }\r\n\r\n    public get muteAll(): boolean {\r\n        return this.privParticipantsPayloadResponse.muteAll;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privParticipantsPayloadResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\r\n        return new ParticipantsListPayloadResponse(json);\r\n    }\r\n\r\n}\r\n\r\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\r\n\r\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantPayloadResponse = parseParticipantResponse(json);\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privParticipantPayloadResponse.nickname;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privParticipantPayloadResponse.locale;\r\n    }\r\n\r\n    public get usetts(): boolean {\r\n        return this.privParticipantPayloadResponse.usetts;\r\n    }\r\n\r\n    public get ismuted(): boolean {\r\n        return this.privParticipantPayloadResponse.ismuted;\r\n    }\r\n\r\n    public get ishost(): boolean {\r\n        return this.privParticipantPayloadResponse.ishost;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privParticipantPayloadResponse.participantId;\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privParticipantPayloadResponse.avatar;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantPayloadResponse {\r\n        return new ParticipantPayloadResponse(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming translation messages\r\n */\r\nexport interface ITranslationResponsePayload {\r\n    lang: string;\r\n    translation: string;\r\n}\r\n\r\nexport interface ITranslationCommandMessage {\r\n    translations: ITranslationResponsePayload[];\r\n    id: string;\r\n    language: string;\r\n    nickname: string;\r\n    participantId: string;\r\n    roomid: string;\r\n    timestamp: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\r\n    recognition: string;\r\n    isFinal: boolean;\r\n}\r\n\r\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\r\n    originalText: string;\r\n}\r\n\r\nconst parseSpeechResponse = (json: string): ISpeechResponsePayload => JSON.parse(json) as ISpeechResponsePayload;\r\nconst parseTextResponse = (json: string): ITextResponsePayload => JSON.parse(json) as ITextResponsePayload;\r\n\r\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\r\n\r\n    private privSpeechResponse: ISpeechResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechResponse = parseSpeechResponse(json);\r\n    }\r\n\r\n    public get recognition(): string {\r\n        return this.privSpeechResponse.recognition;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privSpeechResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privSpeechResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privSpeechResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privSpeechResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privSpeechResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privSpeechResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privSpeechResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privSpeechResponse.type;\r\n    }\r\n\r\n    public get isFinal(): boolean {\r\n        return this.privSpeechResponse.type === \"final\";\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechResponsePayload {\r\n        return new SpeechResponsePayload(json);\r\n    }\r\n\r\n}\r\n\r\nexport class TextResponsePayload implements ITextResponsePayload {\r\n\r\n    private privTextResponse: ITextResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privTextResponse = parseTextResponse(json);\r\n    }\r\n\r\n    public get originalText(): string {\r\n        return this.privTextResponse.originalText;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privTextResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privTextResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privTextResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privTextResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privTextResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privTextResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privTextResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privTextResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): TextResponsePayload {\r\n        return new TextResponsePayload(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports.js\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n    private privMeeting: Meeting;\r\n    private isMeetingRecognizer: boolean;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n        this.isMeetingRecognizer = false;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.isMeetingRecognizer = false;\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public set meeting(m: Meeting) {\r\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\r\n        this.isMeetingRecognizer = true;\r\n        this.privMeeting = m;\r\n    }\r\n\r\n    public getMeetingInfo(): MeetingInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\r\n        return this.privMeeting.meetingInfo;\r\n    }\r\n\r\n    public IsMeetingRecognizer(): boolean {\r\n        return this.isMeetingRecognizer;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    // Push async join/leave meeting message via serviceRecognizer\r\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\r\n    }\r\n\r\n    public async enforceAudioGating(): Promise<void> {\r\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\r\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\r\n        const channels = format.channels;\r\n        if (channels === 1) {\r\n            if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\r\n                throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\r\n            }\r\n        } else if (channels !== 8) {\r\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\r\n        this.isMeetingRecognizer = true;\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    MeetingTranscriptionCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConversationInfo, MeetingInfo } from \"../sdk/Transcription/Exports.js\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation.js\";\r\nimport { MeetingProperties } from \"../sdk/Transcription/IMeeting.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    TranscriberRecognizer\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    public async sendMeetingSpeechEventAsync(info: MeetingInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        return this.processSpeechMessages(connectionMessage);\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, offset, sessionId);\r\n            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n            if (!!this.privSuccessCallback) {\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                } catch (e) {\r\n                    if (!!this.privErrorCallback) {\r\n                        this.privErrorCallback(e as string);\r\n                    }\r\n                }\r\n                // Only invoke the call back once.\r\n                // and if it's successful don't invoke the\r\n                // error after that.\r\n                this.privSuccessCallback = undefined;\r\n                this.privErrorCallback = undefined;\r\n            }\r\n        /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\r\n            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: MeetingTranscriptionCanceledEventArgs = new MeetingTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        } else {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            const info: MeetingInfo = this.privTranscriberRecognizer.getMeetingInfo();\r\n            const payload: { [id: string]: any } = this.createMeetingSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        } else {\r\n            const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n            const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        }\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n    private createMeetingSpeechEventPayload(info: MeetingInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: MeetingProperties } = { id: \"meeting\", name: command, meeting: info.meetingProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports.js\";\r\nimport { StringUtils } from \"../common/StringUtils.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            if (config.autoDetectSourceLanguages !== undefined) {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/universal/v2\";\r\n            } else {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n            }\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n        queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" :\r\n            config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    EnumTranslation,\r\n    ITranslationHypothesis,\r\n    RecognitionStatus,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ConversationServiceRecognizer {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = await this.processSpeechMessages(connectionMessage);\r\n        if (processed) {\r\n            return true;\r\n        }\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    translatedPhrase.Language,\r\n                    translatedPhrase.Confidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        const handleTranslationHypothesis = (hypothesis: TranslationHypothesis, resultProperties: PropertyCollection): void => {\r\n            const result: TranslationRecognitionEventArgs = this.fireEventForResult(hypothesis, resultProperties);\r\n            this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n            if (!!this.privTranslationRecognizer.recognizing) {\r\n                try {\r\n                    this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                    /* eslint-disable no-empty */\r\n                } catch (error) {\r\n                    // Not going to let errors in the event handler\r\n                    // trip things up.\r\n                }\r\n            }\r\n            processed = true;\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n                handleTranslationHypothesis(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                } else {\r\n                    const hypothesis: { SpeechHypothesis: ITranslationHypothesis } = JSON.parse(connectionMessage.textBody) as { SpeechHypothesis: ITranslationHypothesis };\r\n                    if (!!hypothesis.SpeechHypothesis) {\r\n                        handleTranslationHypothesis(TranslationHypothesis.fromTranslationResponse(hypothesis), resultProps);\r\n                    }\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"audio.end\":\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), duration, sessionId);\r\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\r\n            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        let confidence: string;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n            confidence = serviceResult.Confidence;\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n        const language = serviceResult.Language;\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            language,\r\n            confidence,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage> {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders(message: ConnectionMessage): string {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders(headersString: string): IStringDictionary<string> {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer(str: string): ArrayBuffer {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports.js\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    public constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports.js\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    public constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    public constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    public constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    public constructor(connectionId: string) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    public constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    public constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Deferred } from \"./Promise.js\";\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class DefferalMap\r\n */\r\n\r\nexport class DeferralMap {\r\n    private privMap: { [id: string]: Deferred<any> } = {};\r\n\r\n    public add<T>(id: string, deferral: Deferred<T>): void {\r\n        this.privMap[id] = deferral;\r\n    }\r\n\r\n    public getId(id: string): Deferred<any> {\r\n        return this.privMap[id];\r\n    }\r\n\r\n    public complete<T>(id: string, result: T): void {\r\n        try {\r\n            this.privMap[id].resolve(result);\r\n        } catch (error) {\r\n            this.privMap[id].reject(error as string);\r\n        } finally {\r\n            this.privMap[id] = undefined;\r\n         }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { AgentConfig } from \"../common.speech/Exports.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class DialogEvent extends PlatformEvent {\r\n\r\n    public constructor(eventName: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n    }\r\n}\r\n\r\nexport class SendingAgentContextMessageEvent extends DialogEvent {\r\n    private privAgentConfig: AgentConfig;\r\n\r\n    public constructor(agentConfig: AgentConfig) {\r\n        super(\"SendingAgentContextMessageEvent\");\r\n        this.privAgentConfig = agentConfig;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IEventListener } from \"./IEventListener.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./AudioSourceEvents.js\";\r\nexport * from \"./ConnectionEvents.js\";\r\nexport * from \"./ConnectionMessage.js\";\r\nexport * from \"./ConnectionOpenResponse.js\";\r\nexport * from \"./DeferralMap.js\";\r\nexport * from \"./DialogEvents.js\";\r\nexport * from \"./Error.js\";\r\nexport * from \"./Events.js\";\r\nexport * from \"./EventSource.js\";\r\nexport * from \"./Guid.js\";\r\nexport * from \"./IAudioSource.js\";\r\nexport * from \"./IConnection.js\";\r\nexport * from \"./IDetachable.js\";\r\nexport * from \"./IDictionary.js\";\r\nexport * from \"./IDisposable.js\";\r\nexport * from \"./IEventListener.js\";\r\nexport * from \"./IEventSource.js\";\r\nexport * from \"./IErrorMessages.js\";\r\nexport * from \"./ITimer.js\";\r\nexport * from \"./IWebsocketMessageFormatter.js\";\r\nexport * from \"./List.js\";\r\nexport * from \"./PlatformEvent.js\";\r\nexport * from \"./Promise.js\";\r\nexport * from \"./Queue.js\";\r\nexport * from \"./RawWebsocketMessage.js\";\r\nexport * from \"./RiffPcmEncoder.js\";\r\nexport * from \"./Stream.js\";\r\nexport { TranslationStatus } from \"../common.speech/TranslationStatus.js\";\r\nexport * from \"./ChunkedArrayBufferStream.js\";\r\nexport * from \"./IAudioDestination.js\";\r\nexport * from \"./Timeout.js\";\r\nexport * from \"./OCSPEvents.js\";\r\nexport * from \"./BackgroundError.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => uuid();\r\n\r\nconst createNoDashGuid: () => string = (): string => createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n\r\nexport { createGuid, createNoDashGuid };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents.js\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class OCSPEvent extends PlatformEvent {\r\n    private privSignature: string;\r\n\r\n    public constructor(eventName: string, eventType: EventType, signature: string) {\r\n        super(eventName, eventType);\r\n\r\n        this.privSignature = signature;\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateCompleteEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    public constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\n\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n\r\n    public constructor(serialNumber: string, expireTime: number) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n    private privExpireTimeString: string;\r\n    private privStartTimeString: string;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\n\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n    None,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    public constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\nimport { List } from \"./List.js\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise.js\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType; deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType; deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded((): void => this.drain()));\r\n    }\r\n\r\n    public enqueue(item: TItem): void {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void): void => resolve(item)));\r\n    }\r\n\r\n    public enqueueFromPromise(promise: Promise<TItem>): void {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }, (): void => { });\r\n    }\r\n\r\n    public dequeue(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>): void => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally((): void => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain(): void {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose(): void {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage.js\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (messageType === MessageType.Binary && Object.getPrototypeOf(payload).constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload as ArrayBuffer;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode(actualAudioFrame: Float32Array): ArrayBuffer {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM(view: DataView, offset: number, input: Float32Array): void {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame(\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { Queue } from \"./Queue.js\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read(): Promise<IStreamChunk<TBuffer>> {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>): Promise<IStreamChunk<TBuffer>> => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded(): void {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed(): void {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\n/**\r\n * String helper functions\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.\r\n     * @param format The format string that contains the parts to replace surrounded by {}. For example: \"wss://{region}.cts.speech.microsoft.com\".\r\n     * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.\r\n     * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string\r\n     * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned\r\n     */\r\n    public static formatString(format: string, replacements: IStringDictionary<string>): string {\r\n        if (!format) {\r\n            return \"\";\r\n        }\r\n\r\n        if (!replacements) {\r\n            return format;\r\n        }\r\n\r\n        let formatted: string = \"\";\r\n        let key: string = \"\";\r\n\r\n        const appendToFormatted = (str: string): void => {\r\n            formatted += str;\r\n        };\r\n        const appendToKey = (str: string): void => {\r\n            key += str;\r\n        };\r\n        let appendFunc: (str: string) => void = appendToFormatted;\r\n\r\n        for (let i = 0; i < format.length; i++) {\r\n            const c: string = format[i];\r\n            const next: string = i + 1 < format.length ? format[i + 1] : \"\";\r\n\r\n            switch (c) {\r\n                case \"{\":\r\n                    if (next === \"{\") {\r\n                        appendFunc(\"{\");\r\n                        i++;\r\n                    } else {\r\n                        appendFunc = appendToKey;\r\n                    }\r\n                    break;\r\n\r\n                case \"}\":\r\n                    if (next === \"}\") {\r\n                        appendFunc(\"}\");\r\n                        i++;\r\n                    } else {\r\n                        if (replacements.hasOwnProperty(key)) {\r\n                            formatted += replacements[key];\r\n                        }\r\n\r\n                        appendFunc = appendToFormatted;\r\n                        key = \"\";\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    appendFunc(c);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return formatted;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId: number): void => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func: () => any, delay: number): number => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load(): any {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, (): void => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        // eslint-disable-next-line\r\n        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;\r\n        const workerUrl = \"data:text/javascript;base64,\" + btoa(workerScript);\r\n        const worker = new Worker(workerUrl);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent): void => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number): void => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number): number => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers(): () => IWorkerTimers {\r\n        return (): IWorkerTimers => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            Timeout.workerTimers = Timeout.load() as IWorkerTimers;\r\n\r\n            return Timeout.workerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification(message: TWorkerMessage): message is ICallNotification {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse(message: TWorkerMessage): message is IClearResponse {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream.js\";\r\n\r\ninterface IActivity {\r\n    conversation?: any;\r\n    id?: string;\r\n    replyToId?: string;\r\n    type?: string;\r\n    text?: string;\r\n    speak?: any;\r\n}\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class ActivityReceivedEventArgs\r\n */\r\nexport class ActivityReceivedEventArgs {\r\n    private privActivity: IActivity;\r\n    private privAudioStream: PullAudioOutputStream;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {any} activity - The activity..\r\n     */\r\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\r\n        this.privActivity = activity as IActivity;\r\n        this.privAudioStream = audioStream;\r\n    }\r\n\r\n    /**\r\n     * Gets the received activity\r\n     * @member ActivityReceivedEventArgs.prototype.activity\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received activity.\r\n     */\r\n    public get activity(): any {\r\n        return this.privActivity;\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStream {\r\n        return this.privAudioStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports.js\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports.js\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter.js\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream.js\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then((): void => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string): void => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", (): void => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { createNoDashGuid } from \"../../common/Guid.js\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports.js\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat.js\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.AmrWb16000Hz]: \"amr-wb-16000hz\",\r\n        [SpeechSynthesisOutputFormat.G72216Khz64Kbps]: \"g722-16khz-64kbps\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-22050hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-44100hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"amr-wb-16000h\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.AMR_WB,\r\n                    1,\r\n                    16000,\r\n                    3052,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"g722-16khz-64kbps\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.G722,\r\n                    1,\r\n                    16000,\r\n                    8000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n    /**\r\n     * Adds audio header\r\n     * @param audio the raw audio without header\r\n     * @returns the audio with header if applicable\r\n     */\r\n\r\n    public addHeader(audio: ArrayBuffer): ArrayBuffer {\r\n        if (!this.hasHeader) {\r\n            return audio;\r\n        }\r\n        this.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + this.header.byteLength);\r\n        tmp.set(new Uint8Array(this.header), 0);\r\n        tmp.set(new Uint8Array(audio), this.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n    AMR_WB,\r\n    G722,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        try {\r\n            this.ensureInitializedContext();\r\n            const audioData = this.formatAudioData(newAudioData);\r\n            const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n            newSamplesData.set(this.samples, 0);\r\n            newSamplesData.set(audioData, this.samples.length);\r\n            this.samples = newSamplesData;\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval((): void => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports.js\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat.js\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n    [AudioFormatTag.AMR_WB]: \"audio/amr-wb\",\r\n    [AudioFormatTag.G722]: \"audio/G722\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((): void => {\r\n                    receivedAudio = this.privFormat.addHeader(receivedAudio);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then((): void => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof ((window as any).webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (): void => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (): void => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (): void => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio?.volume ?? -1;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n\r\n    public mute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n\r\n    public unmute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"Continuous\");\r\n        } else { // LanguageIdMode.AtStart\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    SpeechRecognitionResult,\r\n    ConversationTranscriptionResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class AutoDetectSourceLanguageResult\r\n */\r\nexport class AutoDetectSourceLanguageResult {\r\n\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n\r\n    private constructor(language: string, languageDetectionConfidence: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult} result - The recognition result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\r\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a ConversationTranscriptionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromConversationTranscriptionResult\r\n     * @function\r\n     * @public\r\n     * @param {ConversationTranscriptionResult} result - The transcription result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n        public static fromConversationTranscriptionResult(result: ConversationTranscriptionResult): AutoDetectSourceLanguageResult {\r\n            return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n        }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { AvatarVideoFormat } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the talking avatar configuration.\r\n * @class AvatarConfig\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarConfig {\r\n    private privCustomized: boolean = false;\r\n    private privBackgroundColor: string;\r\n    private privBackgroundImage: URL;\r\n    private privRemoteIceServers: RTCIceServer[];\r\n\r\n    /**\r\n     * Defines the avatar character.\r\n     */\r\n    public character: string;\r\n    /**\r\n     * Defines the avatar style.\r\n     */\r\n    public style: string;\r\n    /**\r\n     * Defines the talking avatar output video format.\r\n     */\r\n    public videoFormat: AvatarVideoFormat;\r\n\r\n    /**\r\n     * Indicates if the talking avatar is customized.\r\n     */\r\n    public get customized(): boolean {\r\n        return this.privCustomized;\r\n    }\r\n\r\n    /**\r\n     * Sets if the talking avatar is customized.\r\n     */\r\n    public set customized(value: boolean) {\r\n        this.privCustomized = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the background color.\r\n     */\r\n    public get backgroundColor(): string {\r\n        return this.privBackgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the background color.\r\n     */\r\n    public set backgroundColor(value: string) {\r\n        this.privBackgroundColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the background image.\r\n     */\r\n    public get backgroundImage(): URL {\r\n        return this.privBackgroundImage;\r\n    }\r\n\r\n    /**\r\n     * Sets the background image.\r\n     * @param {URL} value - The background image.\r\n     */\r\n    public set backgroundImage(value: URL) {\r\n        this.privBackgroundImage = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the remote ICE servers.\r\n     * @remarks This method is designed to be used internally in the SDK.\r\n     * @returns {RTCIceServer[]} The remote ICE servers.\r\n     */\r\n    public get remoteIceServers(): RTCIceServer[] {\r\n        return this.privRemoteIceServers;\r\n    }\r\n\r\n    /**\r\n     * Sets the remote ICE servers.\r\n     * @remarks Normally, the ICE servers are gathered from the PeerConnection,\r\n     * set this property to override the ICE servers. E.g., the ICE servers are\r\n     * different in client and server side.\r\n     * @param {RTCIceServer[]} value - The remote ICE servers.\r\n     */\r\n    public set remoteIceServers(value: RTCIceServer[]) {\r\n        this.privRemoteIceServers = value;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} character - The avatar character.\r\n     * @param {string} style - The avatar style.\r\n     * @param {AvatarVideoFormat} videoFormat - The talking avatar output video format.\r\n     */\r\n    public constructor(character: string, style: string, videoFormat: AvatarVideoFormat) {\r\n        Contracts.throwIfNullOrWhitespace(character, \"character\");\r\n        this.character = character;\r\n        this.style = style;\r\n        if (videoFormat === undefined) {\r\n            videoFormat = new AvatarVideoFormat();\r\n        }\r\n        this.videoFormat = videoFormat;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AvatarEventTypes {\r\n    SwitchedToSpeaking = \"SwitchedToSpeaking\",\r\n    SwitchedToIdle = \"SwitchedToIdle\",\r\n    SessionClosed = \"SessionClosed\",\r\n}\r\n\r\n/**\r\n * Defines content for talking avatar events.\r\n * @class AvatarEventArgs\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarEventArgs {\r\n    private privType: AvatarEventTypes;\r\n    private privOffset: number;\r\n    private privDescription: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} description - The description of the event.\r\n     */\r\n    public constructor(audioOffset: number, description: string) {\r\n        this.privOffset = audioOffset;\r\n        this.privDescription = description;\r\n    }\r\n\r\n    /**\r\n     * The type of the event.\r\n     * @public\r\n     * @returns {AvatarEventTypes} The type of the event.\r\n     */\r\n    public get type(): AvatarEventTypes {\r\n        return this.privType;\r\n    }\r\n\r\n    /**\r\n     * The time offset associated with this event.\r\n     * @public\r\n     * @returns {number} The time offset associated with this event.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * The description of the event.\r\n     * @public\r\n     * @returns {string} The description of the event.\r\n     */\r\n    public get description(): string {\r\n        return this.privDescription;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisConnectionFactory } from \"../common.speech/SpeechSynthesisConnectionFactory.js\";\r\nimport { SynthesisRestAdapter } from \"../common.speech/SynthesisRestAdapter.js\";\r\nimport { SynthesizerConfig } from \"../common.speech/SynthesizerConfig.js\";\r\nimport {\r\n    AvatarSynthesisAdapter,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase\r\n} from \"../common.speech/Exports.js\";\r\nimport { createNoDashGuid, Deferred, Events, EventType, PlatformEvent } from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SynthesisResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the avatar synthesizer.\r\n * @class AvatarSynthesizer\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarSynthesizer extends Synthesizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAvatarConfig: AvatarConfig;\r\n    private privIceServers: RTCIceServer[];\r\n    /**\r\n     * Defines event handler for avatar events.\r\n     * @member AvatarSynthesizer.prototype.avatarEventReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public avatarEventReceived: (sender: AvatarSynthesizer, event: AvatarEventArgs) => void;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config.\r\n     * @param {AvatarConfig} avatarConfig - The talking avatar config.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, avatarConfig: AvatarConfig) {\r\n        super(speechConfig);\r\n\r\n        Contracts.throwIfNullOrUndefined(avatarConfig, \"avatarConfig\");\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.privAvatarConfig = avatarConfig;\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        // The service checks the audio format setting while it ignores it in avatar synthesis.\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Starts the talking avatar session and establishes the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.startAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @param {AvatarWebRTCConnectionInfo} peerConnection - The peer connection.\r\n     * @returns {Promise<SynthesisResult>} The promise of the connection result.\r\n     */\r\n    public async startAvatarAsync(peerConnection: RTCPeerConnection): Promise<SynthesisResult> {\r\n        Contracts.throwIfNullOrUndefined(peerConnection, \"peerConnection\");\r\n        this.privIceServers = peerConnection.getConfiguration().iceServers;\r\n        Contracts.throwIfNullOrUndefined(this.privIceServers, \"Ice servers must be set.\");\r\n        const iceGatheringDone = new Deferred<void>();\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\r\n        peerConnection.onicegatheringstatechange = (): void => {\r\n            Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering state: \" + peerConnection.iceGatheringState, EventType.Debug));\r\n            if (peerConnection.iceGatheringState === \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering complete.\", EventType.Info));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        peerConnection.onicecandidate = (event: RTCPeerConnectionIceEvent): void => {\r\n            if (event.candidate) {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: \" + event.candidate.candidate, EventType.Debug));\r\n            } else {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: complete\", EventType.Debug));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        // Set a timeout for ice gathering, currently 2 seconds.\r\n        setTimeout((): void => {\r\n            if (peerConnection.iceGatheringState !== \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering timeout.\", EventType.Warning));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        }, 2000);\r\n        const sdp: RTCSessionDescriptionInit = await peerConnection.createOffer();\r\n        await peerConnection.setLocalDescription(sdp);\r\n        await iceGatheringDone.promise;\r\n        Events.instance.onEvent(new PlatformEvent(\"peer connection: got local SDP.\", EventType.Info));\r\n        this.privProperties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, JSON.stringify(peerConnection.localDescription));\r\n\r\n        const result: SpeechSynthesisResult = await this.speak(\"\", false);\r\n        if (result.reason !== ResultReason.SynthesizingAudioCompleted) {\r\n            return new SynthesisResult(\r\n                result.resultId,\r\n                result.reason,\r\n                result.errorDetails,\r\n                result.properties,\r\n            );\r\n        }\r\n        const sdpAnswerString: string = atob(result.properties.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP));\r\n        const sdpAnswer: RTCSessionDescription = new RTCSessionDescription(\r\n            JSON.parse(sdpAnswerString) as RTCSessionDescriptionInit,\r\n        );\r\n        await peerConnection.setRemoteDescription(sdpAnswer);\r\n        return new SynthesisResult(\r\n            result.resultId,\r\n            result.reason,\r\n            undefined,\r\n            result.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks plain text asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} text - The plain text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakTextAsync(text: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(text, false);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks SSML asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} ssml - The SSML text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakSsmlAsync(ssml: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(ssml, true);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks text asynchronously. The avatar will switch to idle state.\r\n     * @member AvatarSynthesizer.prototype.stopSpeakingAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopSpeakingAsync(): Promise<void> {\r\n        while (this.synthesisRequestQueue.length() > 0) {\r\n            const request = await this.synthesisRequestQueue.dequeue();\r\n            request.err(\"Synthesis is canceled by user.\");\r\n        }\r\n        return this.privAdapter.stopSpeaking();\r\n    }\r\n\r\n    /**\r\n     * Stops the talking avatar session and closes the WebRTC connection.\r\n     * For now, this is the same as close().\r\n     * You need to create a new AvatarSynthesizer instance to start a new session.\r\n     * @member AvatarSynthesizer.prototype.stopAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopAvatarAsync(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member AvatarSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the ICE servers. Internal use only.\r\n     */\r\n    public get iceServers(): RTCIceServer[] {\r\n        return this.privIceServers;\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new AvatarSynthesisAdapter(\r\n            authentication,\r\n            connectionFactory,\r\n            synthesizerConfig,\r\n            this,\r\n            this.privAvatarConfig);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        _authentication: IAuthentication,\r\n        _synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return undefined;\r\n    }\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        const config = super.createSynthesizerConfig(speechConfig);\r\n        config.avatarEnabled = true;\r\n        return config;\r\n    }\r\n\r\n    protected async speak(text: string, isSSML: boolean): Promise<SpeechSynthesisResult> {\r\n        const requestId = createNoDashGuid();\r\n        const deferredResult = new Deferred<SpeechSynthesisResult>();\r\n        this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, isSSML,\r\n            (e: SpeechSynthesisResult): void => {\r\n                deferredResult.resolve(e);\r\n                this.privSynthesizing = false;\r\n                void this.adapterSpeak();\r\n            },\r\n            (e: string): void => {\r\n                deferredResult.reject(e);\r\n                this.privSynthesizing = false;\r\n            }));\r\n        void this.adapterSpeak();\r\n        return deferredResult.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * Defines a coordinate in 2D space.\r\n * @class Coordinate\r\n * Added in version 1.33.0\r\n */\r\nexport class Coordinate {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the avatar output video format.\r\n * @class AvatarVideoFormat\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarVideoFormat {\r\n    /**\r\n     * Defines the video codec.\r\n     * @default \"H264\"\r\n     */\r\n    public codec: string;\r\n    /**\r\n     * Defines the video bitrate.\r\n     * @default 2000000\r\n     */\r\n    public bitrate: number;\r\n    /**\r\n     * Defines the video width.\r\n     * @default 1920\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Defines the video height.\r\n     * @default 1080\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Sets the video crop range.\r\n     */\r\n    public setCropRange(topLeft: Coordinate, bottomRight: Coordinate): void {\r\n        this.cropRange = {\r\n            bottomRight,\r\n            topLeft,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Defines the video crop range.\r\n     * @default undefined\r\n     * @internal\r\n     */\r\n    public cropRange: {\r\n        topLeft: Coordinate;\r\n        bottomRight: Coordinate;\r\n    };\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} codec - The video codec.\r\n     * @param {number} bitrate - The video bitrate.\r\n     * @param {number} width - The video width.\r\n     * @param {number} height - The video height.\r\n     */\r\n    public constructor(codec: string = \"H264\",\r\n                       bitrate: number = 2000000,\r\n                       width: number = 1920,\r\n                       height: number = 1080,\r\n    ) {\r\n        this.codec = codec;\r\n        this.bitrate = bitrate;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ResultReason,\r\n    PropertyCollection,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the avatar WebRTC connection result.\r\n * @class AvatarWebRTCConnectionResult\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarWebRTCConnectionResult extends SynthesisResult {\r\n    private readonly privSDPAnswer: RTCSessionDescriptionInit;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {RTCSessionDescriptionInit} SDPAnswer - The SDP answer of WebRTC connection.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(SDPAnswer?: RTCSessionDescriptionInit, resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privSDPAnswer = SDPAnswer;\r\n    }\r\n\r\n    /**\r\n     * Specifies SDP (Session Description Protocol) answer of WebRTC connection.\r\n     * @member AvatarWebRTCConnectionResult.prototype.SDPAnswer\r\n     * @function\r\n     * @public\r\n     * @returns {RTCSessionDescriptionInit} Specifies the SDP answer of WebRTC connection.\r\n     */\r\n    public get SDPAnswer(): RTCSessionDescriptionInit {\r\n        return this.privSDPAnswer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     * caller must refresh it by setting the authorizationToken property on the corresponding\r\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     * original configuration's authorization token. Create a new configuration instance or set the\r\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     * further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     * property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     * wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        void botId;\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     * use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports.js\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n    SpeechSynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines error code in case that CancellationReason is Error.\r\n * Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    ConversationTranscriber,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber): Connection {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks(this.privInternalData.disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                this.privInternalData.speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* eslint-disable no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for connection events like Connected/Disconnected.\r\n * Added in version 1.2.0\r\n */\r\nexport class ConnectionEventArgs extends SessionEventArgs {\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage\r\n} from \"./Exports.js\";\r\n\r\nexport class ConnectionMessageEventArgs {\r\n\r\n    private privConnectionMessage: ConnectionMessage;\r\n\r\n    public constructor(message: ConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n    }\r\n\r\n    /**\r\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\r\n     */\r\n    public get message(): ConnectionMessage {\r\n        return this.privConnectionMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message event.\r\n     */\r\n    public toString(): string {\r\n        return \"Message: \" + this.privConnectionMessage.toString();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooLong(param: string, name: string, maxLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length > maxLength) {\r\n            throw new Error(\"throwIfNullOrTooLong:\" + name + \" (more than \" + maxLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooShort(param: string, name: string, minLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length < minLength) {\r\n            throw new Error(\"throwIfNullOrTooShort:\" + name + \" (less than \" + minLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: string, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class ConversationTranscriptionCanceledEventArgs\r\n */\r\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { ConsoleLoggingListener } from \"../common.browser/Exports.js\";\r\nimport { Events } from \"../common/Exports.js\";\r\nimport { LogLevel } from \"./LogLevel.js\";\r\n\r\ntype LogCallback = (s: string) => void;\r\n\r\n/**\r\n * Defines diagnostics API for managing console output\r\n * Added in version 1.21.0\r\n */\r\nexport class Diagnostics {\r\n    private static privListener: ConsoleLoggingListener = undefined;\r\n\r\n    public static SetLoggingLevel(logLevel: LogLevel): void {\r\n        this.privListener = new ConsoleLoggingListener(logLevel);\r\n        Events.instance.attachConsoleListener(this.privListener);\r\n    }\r\n\r\n    public static StartConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = true;\r\n        }\r\n    }\r\n\r\n    public static StopConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = false;\r\n        }\r\n    }\r\n\r\n    public static SetLogOutputPath(path: string): void {\r\n        if (typeof window === \"undefined\") {\r\n            if (!!this.privListener) {\r\n                this.privListener.logPath = path;\r\n            }\r\n        } else {\r\n            throw new Error(\"File system logging not available in browser.\");\r\n        }\r\n    }\r\n\r\n\r\n    public static set onLogOutput( callback: LogCallback ) {\r\n        if (!!this.privListener) {\r\n            this.privListener.logCallback = callback;\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports.js\";\r\nimport { OutputFormat } from \"./OutputFormat.js\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set applicationId(value: string) { }\r\n\r\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\r\n        return {\r\n            BotFramework: \"bot_framework\",\r\n            CustomCommands: \"custom_commands\"\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        void def;\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        void channel;\r\n        this.privSpeechConfig.setServiceProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory.js\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch((): void => {\r\n                // Destroy the recognizer.\r\n                // We've done all we can here.\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                this.dispose(true).catch((): void => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { AudioConfig } from \"./Audio/AudioConfig.js\";\r\nexport { AudioStreamFormat, AudioFormatTag } from \"./Audio/AudioStreamFormat.js\";\r\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream.js\";\r\nexport { AudioOutputStream, PullAudioOutputStream, PushAudioOutputStream} from \"./Audio/AudioOutputStream.js\";\r\nexport { CancellationReason } from \"./CancellationReason.js\";\r\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback.js\";\r\nexport { PushAudioOutputStreamCallback } from \"./Audio/PushAudioOutputStreamCallback.js\";\r\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel.js\";\r\nexport { SessionEventArgs } from \"./SessionEventArgs.js\";\r\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs.js\";\r\nexport { OutputFormat } from \"./OutputFormat.js\";\r\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs.js\";\r\nexport { RecognitionResult } from \"./RecognitionResult.js\";\r\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult.js\";\r\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult.js\";\r\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel.js\";\r\nexport { SpeechRecognitionEventArgs, ConversationTranscriptionEventArgs, MeetingTranscriptionEventArgs } from \"./SpeechRecognitionEventArgs.js\";\r\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs.js\";\r\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs.js\";\r\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs.js\";\r\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult.js\";\r\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult.js\";\r\nexport { ResultReason } from \"./ResultReason.js\";\r\nexport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nexport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\nexport { PropertyCollection } from \"./PropertyCollection.js\";\r\nexport { PropertyId } from \"./PropertyId.js\";\r\nexport { Recognizer } from \"./Recognizer.js\";\r\nexport { SpeechRecognizer } from \"./SpeechRecognizer.js\";\r\nexport { IntentRecognizer } from \"./IntentRecognizer.js\";\r\nexport { VoiceProfileType } from \"./VoiceProfileType.js\";\r\nexport { TranslationRecognizer } from \"./TranslationRecognizer.js\";\r\nexport { Translations } from \"./Translations.js\";\r\nexport { NoMatchReason } from \"./NoMatchReason.js\";\r\nexport { NoMatchDetails } from \"./NoMatchDetails.js\";\r\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs.js\";\r\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs.js\";\r\nexport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nexport { CancellationDetails } from \"./CancellationDetails.js\";\r\nexport { CancellationErrorCode } from \"./CancellationErrorCodes.js\";\r\nexport { ConnectionEventArgs } from \"./ConnectionEventArgs.js\";\r\nexport { ServiceEventArgs } from \"./ServiceEventArgs.js\";\r\nexport { Connection } from \"./Connection.js\";\r\nexport { PhraseListGrammar } from \"./PhraseListGrammar.js\";\r\nexport { DialogServiceConfig } from \"./DialogServiceConfig.js\";\r\nexport { BotFrameworkConfig } from \"./BotFrameworkConfig.js\";\r\nexport { CustomCommandsConfig } from \"./CustomCommandsConfig.js\";\r\nexport { DialogServiceConnector } from \"./DialogServiceConnector.js\";\r\nexport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nexport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\nexport { ServicePropertyChannel } from \"./ServicePropertyChannel.js\";\r\nexport { ProfanityOption } from \"./ProfanityOption.js\";\r\nexport { BaseAudioPlayer } from \"./Audio/BaseAudioPlayer.js\";\r\nexport { ConnectionMessageEventArgs } from \"./ConnectionMessageEventArgs.js\";\r\nexport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nexport { VoiceProfile } from \"./VoiceProfile.js\";\r\nexport { VoiceProfileEnrollmentResult, VoiceProfileEnrollmentCancellationDetails } from \"./VoiceProfileEnrollmentResult.js\";\r\nexport { VoiceProfileResult, VoiceProfileCancellationDetails } from \"./VoiceProfileResult.js\";\r\nexport { VoiceProfilePhraseResult } from \"./VoiceProfilePhraseResult.js\";\r\nexport { VoiceProfileClient } from \"./VoiceProfileClient.js\";\r\nexport { SpeakerRecognizer } from \"./SpeakerRecognizer.js\";\r\nexport { SpeakerIdentificationModel } from \"./SpeakerIdentificationModel.js\";\r\nexport { SpeakerVerificationModel } from \"./SpeakerVerificationModel.js\";\r\nexport { AutoDetectSourceLanguageConfig } from \"./AutoDetectSourceLanguageConfig.js\";\r\nexport { AutoDetectSourceLanguageResult } from \"./AutoDetectSourceLanguageResult.js\";\r\nexport { SourceLanguageConfig } from \"./SourceLanguageConfig.js\";\r\nexport { SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerRecognitionCancellationDetails } from \"./SpeakerRecognitionResult.js\";\r\nexport { Conversation,\r\n    ConversationExpirationEventArgs,\r\n    ConversationInfo,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslationResult,\r\n    ConversationTranslator,\r\n    ConversationTranscriber,\r\n    ConversationTranscriptionResult,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    IParticipant,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    User,\r\n    VoiceSignature\r\n    } from \"./Transcription/Exports.js\";\r\nexport { Synthesizer } from \"./Synthesizer.js\";\r\nexport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat.js\";\r\nexport { SpeechSynthesizer } from \"./SpeechSynthesizer.js\";\r\nexport { SynthesisResult } from \"./SynthesisResult.js\";\r\nexport { SpeechSynthesisResult } from \"./SpeechSynthesisResult.js\";\r\nexport { SpeechSynthesisEventArgs } from \"./SpeechSynthesisEventArgs.js\";\r\nexport { SpeechSynthesisWordBoundaryEventArgs } from \"./SpeechSynthesisWordBoundaryEventArgs.js\";\r\nexport { SpeechSynthesisBookmarkEventArgs } from \"./SpeechSynthesisBookmarkEventArgs.js\";\r\nexport { SpeechSynthesisVisemeEventArgs } from \"./SpeechSynthesisVisemeEventArgs.js\";\r\nexport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\nexport { SynthesisVoicesResult } from \"./SynthesisVoicesResult.js\";\r\nexport { VoiceInfo } from \"./VoiceInfo.js\";\r\nexport { IPlayer } from \"./Audio/IPlayer.js\";\r\nexport { SpeakerAudioDestination } from \"./Audio/SpeakerAudioDestination.js\";\r\nexport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nexport { ConversationTranscriptionCanceledEventArgs } from \"./ConversationTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { PronunciationAssessmentGradingSystem } from \"./PronunciationAssessmentGradingSystem.js\";\r\nexport { PronunciationAssessmentGranularity } from \"./PronunciationAssessmentGranularity.js\";\r\nexport { PronunciationAssessmentConfig } from \"./PronunciationAssessmentConfig.js\";\r\nexport { PronunciationAssessmentResult } from \"./PronunciationAssessmentResult.js\";\r\nexport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\nexport { AvatarConfig } from \"./AvatarConfig.js\";\r\nexport { AvatarEventArgs } from \"./AvatarEventArgs.js\";\r\nexport { AvatarSynthesizer } from \"./AvatarSynthesizer.js\";\r\nexport { AvatarVideoFormat, Coordinate } from \"./AvatarVideoFormat.js\";\r\nexport { AvatarWebRTCConnectionResult } from \"./AvatarWebRTCConnectionResult.js\";\r\nexport { Diagnostics } from \"./Diagnostics.js\";\r\nexport { LogLevel } from \"./LogLevel.js\";\r\nexport { IVoiceJson } from \"./IVoiceJson.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(\r\n        reason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result?: IntentRecognitionResult,\r\n        offset?: number,\r\n        sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param language - Primary Language detected, if provided.\r\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    public constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\r\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\r\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     * values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition like command or query.\r\n     * For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     * to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     * is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string;\r\n        key: string;\r\n        provider: string;\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model\r\n     * will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Language Identification mode\r\n * @class LanguageIdMode\r\n */\r\nexport enum LanguageIdMode {\r\n\r\n    /**\r\n     * Detect language at audio start\r\n     * @member LanguageIdMode.AtStart\r\n     */\r\n    AtStart,\r\n\r\n    /**\r\n     * Continuously detect language\r\n     * @member LanguageIdMode.Continuous\r\n     */\r\n    Continuous,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     * Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     * Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType } from \"../common/Exports.js\";\r\n\r\n/**\r\n * Define event severity types for setting logging output.\r\n * @class LogLevel\r\n */\r\n\r\nexport { EventType as LogLevel };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a MeetingTranscriptionCanceledEvent.\r\n * @class MeetingTranscriptionCanceledEventArgs\r\n */\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports.js\";\r\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\r\n     * result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConversationTranscriber,\r\n    MeetingTranscriber,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Allows additions of new phrases to improve speech recognition.\r\n *\r\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\r\n * to the speech service.\r\n */\r\nexport class PhraseListGrammar {\r\n    private privGrammerBuilder: DynamicGrammarBuilder;\r\n\r\n    private constructor(recogBase: ServiceRecognizerBase) {\r\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\r\n     * @param recognizer The recognizer to add phrase lists to.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber | MeetingTranscriber): PhraseListGrammar {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        return new PhraseListGrammar(recoBase);\r\n    }\r\n\r\n    /**\r\n     * Adds a single phrase to the current recognizer.\r\n     * @param phrase Phrase to add.\r\n     */\r\n    public addPhrase(phrase: string): void {\r\n        this.privGrammerBuilder.addPhrase(phrase);\r\n    }\r\n\r\n    /**\r\n     * Adds multiple phrases to the current recognizer.\r\n     * @param phrases Array of phrases to add.\r\n     */\r\n    public addPhrases(phrases: string[]): void {\r\n        this.privGrammerBuilder.addPhrase(phrases);\r\n    }\r\n\r\n    /**\r\n     * Clears all phrases added to the current recognizer.\r\n     */\r\n    public clear(): void {\r\n        this.privGrammerBuilder.clearPhrases();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n    enableProsodyAssessment: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n    private privEnableProsodyAssessment: boolean;\r\n    private privContentAssessmentTopic: string;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     * This method is designed to support the pronunciation assessment parameters still in preview.\r\n     * Under normal circumstances, use the constructor instead.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.expectContentAssessmentResponse = !!this.privContentAssessmentTopic;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(\r\n            this.properties.getProperty(PropertyId.PronunciationAssessment_Params),\r\n            this.privContentAssessmentTopic,\r\n            recoBase.isSpeakerDiarizationEnabled);\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public set enableMiscue(enableMiscue: boolean) {\r\n        const enableMiscueString = enableMiscue ? \"true\" : \"false\";\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @return {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public get enableMiscue(): boolean {\r\n        const enableMiscueString = this.properties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue, \"false\");\r\n        return (enableMiscueString.toLowerCase() === \"true\");\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * Enables the prosody assessment.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableProsodyAssessment\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableProsodyAssessment - enable prosody assessment.\r\n     */\r\n    public set enableProsodyAssessment(enableProsodyAssessment: boolean) {\r\n        this.privEnableProsodyAssessment = enableProsodyAssessment;\r\n    }\r\n\r\n    /**\r\n     * Enables content assessment and sets the topic.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableContentAssessmentWithTopic\r\n     * @function\r\n     * @public\r\n     * @param {string} topic - Topic for content assessment.\r\n     */\r\n    public enableContentAssessmentWithTopic(topic: string): void {\r\n        this.privContentAssessmentTopic = topic;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        paramsJson.enableProsodyAssessment = this.privEnableProsodyAssessment;\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString) {\r\n            paramsJson.enableMiscue = this.enableMiscue;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGradingSystem\r\n */\r\nexport enum PronunciationAssessmentGradingSystem {\r\n    /**\r\n     * Five point calibration\r\n     * @member PronunciationAssessmentGradingSystem.FivePoint\r\n     */\r\n    FivePoint = 1,\r\n\r\n    /**\r\n     * Hundred mark\r\n     * @member PronunciationAssessmentGradingSystem.HundredMark\r\n     */\r\n    HundredMark,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGranularity\r\n */\r\nexport enum PronunciationAssessmentGranularity {\r\n    /**\r\n     * Shows the score on the full text, word and phoneme level\r\n     * @member PronunciationAssessmentGranularity.Phoneme\r\n     */\r\n    Phoneme = 1,\r\n\r\n    /**\r\n     * Shows the score on the full text and word level\r\n     * @member PronunciationAssessmentGranularity.Word\r\n     */\r\n    Word,\r\n\r\n    /**\r\n     * Shows the score on the full text level only\r\n     * @member PronunciationAssessmentGranularity.FullText\r\n     */\r\n    FullText,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports.js\";\r\n\r\ninterface AssessmentResult {\r\n    NBest: DetailResult[];\r\n}\r\n\r\ninterface DetailResult {\r\n    Words: WordResult[];\r\n    PronunciationAssessment: {\r\n        AccuracyScore: number;\r\n        CompletenessScore: number;\r\n        FluencyScore: number;\r\n        PronScore: number;\r\n        ProsodyScore: number;\r\n    };\r\n    ContentAssessment: {\r\n        GrammarScore: number;\r\n        VocabularyScore: number;\r\n        TopicScore: number;\r\n    };\r\n}\r\n\r\ninterface WordResult {\r\n    Word: string;\r\n    Phonemes: {\r\n        Phoneme?: string;\r\n        PronunciationAssessment?: {\r\n            NBestPhonemes: { Phoneme: string }[];\r\n        };\r\n     }[];\r\n    PronunciationAssessment?: {\r\n        AccuracyScore: number;\r\n        ErrorType: string;\r\n    };\r\n    Syllables: { Syllable: string }[];\r\n}\r\n\r\nexport class ContentAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally.\r\n     */\r\n    public constructor(detailResult: DetailResult) {\r\n        this.privPronJson = detailResult;\r\n    }\r\n\r\n    /**\r\n     * Correctness in using grammar and variety of sentence patterns.\r\n     * Grammatical errors are jointly evaluated by lexical accuracy,\r\n     * grammatical accuracy and diversity of sentence structures.\r\n     * @member ContentAssessmentResult.prototype.grammarScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Grammar score.\r\n     */\r\n    public get grammarScore(): number {\r\n        return this.privPronJson.ContentAssessment.GrammarScore;\r\n    }\r\n\r\n    /**\r\n     * Proficiency in lexical usage. It evaluates the speaker's effective usage\r\n     * of words and their appropriateness within the given context to express\r\n     * ideas accurately, as well as level of lexical complexity.\r\n     * @member ContentAssessmentResult.prototype.vocabularyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Vocabulary score.\r\n     */\r\n    public get vocabularyScore(): number {\r\n        return this.privPronJson.ContentAssessment.VocabularyScore;\r\n    }\r\n\r\n    /**\r\n     * Level of understanding and engagement with the topic, which provides\r\n     * insights into the speaker’s ability to express their thoughts and ideas\r\n     * effectively and the ability to engage with the topic.\r\n     * @member ContentAssessmentResult.prototype.topicScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Topic score.\r\n     */\r\n    public get topicScore(): number {\r\n        return this.privPronJson.ContentAssessment.TopicScore;\r\n    }\r\n}\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString) as AssessmentResult;\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {DetailResult} detail result.\r\n     */\r\n    public get detailResult(): DetailResult {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.FluencyScore;\r\n    }\r\n\r\n    /**\r\n     * The prosody score, which indicates how nature of the given speech, including stress, intonation, speaking speed and rhythm.\r\n     * @member PronunciationAssessmentResult.prototype.prosodyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Prosody score.\r\n     */\r\n    public get prosodyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.ProsodyScore;\r\n    }\r\n\r\n    /**\r\n     * The concent assessment result.\r\n     * Only available when content assessment is enabled.\r\n     * @member PronunciationAssessmentResult.prototype.contentAssessmentResult\r\n     * @function\r\n     * @public\r\n     * @returns {ContentAssessmentResult} Content assessment result.\r\n     */\r\n    public get contentAssessmentResult(): ContentAssessmentResult {\r\n        if (this.detailResult.ContentAssessment === undefined) {\r\n            return undefined;\r\n        }\r\n        return new ContentAssessmentResult(this.detailResult);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to\r\n     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken\r\n     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations\r\n     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently\r\n     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low\r\n     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting\r\n     * behavior should be thoroughly validated as intended.\r\n     *\r\n     * For more information about timeout configuration that includes discussion of default behaviors, please visit\r\n     * https://aka.ms/csspeech/timeouts.\r\n     *\r\n     * Added in version 1.21.0.\r\n     */\r\n    Speech_SegmentationSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The speech service connection language identifier mode.\r\n     * Can be \"AtStart\" (the default), or \"Continuous\". See Language\r\n     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript\r\n     * for more details.\r\n     * Added in 1.25.0\r\n     **/\r\n    SpeechServiceConnection_LanguageIdMode,\r\n\r\n    /**\r\n     * A string value representing the desired endpoint version to target for Speech Recognition.\r\n     * Added in version 1.21.0\r\n     */\r\n    SpeechServiceConnection_RecognitionEndpointVersion,\r\n\r\n    /**\r\n    /**\r\n     * A string value the current speaker recognition scenario/mode (TextIndependentIdentification, etc.).\r\n     * Added in version 1.23.0\r\n     */\r\n    SpeechServiceConnection_SpeakerIdMode,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     * A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request WordBoundary events.\r\n     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestWordBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.\r\n     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestPunctuationBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.\r\n     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestSentenceBoundary,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params,\r\n\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    SpeakerRecognition_Api_Version,\r\n\r\n    /**\r\n     * Specifies whether to allow load of data URL for web worker\r\n     * Allowed values are \"off\" and \"on\". Default is \"on\".\r\n     * Added in version 1.32.0\r\n     */\r\n    WebWorkerLoadType,\r\n\r\n    /**\r\n     * Talking avatar service WebRTC session description protocol.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.33.0\r\n     */\r\n    TalkingAvatarService_WebRTC_SDP,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     * @param {PropertyCollection} properties - A set of properties to set on the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    RecognizedKeyword,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    VoicesListRetrieved,\r\n\r\n    /**\r\n     * Indicates the transcription result contains hypothesis text and its translation(s) for\r\n     * other participants in the conversation.\r\n     * @member ResultReason.TranslatingParticipantSpeech\r\n     */\r\n    TranslatingParticipantSpeech,\r\n\r\n    /**\r\n     * Indicates the transcription result contains final text and corresponding translation(s)\r\n     * for other participants in the conversation. Speech Recognition and Translation are now\r\n     * complete for this phrase.\r\n     * @member ResultReason.TranslatedParticipantSpeech\r\n     */\r\n    TranslatedParticipantSpeech,\r\n\r\n    /**\r\n     * <summary>\r\n     * Indicates the transcription result contains the instant message and corresponding\r\n     * translation(s).\r\n     * @member ResultReason.TranslatedInstantMessage\r\n     */\r\n    TranslatedInstantMessage,\r\n\r\n    /**\r\n     * Indicates the transcription result contains the instant message for other participants\r\n     * in the conversation and corresponding translation(s).\r\n     * @member ResultReason.TranslatedParticipantInstantMessage\r\n     */\r\n    TranslatedParticipantInstantMessage,\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for any Service message event\r\n * Added in version 1.9.0\r\n */\r\n\r\nexport class ServiceEventArgs extends SessionEventArgs {\r\n    private privJsonResult: string;\r\n    private privEventName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} json - json payload of the USP message.\r\n     */\r\n    public constructor(json: string,  name: string, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privJsonResult = json;\r\n        this.privEventName = name;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.privEventName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Source Language configuration.\r\n * @class SourceLanguageConfig\r\n */\r\nexport class SourceLanguageConfig {\r\n    private privLanguage: string;\r\n    private privEndpointId: string;\r\n\r\n    private constructor(language: string, endpointId?: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        this.privLanguage = language;\r\n        this.privEndpointId = endpointId;\r\n    }\r\n\r\n    /**\r\n     * @member SourceLanguageConfig.fromLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} language language (eg. \"en-US\") value of config.\r\n     * @param {string?} endpointId endpointId of model bound to given language of config.\r\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\r\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\r\n     * Added in version 1.13.0.\r\n     */\r\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\r\n        return new SourceLanguageConfig(language, endpointId);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privEndpointId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n    private privProfileIds: string[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        for (const profile of profiles) {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n            this.privProfileIds.push(profile.profileId);\r\n        }\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privProfileIds.join(\",\");\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return this.privProfileIds;\r\n    }\r\n\r\n    public get scenario(): string {\r\n        return \"TextIndependentIdentification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName, SpeakerResponse } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports.js\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(response: SpeakerResponse, resultReason: ResultReason = ResultReason.RecognizedSpeaker, cancellationErrorCode: CancellationErrorCode = CancellationErrorCode.NoError, errorDetails: string = \"\") {\r\n        this.privProperties = new PropertyCollection();\r\n        const resultType = response.scenario === \"TextIndependentIdentification\" ? SpeakerRecognitionResultType.Identify : SpeakerRecognitionResultType.Verify;\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                this.privProfileId = response.identificationResult.identifiedProfile.profileId;\r\n                this.privScore = response.identificationResult.identifiedProfile.score;\r\n                this.privReason = ResultReason.RecognizedSpeakers;\r\n            } else {\r\n                this.privScore = response.verificationResult.score;\r\n                if (response.verificationResult.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (response.verificationResult.profileId !== undefined && response.verificationResult.profileId !== \"\") {\r\n                    this.privProfileId = response.verificationResult.profileId;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = errorDetails;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[cancellationErrorCode]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, JSON.stringify(response));\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeakerRecognitionConnectionFactory,\r\n    SpeakerServiceRecognizer,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privDisposedSpeakerRecognizer: boolean;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n    /**\r\n     * Initializes an instance of the SpeakerRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privDisposedSpeakerRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        return this.recognizeSpeakerOnceAsyncImpl(model);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     * @async\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        await this.implRecognizerStop();\r\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedSpeakerRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedSpeakerRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerVerificationModel class for Speaker Recognition\r\n * Model contains a profile against which to verify a speaker\r\n * @class SpeakerVerificationModel\r\n */\r\nexport class SpeakerVerificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfile: VoiceProfile;\r\n\r\n    private constructor(profile: VoiceProfile) {\r\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\r\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            throw new Error(\"Verification model cannot be created from Identification profile\");\r\n        }\r\n        this.privVoiceProfile = profile;\r\n    }\r\n\r\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\r\n        return new SpeakerVerificationModel(profile);\r\n    }\r\n\r\n    public get voiceProfile(): VoiceProfile {\r\n        return this.privVoiceProfile;\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return [ this.voiceProfile.profileId ];\r\n    }\r\n\r\n    public get scenario(): string {\r\n        if (this.voiceProfile.profileType === VoiceProfileType.TextDependentVerification) {\r\n            return \"TextDependentVerification\";\r\n        } else {\r\n            return \"TextIndependentVerification\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {IStringDictionary} from \"../common/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     * SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     * and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     * endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     * the new token value will not apply to recognizers that have already been created. For recognizers\r\n     * that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The username of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * Enable audio logging in service.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined) as keyof typeof OutputFormat];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { RecognitionEventArgs, SpeechRecognitionResult, ConversationTranscriptionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\nexport class ConversationTranscriptionEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranscriptionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranscriptionResult} result - The conversation transcription result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranscriptionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the transcription result.\r\n     * @member ConversationTranscription1EventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {ConversationTranscriptionResult} the recognition result.\r\n     */\r\n        public get result(): ConversationTranscriptionResult {\r\n            return this.privResult;\r\n        }\r\n}\r\n\r\n/**\r\n * Defines contents of meeting transcribed/transcribing event.\r\n * @class MeetingTranscriptionEventArgs\r\n */\r\nexport class MeetingTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the boundary type of speech synthesis boundary event.\r\n * @class SpeechSynthesisBoundaryType\r\n * Added in version 1.21.0\r\n */\r\nexport enum SpeechSynthesisBoundaryType {\r\n    /**\r\n     * Indicates the boundary text is a word.\r\n     * @member SpeechSynthesisBoundaryType.Word\r\n     */\r\n    Word = \"WordBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a punctuation.\r\n     * @member SpeechSynthesisBoundaryType.Punctuation\r\n     */\r\n    Punctuation = \"PunctuationBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a sentence.\r\n     * @member SpeechSynthesisBoundaryType.Sentence\r\n     */\r\n    Sentence = \"SentenceBoundary\"\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n     Raw24Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n     Raw8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n     Riff8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Webm24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    Audio16Khz16Bit32KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit48KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * raw-22050hz-16bit-mono-pcm\r\n     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm\r\n     */\r\n    Raw22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-22050hz-16bit-mono-pcm\r\n     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm\r\n     */\r\n    Riff22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-44100hz-16bit-mono-pcm\r\n     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm\r\n     */\r\n    Raw44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-44100hz-16bit-mono-pcm\r\n     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm\r\n     */\r\n    Riff44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * amr-wb-16000hz\r\n     * AMR-WB audio at 16kHz sampling rate.\r\n     * Added in version 1.38.0\r\n     * @member SpeechSynthesisOutputFormat.AmrWb16000Hz\r\n     */\r\n    AmrWb16000Hz,\r\n\r\n    /**\r\n     * g722-16khz-64kbps\r\n     * G.722 audio at 16kHz sampling rate and 64kbps bitrate.\r\n     * Added in version 1.38.0\r\n     */\r\n    G72216Khz64Kbps\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    private readonly privAudioData: ArrayBuffer;\r\n    private readonly privAudioDuration: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {ArrayBuffer} audioData - The synthesized audio binary.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     * @param {number} audioDuration - The audio duration.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection, audioDuration?: number) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n        this.privAudioDuration = audioDuration;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n\r\n    /**\r\n     * The time duration of synthesized audio, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisResult.prototype.audioDuration\r\n     * @function\r\n     * @public\r\n     * @returns {number} The time duration of synthesized audio.\r\n     */\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private readonly privAudioOffset: number;\r\n    private readonly privDuration: number;\r\n    private readonly privText: string;\r\n    private readonly privWordLength: number;\r\n    private readonly privTextOffset: number;\r\n    private readonly privBoundaryType: SpeechSynthesisBoundaryType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} duration - The audio duration.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type\r\n     */\r\n    public constructor(audioOffset: number, duration: number, text: string, wordLength: number,\r\n                       textOffset: number, boundaryType: SpeechSynthesisBoundaryType) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privDuration = duration;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n        this.privBoundaryType = boundaryType;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the duration, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration in 100 nanosecond increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the boundary type.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisBoundaryType} the boundary type.\r\n     */\r\n    public get boundaryType(): SpeechSynthesisBoundaryType {\r\n        return this.privBoundaryType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SpeechSynthesisAdapter,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    marshalPromiseToCallbacks,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer extends Synthesizer {\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        super(speechConfig);\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SpeechSynthesisAdapter(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch((): void => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch((): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch((): void => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: { Locale: string }): boolean => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json, undefined);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n        }\r\n   }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport { IStringDictionary } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     * will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     * set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     * setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        // eslint-disable-next-line\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        if (!languages.includes(value)) {\r\n            languages.push(value);\r\n            this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        // eslint-disable-next-line\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IVoiceJson,\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult,\r\n    VoiceInfo,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    private privVoices: VoiceInfo[];\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    public constructor(requestId: string, json: any, errorDetails: string ) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item as IVoiceJson));\r\n            }\r\n        } else {\r\n            super(requestId, ResultReason.Canceled, errorDetails ? errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    public get voices(): VoiceInfo[] {\r\n        return this.privVoices;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig } from \"../common.speech/Exports.js\";\r\nimport { IAudioDestination, IStringDictionary, Queue } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, SpeechConfig, SpeechConfigImpl, SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\nexport abstract class Synthesizer {\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privRestAdapter: SynthesisRestAdapter;\r\n    protected privProperties: PropertyCollection;\r\n    protected privConnectionFactory: ISynthesisConnectionFactory;\r\n    protected privDisposed: boolean;\r\n    protected privSynthesizing: boolean;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this Synthesizer.\r\n     * @member Synthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member Synthesizer.prototype.autoDetectSourceLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config to initialize the synthesizer.\r\n     */\r\n    protected constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"bn-IN\"]: \"bn-IN-BashkarNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-AvaMultilingualNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"is-IS\"]: \"is-IS-GudrunNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"kk-KZ\"]: \"kk-KZ-AigulNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"kn-IN\"]: \"kn-IN-GaganNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lo-LA\"]: \"lo-LA-ChanthavongNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mk-MK\"]: \"mk-MK-AleksandarNeural\",\r\n            [\"ml-IN\"]: \"ml-IN-MidhunNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"ps-AF\"]: \"ps-AF-GulNawazNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"si-LK\"]: \"si-LK-SameeraNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"sr-RS\"]: \"sr-RS-NicholasNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = Synthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Synthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected abstract createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase;\r\n\r\n    // Creates the REST synthesis adapter\r\n    protected abstract createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter;\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Does the generic synthesizer setup that is common across all synthesizer types.\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig: SynthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            synthesizerConfig);\r\n\r\n        this.privRestAdapter = this.createRestSynthesisAdapter(\r\n            authentication,\r\n            synthesizerConfig);\r\n    }\r\n\r\n    protected static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    public constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IAuthentication,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, ConversationInfo, ConversationProperties, IConversation } from \"./IConversation.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        let conversationImpl: ConversationImpl;\r\n        let cb: Callback;\r\n        let err: Callback;\r\n        if (typeof arg2 === \"string\") {\r\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        } else {\r\n            conversationImpl = new ConversationImpl(speechConfig);\r\n            cb = arg2;\r\n            err = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                ((): void => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n        }\r\n        return conversationImpl;\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            Contracts.throwIfNullOrTooLong(hostNickname, \"nickname\", 50);\r\n            Contracts.throwIfNullOrTooShort(hostNickname, \"nickname\", 2);\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: ConversationProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\r\n        this.privConversationTranslator = conversationTranslator;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversationTranslator.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioConfig,\r\n    SpeechTranslationConfig\r\n} from \"../Exports.js\";\r\nimport { Callback } from \"./IConversation.js\";\r\n\r\nexport class ConversationCommon {\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    protected handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    protected handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\n\r\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\r\n    private privExpirationTime: number;\r\n\r\n    public constructor(expirationTime: number, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privExpirationTime = expirationTime;\r\n    }\r\n\r\n    /** How much longer until the conversation expires (in minutes). */\r\n    public get expirationTime(): number {\r\n        return this.privExpirationTime;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\nimport { ParticipantChangedReason } from \"./Exports.js\";\r\nimport { IParticipant } from \"./IParticipant.js\";\r\n\r\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\r\n    private privReason: ParticipantChangedReason;\r\n    private privParticipant: IParticipant[];\r\n\r\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privReason = reason;\r\n        this.privParticipant = participants;\r\n    }\r\n\r\n    public get reason(): ParticipantChangedReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get participants(): IParticipant[] {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    // SpeechConnectionFactory,\r\n    ConversationTranscriberConnectionFactory,\r\n    SpeechServiceConfig,\r\n    ConversationTranscriptionServiceRecognizer,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n} from \"../Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"../SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class ConversationTranscriber\r\n */\r\nexport class ConversationTranscriber extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory());\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): ConversationTranscriber {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event transcribing signals that an intermediate transcription result is received.\r\n     * @member ConversationTranscriber.prototype.transcribing\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribing: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event transcriber signals that a final recognition result is received.\r\n     * @member ConversationTranscriber.prototype.transcribed\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribed: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: ConversationTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for transcription.\r\n     * @member ConversationTranscriber.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of transcription.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of transcription.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of transcription.\r\n     * @member ConversationTranscriber.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of transcription.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this conversation transcriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops conversation transcription.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        recognizerConfig.isSpeakerDiarizationEnabled = true;\r\n        return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"../Exports.js\";\r\n\r\n/**\r\n * Defines result of conversation transcription.\r\n * @class ConversationTranscriptionResult\r\n */\r\nexport class ConversationTranscriptionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id\r\n     * @member ConversationTranscriptionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { RecognitionEventArgs } from \"../Exports.js\";\r\nimport { ConversationTranslationResult } from \"./Exports.js\";\r\n\r\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranslationResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranslationResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @returns {ConversationTranslationResult} the recognition result.\r\n     */\r\n    public get result(): ConversationTranslationResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../PropertyCollection.js\";\r\nimport { ResultReason } from \"../ResultReason.js\";\r\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult.js\";\r\nimport { Translations } from \"../Translations.js\";\r\n\r\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\r\n    private privId: string;\r\n    private privOrigLang: string;\r\n\r\n    public constructor(participantId: string,\r\n                       translations: Translations,\r\n                       originalLanguage?: string,\r\n                       resultId?: string,\r\n                       reason?: ResultReason,\r\n                       text?: string,\r\n                       duration?: number,\r\n                       offset?: number,\r\n                       errorDetails?: string,\r\n                       json?: string,\r\n                       properties?: PropertyCollection) {\r\n        super(translations, resultId, reason, text, duration, offset, undefined, undefined, errorDetails, json, properties);\r\n        this.privId = participantId;\r\n        this.privOrigLang = originalLanguage;\r\n    }\r\n\r\n    /**\r\n     * The unique identifier for the participant this result is for.\r\n     */\r\n    public get participantId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * The original language this result was in.\r\n     */\r\n    public get originalLang(): string {\r\n        return this.privOrigLang;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    IAuthentication,\r\n    ServicePropertiesPropertyName,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports.js\";\r\nimport { ConversationImpl } from \"./Conversation.js\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports.js\";\r\nimport { Callback, IConversation } from \"./IConversation.js\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\r\n\r\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\r\n\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\r\n                if (!!this.privTranslator.recognizing) {\r\n                    this.privTranslator.recognizing(this.privTranslator, e);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                } else {\r\n                    if (!!this.privTranslator.recognized) {\r\n                        this.privTranslator.recognized(this.privTranslator, e);\r\n                    }\r\n                }\r\n                return;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public set authentication(token: IAuthentication) {\r\n        this.privReco.authentication = token;\r\n    }\r\n\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onCancelSpeech(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for whole conversation results\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for detecting speech/translation results from self\r\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privCTRecognizer.authentication = token;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const propertyIdsToCopy: (string | PropertyId)[] = [\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    PropertyId.ConversationTranslator_Host,\r\n                    PropertyId.SpeechServiceConnection_Endpoint,\r\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\r\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\r\n                    PropertyId.SpeechServiceConnection_ProxyPort,\r\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\r\n                    \"ConversationTranslator_MultiChannelAudio\",\r\n                    \"ConversationTranslator_Region\"\r\n                ];\r\n\r\n                for (const prop of propertyIdsToCopy) {\r\n                    const value = this.privProperties.getProperty(prop);\r\n                    if (value) {\r\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\r\n                        this.privSpeechTranslationConfig.setProperty(key, value);\r\n                    }\r\n                }\r\n\r\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n                for (const prop of Object.keys(currentProperties)) {\r\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n                        this.privConversation.room.isHost = false;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n                this.privConversation.room.isHost = true;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onCancelSpeech();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            const convGetter = (): ConversationImpl => this.privConversation;\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport { Conversation, ConversationImpl } from \"./Conversation.js\";\r\nexport { ConversationInfo } from \"./IConversation.js\";\r\nexport { ConversationCommon } from \"./ConversationCommon.js\";\r\nexport { ConversationExpirationEventArgs } from \"./ConversationExpirationEventArgs.js\";\r\nexport { ConversationParticipantsChangedEventArgs } from \"./ConversationParticipantsChangedEventArgs.js\";\r\nexport { ConversationTranslationCanceledEventArgs } from \"./ConversationTranslationCanceledEventArgs.js\";\r\nexport { ConversationTranslationEventArgs } from \"./ConversationTranslationEventArgs.js\";\r\nexport { ConversationTranslationResult } from \"./ConversationTranslationResult.js\";\r\nexport { ConversationTranslator } from \"./ConversationTranslator.js\";\r\nexport { ConversationTranscriber } from \"./ConversationTranscriber.js\";\r\nexport { IParticipant, Participant, User, VoiceSignature } from \"./IParticipant.js\";\r\nexport { ParticipantChangedReason } from \"./ParticipantChangedReason.js\";\r\nexport { ConversationHandler, ConversationTranscriptionHandler, IConversationTranslator } from \"./ConversationHandler.js\";\r\nexport { Meeting, MeetingImpl } from \"./Meeting.js\";\r\nexport { MeetingInfo } from \"./IMeeting.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriber } from \"./MeetingTranscriber.js\";\r\nexport { MeetingHandler, MeetingTranscriptionHandler } from \"./MeetingHandler.js\";\r\nexport { ConversationTranscriptionResult } from \"./ConversationTranscriptionResult.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PropertyCollection } from \"../Exports.js\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    public constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, MeetingInfo, MeetingProperties, IMeeting } from \"./IMeeting.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Meeting implements IMeeting {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get meetingId(): string;\r\n    public abstract get meetingInfo(): MeetingInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a meeting\r\n     * @param speechConfig\r\n     * @param meetingId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createMeetingAsync(speechConfig: SpeechTranslationConfig, meetingId: string, arg3?: Callback, arg4?: Callback): Meeting {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        Contracts.throwIfNull(meetingId, \"meetingId\");\r\n        if (meetingId.length === 0) {\r\n            throw new Error(\"meetingId cannot be empty\");\r\n        }\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        const meetingImpl = new MeetingImpl(speechConfig, meetingId);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        return meetingImpl;\r\n    }\r\n\r\n    /** Start a meeting. */\r\n    public abstract startMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a meeting. After this no one will be able to join the meeting. */\r\n    public abstract deleteMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a meeting. */\r\n    public abstract endMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a meeting. This will prevent new participants from joining. */\r\n    public abstract lockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Meeting. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the Meeting. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a meeting using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a meeting. */\r\n    public abstract unlockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the meeting. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class MeetingImpl extends Meeting implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a Meeting impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        this.privConversationId = id;\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the meeting Id\r\n    public get meetingId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get meetingInfo(): MeetingInfo {\r\n        const convId: string = this.meetingId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: MeetingProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: MeetingInfo = { id: convId, participants: p, meetingProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    /**\r\n     * Create a new meeting as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new meeting as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param meeting\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinMeetingAsync(meetingId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, meetingId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteMeetingImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public endMeetingImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.meeting = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const meetingInfo = this.meetingInfo;\r\n                meetingInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const meetingInfo = this.meetingInfo;\r\n        meetingInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Connection,\r\n    MeetingTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs\r\n} from \"../Exports.js\";\r\nimport {\r\n    MeetingHandler,\r\n    MeetingImpl,\r\n    MeetingTranscriptionHandler\r\n} from \"./Exports.js\";\r\nimport { Callback, IMeeting } from \"./IMeeting.js\";\r\n\r\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the meeting.\r\n     * @member MeetingTranscriber.prototype.MeetingCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member MeetingTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member MeetingTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member MeetingTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting started events.\r\n     * @member MeetingTranscriber.prototype.MeetingStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting stopped events.\r\n     * @member MeetingTranscriber.prototype.MeetingStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * MeetingTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this MeetingTranscriber.\r\n     * @member MeetingTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privRecognizer.internalData;\r\n    }\r\n\r\n    /**\r\n     * @Deprecated\r\n     * @Obsolete\r\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\r\n     */\r\n    public get connection(): Connection {\r\n        return Connection.fromRecognizer(this.privRecognizer);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * @param {Meeting} meeting - meeting to be recognized\r\n     */\r\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\r\n        /* eslint-disable no-console */\r\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\r\n        /* eslint-enable no-console */\r\n        const meetingImpl = meeting as MeetingImpl;\r\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\r\n\r\n        // ref the meeting object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectMeetingCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        // eslint-disable-next-line\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member MeetingTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member MeetingTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport enum ParticipantChangedReason {\r\n    /** Participant has joined the conversation. */\r\n    JoinedConversation,\r\n\r\n    /** Participant has left the conversation. This could be voluntary, or involuntary\r\n     * (e.g. they are experiencing networking issues).\r\n     */\r\n    LeftConversation,\r\n\r\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\r\n    Updated\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(\r\n        sessionid: string,\r\n        cancellationReason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\r\n                       text?: string, duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    public static fromSpeechRecognitionResult(result: SpeechRecognitionResult): TranslationRecognitionResult {\r\n        return new TranslationRecognitionResult(undefined, result.resultId, result.reason, result.text, result.duration, result.offset, result.language, result.languageDetectionConfidence, result.errorDetails, result.json, result.properties);\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents\r\n     * a translation result in one of target languages, where the key is the name\r\n     * of the target language, in BCP-47 format, and the value is the translation\r\n     * text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Connection } from \"./Connection.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports.js\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, connectionFactory?: IConnectionFactory) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, connectionFactory || new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * TranslationRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechTranslationConfig: SpeechTranslationConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): TranslationRecognizer {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);\r\n        return new TranslationRecognizer(speechTranslationConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ResultReason } from \"./ResultReason.js\";\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated\r\n * text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    public constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translations\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private privMap: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Get the languages in the object in a String array.\r\n     * @member Translations.prototype.languages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} languages in translations object.\r\n     */\r\n    public get languages(): string[] {\r\n        return this.privMap.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translations.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.privMap.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translations.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.privMap.setProperty(key, value);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ITurnStatusResponsePayload,\r\n    TurnStatusResponsePayload\r\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload.js\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class TurnStatusReceivedEventArgs\r\n */\r\nexport class TurnStatusReceivedEventArgs {\r\n    private privTurnStatus: ITurnStatusResponsePayload;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} turnStatus - The JSON-encoded turn status message.\r\n     */\r\n    public constructor(turnStatus: string) {\r\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\r\n    }\r\n\r\n    /**\r\n     * Gets the interaction identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received interaction id.\r\n     */\r\n    public get interactionId(): any {\r\n        return this.privTurnStatus.interactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the conversation identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received conversation id.\r\n     */\r\n    public get conversationId(): any {\r\n        return this.privTurnStatus.conversationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the received turn status code.\r\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\r\n     * @function\r\n     * @public\r\n     * @returns {number} the received turn status.\r\n     */\r\n    public get statusCode(): number {\r\n        return this.privTurnStatus.statusCode; // eslint-disable-line @typescript-eslint/no-unsafe-return\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IVoiceJson } from \"./IVoiceJson\";\r\n\r\n/**\r\n * Defines the gender of synthesis voices.\r\n * Added in version 1.20.0.\r\n */\r\nexport enum SynthesisVoiceGender {\r\n\r\n    /** Gender unknown */\r\n    Unknown,\r\n\r\n    /** Female voice */\r\n    Female,\r\n\r\n    /** Male voice */\r\n    Male,\r\n\r\n    /** Neutral voice */\r\n    Neutral\r\n}\r\n\r\nexport enum SynthesisVoiceType {\r\n    OnlineNeural = 1,\r\n    OnlineStandard = 2,\r\n    OfflineNeural = 3,\r\n    OfflineStandard = 4,\r\n}\r\n\r\nconst GENDER_LOOKUP: Record<string, SynthesisVoiceGender> = {\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Neutral]]: SynthesisVoiceGender.Neutral,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Male]]: SynthesisVoiceGender.Male,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Female]]: SynthesisVoiceGender.Female,\r\n};\r\n\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    private privName: IVoiceJson[\"Name\"];\r\n    private privLocale: IVoiceJson[\"Locale\"];\r\n    private privShortName: IVoiceJson[\"ShortName\"];\r\n    private privDisplayName: IVoiceJson[\"DisplayName\"];\r\n    private privLocalName: IVoiceJson[\"LocalName\"];\r\n    private privLocaleName: IVoiceJson[\"LocaleName\"];\r\n    private privGender: SynthesisVoiceGender;\r\n    private privVoiceType: SynthesisVoiceType;\r\n    private privStyleList: IVoiceJson[\"StyleList\"] = [];\r\n    private privSampleRateHertz: IVoiceJson[\"SampleRateHertz\"];\r\n    private privStatus: IVoiceJson[\"Status\"];\r\n    private privExtendedPropertyMap: IVoiceJson[\"ExtendedPropertyMap\"];\r\n    private privWordsPerMinute: IVoiceJson[\"WordsPerMinute\"];\r\n    private privSecondaryLocaleList: IVoiceJson[\"SecondaryLocaleList\"];\r\n    private privRolePlayList: IVoiceJson[\"RolePlayList\"];\r\n\r\n    public constructor(json: IVoiceJson) {\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocaleName = json.LocaleName;\r\n            this.privDisplayName = json.DisplayName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = json.VoiceType.endsWith(\"Standard\") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;\r\n            this.privGender = GENDER_LOOKUP[json.Gender] || SynthesisVoiceGender.Unknown;\r\n\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n\r\n            this.privSampleRateHertz = json.SampleRateHertz;\r\n            this.privStatus = json.Status;\r\n\r\n            if (json.ExtendedPropertyMap) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privExtendedPropertyMap = json.ExtendedPropertyMap;\r\n            }\r\n\r\n            this.privWordsPerMinute = json.WordsPerMinute;\r\n\r\n            if (Array.isArray(json.SecondaryLocaleList)) {\r\n                this.privSecondaryLocaleList = [...json.SecondaryLocaleList];\r\n            }\r\n\r\n            if (Array.isArray(json.RolePlayList)) {\r\n                this.privRolePlayList = [...json.RolePlayList];\r\n            }\r\n        }\r\n    }\r\n\r\n    public get name(): IVoiceJson[\"Name\"] {\r\n        return this.privName;\r\n    }\r\n\r\n    public get locale(): IVoiceJson[\"Locale\"] {\r\n        return this.privLocale;\r\n    }\r\n\r\n    public get shortName(): IVoiceJson[\"ShortName\"] {\r\n        return this.privShortName;\r\n    }\r\n\r\n    public get displayName(): IVoiceJson[\"DisplayName\"] {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get localName(): IVoiceJson[\"LocalName\"] {\r\n        return this.privLocalName;\r\n    }\r\n\r\n    public get localeName(): IVoiceJson[\"LocaleName\"] {\r\n        return this.privLocaleName;\r\n    }\r\n\r\n    public get gender(): SynthesisVoiceGender {\r\n        return this.privGender;\r\n    }\r\n\r\n    public get voiceType(): SynthesisVoiceType {\r\n        return this.privVoiceType;\r\n    }\r\n\r\n    public get styleList(): IVoiceJson[\"StyleList\"] {\r\n        return this.privStyleList;\r\n    }\r\n\r\n    public get sampleRateHertz(): IVoiceJson[\"SampleRateHertz\"] {\r\n        return this.privSampleRateHertz;\r\n    }\r\n\r\n    public get status(): IVoiceJson[\"Status\"] {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get extendedPropertyMap(): IVoiceJson[\"ExtendedPropertyMap\"] {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privExtendedPropertyMap;\r\n    }\r\n\r\n    public get wordsPerMinute(): IVoiceJson[\"WordsPerMinute\"] {\r\n        return this.privWordsPerMinute;\r\n    }\r\n\r\n    public get secondaryLocaleList(): IVoiceJson[\"SecondaryLocaleList\"] {\r\n        return this.privSecondaryLocaleList;\r\n    }\r\n\r\n    public get rolePlayList(): IVoiceJson[\"RolePlayList\"] {\r\n        return this.privRolePlayList;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { VoiceProfileType } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines Voice Profile class for Speaker Recognition\r\n * @class VoiceProfile\r\n */\r\nexport class VoiceProfile {\r\n    private privId: string;\r\n    private privProfileType: VoiceProfileType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} profileId - profileId of this Voice Profile.\r\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\r\n     */\r\n    public constructor(profileId: string, profileType: VoiceProfileType) {\r\n        this.privId = profileId;\r\n        this.privProfileType = profileType;\r\n    }\r\n\r\n    /**\r\n     * profileId of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileId\r\n     * @function\r\n     * @public\r\n     * @returns {string} profileId of this Voice Profile instance.\r\n     */\r\n    public get profileId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * profileType of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileType\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\r\n     */\r\n    public get profileType(): VoiceProfileType {\r\n        return this.privProfileType;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    VoiceProfileConnectionFactory,\r\n    VoiceServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privVoiceAdapter: VoiceServiceRecognizer;\r\n    private privDisposedVoiceAdapter: boolean;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\r\n        this.privDisposedVoiceAdapter = false;\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\r\n        return new VoiceProfile(profileIds[0], profileType);\r\n    }\r\n\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        return this.privVoiceAdapter.getAllProfiles(profileType);\r\n        /*\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.audioConfig = audioConfig;\r\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\r\n\r\n        return this.privVoiceAdapter.enrollProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.deleteProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.resetProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Clean up object and close underlying connection\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @async\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedVoiceAdapter) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedVoiceAdapter = true;\r\n\r\n        if (disposing) {\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\nexport interface EnrollmentResultDetails {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: number;\r\n    enrollmentsSpeechLength: number;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: number;\r\n    audioLength: number;\r\n    audioSpeechLength: number;\r\n    enrollmentStatus: string;\r\n}\r\n\r\nexport interface EnrollmentResultJSON {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: string;\r\n    enrollmentsSpeechLength: string;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: string;\r\n    audioLength: string;\r\n    audioSpeechLength: string;\r\n    enrollmentStatus: string;\r\n    remainingEnrollments?: number;\r\n    identificationProfileId?: string;\r\n    verificationProfileId?: string;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileEnrollmentResult\r\n */\r\nexport class VoiceProfileEnrollmentResult {\r\n    private privReason: ResultReason;\r\n    private privDetails: EnrollmentResultDetails;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, json: string, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (!!json) {\r\n                this.privDetails = JSON.parse(json) as EnrollmentResultDetails;\r\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\r\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get enrollmentsCount(): number {\r\n        return this.privDetails.enrollmentsCount;\r\n    }\r\n\r\n    public get enrollmentsLength(): number {\r\n        return this.privDetails.enrollmentsLength;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\r\n        return this.privDetails;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public static FromIdentificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getIdentificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static FromVerificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getVerificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private static getIdentificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount || 0,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.identificationProfileId,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n\r\n    private static getVerificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.verificationProfileId,\r\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileEnrollmentCancellationDetails\r\n */\r\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\r\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n    private privType: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string, type: string, phraseArray: string[]) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(phraseArray, \"phrase array\");\r\n        this.privType = type;\r\n        if (!!phraseArray && !!phraseArray[0]) {\r\n            this.privPhrases = phraseArray;\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileResult\r\n */\r\nexport class VoiceProfileResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (reason === ResultReason.Canceled) {\r\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileCancellationDetails\r\n */\r\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\r\n     * @member VoiceProfileCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileType\r\n */\r\nexport enum VoiceProfileType {\r\n\r\n    /**\r\n     * Text independent speaker identification\r\n     * @member VoiceProfileType.TextIndependentIdentification\r\n     */\r\n    TextIndependentIdentification,\r\n\r\n    /**\r\n     * Text dependent speaker verification\r\n     * @member VoiceProfileType.TextDependentVerification\r\n     */\r\n    TextDependentVerification,\r\n\r\n    /**\r\n     * Text independent speaker verification\r\n     * @member VoiceProfileType.TextIndependentVerification\r\n     */\r\n    TextIndependentVerification,\r\n}\r\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function get() {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function get() {\n    return _parse.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function get() {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function get() {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function get() {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function get() {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function get() {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function get() {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function get() {\n    return _version.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar _default = {\n  randomUUID\n};\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unsafeStringify = unsafeStringify;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.unsafeStringify)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URL = exports.DNS = void 0;\nexports.default = v35;\n\nvar _stringify = require(\"./stringify.js\");\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.unsafeStringify)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _native = _interopRequireDefault(require(\"./native.js\"));\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (_native.default.randomUUID && !buf && !options) {\n    return _native.default.randomUUID();\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.unsafeStringify)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\nvar _default = version;\nexports.default = _default;"],"names":["exports","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","i","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","length","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","join","Uint8Array","Array","code","Error","indexOf","start","end","num","output","core","require","StatusError","constructor","res","_len","arguments","params","_key","buffer","super","captureStackTrace","this","name","message","statusMessage","statusCode","status","json","bind","text","arrayBuffer","Object","defineProperty","get","headers","key","value","entries","toLowerCase","module","mkrequest","statusCodes","method","encoding","baseurl","async","_url","body","_headers","undefined","parsed","URL","username","Authorization","btoa","password","protocol","host","pathname","search","ArrayBuffer","isView","JSON","stringify","Headers","resp","fetch","has","encodings","Set","args","forEach","arg","toUpperCase","startsWith","add","isArray","size","base64","ieee754","customInspectSymbol","Symbol","Buffer","K_MAX_LENGTH","createBuffer","RangeError","buf","setPrototypeOf","prototype","encodingOrOffset","TypeError","allocUnsafe","from","string","isEncoding","actual","write","slice","fromString","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","b","obj","isBuffer","checked","numberIsNaN","type","data","fromObject","toPrimitive","assertSize","array","toString","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","Math","min","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","e","typedArraySupport","console","error","enumerable","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","writable","configurable","stack","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","floor","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","isNaN","log","LN2","AgentConfig","__exportStar","fs","__importStar","LogLevel_js_1","Contracts_js_1","logLevelFilter","LogLevel","None","privLogPath","privEnableConsoleOutput","privLogLevelFilter","logPath","path","Contracts","throwIfNullOrUndefined","openSync","enableConsoleOutput","enableOutput","onEvent","event","eventType","logCallback","writeFileSync","flag","Debug","debug","Info","info","Warning","warn","logFragments","eventTime","prop","hasOwnProperty","valueToLog","Exports_js_1","Exports_js_2","AudioStreamFormat_js_1","file","filename","audioSourceId","privStreams","privHeaderEnd","privId","createNoDashGuid","privEvents","EventSource","privSource","window","Blob","privFilename","privAudioFormatPromise","readHeader","format","turnOn","errorMsg","AudioSourceErrorEvent","Promise","reject","AudioSourceInitializingEvent","AudioSourceReadyEvent","id","attach","audioNodeId","AudioStreamNodeAttachingEvent","stream","upload","AudioStreamNodeAttachedEvent","resolve","detach","readEnded","AudioStreamNodeDetachedEvent","turnOff","close","streamId","isClosed","AudioSourceOffEvent","events","deviceInfo","then","result","bitspersample","bitsPerSample","channelcount","channels","connectivity","Unknown","manufacturer","model","samplerate","samplesPerSec","File","header","headerResult","Deferred","processHeader","view","DataView","getWord","index","getUint8","formatSize","getInt32","channelCount","getUint16","sampleRate","getUint32","maxHeaderSize","AudioStreamFormat","getWaveFormatPCM","reader","FileReader","onload","readAsArrayBuffer","h","promise","onerror","AudioStreamNodeErrorEvent","ChunkedArrayBufferStream","avgBytesPerSec","chunk","processFile","buff","writeStreamChunk","isEnd","timeReceived","Date","now","ev","fileBuffer","Events","instance","MicAudioSource","privRecorder","deviceId","mediaStream","privOutputChunkSize","AUDIOFORMAT","privMediaStream","privIsClosing","privInitializeDeferral","createAudioContext","typedError","nav","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","constraints","successCallback","errorCallback","catch","next","active","audio","video","privContext","state","resume","reason","listen","destroyAudioContext","getMicrophoneLabel","label","Microphones","setProperty","AudioWorkletSourceURLPropertyName","setWorkletUrl","defaultMicrophoneName","privMicrophoneLabel","microphoneDeviceId","getTracks","getSettings","deferred","enumerateDevices","devices","device","record","AudioStreamFormatImpl","getAudioContext","releaseMediaResources","hasClose","suspend","getDefaultInputFormat","Exports_1","stopInputOnRelease","privStopInputOnRelease","context","outputStream","waveStreamEncoder","RiffPcmEncoder","micInput","createMediaStreamSource","attachScriptProcessor","scriptNode","bufferSize","createScriptProcessor","audioSampleRate","onaudioprocess","inputFrame","inputBuffer","getChannelData","waveFrame","encode","connect","destination","privMediaResources","scriptProcessorNode","source","skipAudioWorklet","privSpeechProcessorScript","audioWorklet","blob","createObjectURL","addModule","workletNode","AudioWorkletNode","port","onmessage","err","disconnect","track","stop","url","ProxyInfo","proxyHostName","proxyPort","proxyUserName","proxyPassword","privProxyHostName","privProxyPort","privProxyUserName","privProxyPassword","fromParameters","parameters","getProperty","PropertyId","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","fromRecognizerConfig","config","HostName","Port","UserName","Password","audioSource","bytesPerSecond","privBuffers","privReplayOffset","privLastShrinkOffset","privBufferStartOffset","privBufferSerial","privBufferedBytes","privReplay","privLastChunkAcquiredTime","privAudioNode","privBytesPerSecond","offsetToSeek","bytesToSeek","round","retVal","BufferEntry","replay","shrinkBuffers","findTimeAtOffset","startOffset","endOffset","serial","RestConfigBase","requestOptions","privDefaultRequestOptions","configParams","privDefaultParams","restErrors","privRestErrors","Accept","ignoreCache","timeout","authInvalidSubscriptionKey","authInvalidSubscriptionRegion","invalidArgs","invalidCreateJoinConversationResponse","invalidParticipantRequest","permissionDeniedConnect","permissionDeniedConversation","permissionDeniedParticipant","permissionDeniedSend","permissionDeniedStart","apiVersion","authorization","clientAppId","contentTypeKey","correlationId","languageCode","nickname","profanity","requestId","roomId","sessionToken","subscriptionKey","subscriptionRegion","token","bent_1","__importDefault","RestRequestType","ArgumentNullError","privHeaders","privIgnoreCache","extractHeaderValue","headerKey","headerValue","headerMap","line","shift","options","setHeaders","request","uri","queryParams","responseReceivedDeferral","requestCommand","handleRestResponse","ok","statusText","Post","postData","default","sendRequest","Delete","send","keys","map","k","encodeURIComponent","WebsocketMessageAdapter_js_1","queryParameters","messageFormatter","proxyInfo","enableCompression","connectionId","privIsDisposed","privMessageFormatter","paramName","headerName","privUri","privConnectionMessageAdapter","WebsocketMessageAdapter","dispose","isDisposed","open","net","tls","agent_base_1","https_proxy_agent_1","ws_1","HeaderNames_js_1","privConnectionEvents","privConnectionId","privConnectionState","ConnectionState","privEnableCompression","HeaderNames","ConnectionId","privLastErrorReceived","Disconnected","privConnectionEstablishDeferral","privCertificateValidatedDeferral","Connecting","WebSocket","forceNpmWebSocket","perMessageDeflate","agent","getAgent","toLocaleLowerCase","privWebsocketClient","binaryType","privReceivingMessageQueue","Queue","privDisconnectDeferral","privSendMessageQueue","processSendQueue","BackgroundEvent","ConnectionOpenResponse","ConnectionStartEvent","onopen","Connected","ConnectionEstablishedEvent","ConnectionErrorEvent","onclose","ConnectionClosedEvent","onClose","networkReceivedTime","toISOString","enqueueFromPromise","rawMessage","RawWebsocketMessage","MessageType","Binary","toConnectionMessage","connectionMessage","ConnectionMessageReceivedEvent","Text","messageSendStatusDeferral","messageSendDeferral","fromConnectionMessage","Message","sendStatusDeferral","dequeue","sendRawMessage","sendItem","ConnectionMessageSentEvent","isWebsocketOpen","payload","closeReason","drainAndDispose","pendingSendItem","itemToSend","sendError","Agent","createConnection","GetProxyAgent","httpProxyOptions","requestOCSP","socketPromise","servername","baseAgent","callback","socket","secureEndpoint","readyState","OPEN","modelImpl","intentName","toJsonString","iPrivConfig","AvatarSynthesisAdapter","SynthesisAdapterBase","authentication","connectionFactory","synthesizerConfig","avatarSynthesizer","avatarConfig","privAvatarSynthesizer","privSynthesizer","privAvatarConfig","setSynthesisContextSynthesisSection","privSynthesisContext","setSynthesisSection","setSpeechConfigSynthesisSection","privSynthesizerConfig","synthesisVideoSection","bitrate","videoFormat","codec","crop","bottomRight","cropRange","topLeft","resolution","height","width","webrtcConfig","clientDescription","TalkingAvatarService_WebRTC_SDP","iceServers","remoteIceServers","talkingAvatar","background","color","backgroundColor","image","backgroundImage","character","customized","style","onAvatarEvent","metadata","avatarEventReceived","avatarEventArgs","AvatarEventArgs","Data","Offset","Name","IAuthentication_js_1","privAuthInfo","AuthInfo","AuthKey","authFetchEventId","fetchOnExpiry","CognitiveTokenAuthentication","fetchCallback","fetchOnExpiryCallback","privFetchCallback","privFetchOnExpiryCallback","privTokenPrefix","QueryParameterNames_js_1","getHostSuffix","region","setCommonUrlParams","endpoint","Map","Speech_SegmentationSilenceTimeoutMs","QueryParameterNames","SegmentationSilenceTimeoutMs","SpeechServiceConnection_EnableAudioLogging","EnableAudioLogging","SpeechServiceConnection_EndSilenceTimeoutMs","EndSilenceTimeoutMs","SpeechServiceConnection_InitialSilenceTimeoutMs","InitialSilenceTimeoutMs","SpeechServiceResponse_PostProcessingOption","Postprocessing","SpeechServiceResponse_ProfanityOption","Profanity","SpeechServiceResponse_RequestWordLevelTimestamps","EnableWordLevelTimestamps","SpeechServiceResponse_StablePartialResultThreshold","StableIntermediateThreshold","parameterName","propertyId","setUrlParameter","serviceProperties","parse","ServicePropertiesPropertyName","propId","ConversationServiceRecognizer","ServiceRecognizerBase","recognizerConfig","recognizer","handleSpeechPhraseMessage","handleSpeechPhrase","textBody","handleSpeechHypothesisMessage","handleSpeechHypothesis","processTypeSpecificMessages","handleRecognizedCallback","sessionId","handleRecognizingCallback","duration","processSpeechMessages","processed","cancelRecognition","cancellationReason","errorCode","simple","SimpleSpeechPhrase","fromJSON","resultReason","EnumTranslation","implTranslateRecognitionResult","RecognitionStatus","resultProps","PropertyCollection","SpeechServiceResponse_JsonResult","simpleOffset","privRequestSession","currentTurnAudioOffset","onPhraseRecognized","Duration","ResultReason","Canceled","cancelReason","implTranslateCancelResult","cancellationErrorCode","implTranslateCancelErrorCode","cancelRecognitionLocal","implTranslateErrorDetails","isSpeechEnded","NoMatch","InitialSilenceTimeout","privRecognizerConfig","OutputFormatPropertyName","OutputFormat","Simple","SpeechRecognitionResult","DisplayText","Language","LanguageDetectionConfidence","SpeakerId","detailed","DetailedSpeechPhrase","totalOffset","offsetCorrectedJson","getJsonWithCorrectedOffsets","hypothesis","SpeechHypothesis","RecognizingSpeech","onHypothesis","Exports_js_3","ConnectionFactoryBase_js_1","Exports_js_4","ConversationTranscriberConnectionFactory","ConnectionFactoryBase","universalUri","create","authInfo","SpeechServiceConnection_Endpoint","SpeechServiceConnection_Region","hostSuffix","SpeechServiceConnection_Host","endpointId","SpeechServiceConnection_EndpointId","language","SpeechServiceConnection_RecoLanguage","CustomSpeechDeploymentId","autoDetectSourceLanguages","EnableLanguageId","setV2UrlParams","webSocketConnection","WebsocketConnection","WebsocketMessageFormatter","SpeechServiceConnection_Url","ConversationTranscriptionServiceRecognizer","conversationTranscriber","privConversationTranscriber","setSpeakerDiarizationJson","privEnableSpeakerId","phraseDetection","privSpeechContext","getSection","mode","speakerDiarization","audioSessionId","privDiarizationSessionId","audioOffsetMs","setSection","ConversationTranscriptionResult","ConversationTranscriptionEventArgs","transcribing","Success","NBest","Display","transcribed","CancellationErrorCodePropertyName","CancellationErrorCode","canceled","cancelEvent","ConversationTranscriptionCanceledEventArgs","DialogConnectionFactory","applicationId","Conversation_ApplicationId","dialogType","Conversation_DialogType","requestTurnStatus","Conversation_Request_Bot_Status_Messages","Format","RequestBotStatusMessages","BotId","DialogServiceConfig","DialogTypes","CustomCommands","CustomCommandsAppId","resourceInfix","version","BotFramework","BaseUrl","endsWith","ApiKey","DialogEvents_js_1","AudioOutputFormat_js_1","DialogServiceTurnStateManager_js_1","ActivityResponsePayload_js_1","SpeechConnectionMessage_Internal_js_1","DialogServiceAdapter","dialogServiceConnector","privDialogServiceConnector","receiveMessageOverride","receiveDialogMessageOverride","privTurnStateManager","DialogServiceTurnStateManager","recognizeOverride","recoMode","listenOnce","postConnectImplOverride","connection","dialogConnectImpl","configConnectionOverride","configConnection","disconnectOverride","privDisconnect","privDialogAudioSource","agentConfigSent","privLastResult","connectionEvents","connectionEvent","terminateMessageLoop","sendMessage","interactionGuid","createGuid","agentMessage","interactionId","messagePayload","agentMessageJson","fetchConnection","SpeechConnectionMessage","CancellationReason","NoError","messageType","speechPhrase","TooManyRequests","fireEventForResult","recognized","SpeechRecognitionEventArgs","recognizing","keyword","SpeechKeyword","Status","RecognizedKeyword","resultId","audioRequestId","turn","GetTurn","binaryBody","audioStream","endAudioStream","handleResponseMessage","defferal","isRecognizing","onStopRecognizing","properties","SpeechRecognitionCanceledEventArgs","privSuccessCallback","recognitionMode","privErrorCallback","startNewRecognition","listenForServiceTelemetry","Speech_SessionId","conPromise","connectImpl","preAudioPromise","sendPreAudioMessages","node","audioNode","ReplayableAudioNode","onAudioSourceAttachCompleted","SpeechServiceConfig","Context","ConnectionFailure","sessionStartEventArgs","SessionEventArgs","privRecognizer","sessionStarted","sendAudio","RuntimeError","privConnectionLoop","startMessageLoop","communicationCustodian","loop","turnRequestId","StartTurn","onServiceTurnStartResponse","speechStartDetected","SpeechDetected","speechStartEventArgs","RecognitionEventArgs","speechStopDetected","onServiceRecognized","speechStopEventArgs","speechEndDetected","turnEndRequestId","CompleteTurn","sessionStopEventArgs","onServiceTurnEndResponse","isContinuousRecognition","sessionStopped","serviceEvents","ServiceEvent","sendSpeechServiceConfig","serialize","sendAgentConfig","addKeywordContextData","sendSpeechContext","sendAgentContext","sendWaveHeader","agentConfig","botInfo","commandsCulture","SendingAgentContextMessageEvent","agentConfigJson","guid","speechActivityTemplate","Conversation_Speech_Activity_Template","agentContext","channelData","agentContextJson","serviceResult","responseMessage","responsePayload","responseRequestId","activityPayload","ActivityPayloadResponse","conversationId","updateAgentConfig","pullAudioOutputStream","processActivityPayload","AudioOutputFormatImpl","fromSpeechSynthesisOutputFormatString","SpeechServiceConnection_SynthOutputFormat","activity","ActivityReceivedEventArgs","activityReceived","turnStatusReceived","TurnStatusReceivedEventArgs","keywordPropertyValue","keywordOffsetPropertyValue","keywordDurationPropertyValue","keywords","keywordOffsets","keywordDurations","keywordDefinitionArray","definition","speechContext","clientDetectedKeywords","onReject","action","AudioOutputStream_js_1","manager","privRequestId","privIsCompleted","privAudioStream","privTurnManager","resetTurnEndTimeout","audioFormat","messageDataStreamType","MessageDataStreamType","TextToSpeechAudio","AudioOutputStream","createPullStream","getDefaultOutputFormat","complete","privTimeoutToken","clearTimeout","setTimeout","Error_js_1","DialogServiceTurnState_js_1","privTurnMap","InvalidOperationError","turnState","DialogServiceTurnState","delete","addPhrase","phrase","privPhrases","clearPhrases","addReferenceGrammar","grammar","privGrammars","clearGrammars","generateGrammarObject","retObj","ReferenceGrammars","retPhrases","Groups","Type","Items","recognitionStatus","expectEndOfDictation","RecognizedSpeech","EndOfDictation","BabbleTimeout","BadRequest","Forbidden","EndOfStream","ServiceError","BadRequestParameters","errorDetails","AvatarSynthesisAdapter_js_1","SpeechSynthesisAdapter_js_1","SpeechSynthesisAdapter","SpIDAuthKey","ContentType","Path","RequestId","RequestStreamId","RequestTimestamp","privHeaderName","privToken","IntentConnectionFactory","SpeechServiceConnection_IntentRegion","getSpeechRegionFromIntentRegion","intentRegion","IntentServiceRecognizer","privIntentRecognizer","privIntentDataSent","setIntents","addedIntents","umbrellaIntent","privAddedLmIntents","privUmbrellaIntent","speechHypothesis","IntentRecognitionResult","RecognizingIntent","IntentRecognitionEventArgs","sendEvent","privPendingIntentArgs","intentResponse","IntentResponse","topScoringIntent","intent","addedIntent","intentId","RecognizedIntent","LanguageUnderstandingServiceResponse_JsonResult","IntentRecognitionCanceledEventArgs","CustomVoiceDeploymentId","StableTranslation","TestHooks","CtsMeetingId","CtsDeviceId","CtsIsParticipant","EnableAvatar","SpeechRecognitionEvent","PlatformEvent","eventName","EventType","privSessionId","privAudioSourceId","privAudioNodeId","authFetchEventid","privAuthFetchEventid","RecognitionCompletionStatus","privAuthFetchEventId","serviceTag","privStatus","privError","privServiceTag","RecognitionMode","SpeechResultFormat","speechServiceConfig","privSpeechServiceConfig","privParameters","privMaxRetryCount","privLanguageIdMode","SpeechServiceConnection_LanguageIdMode","privRecognitionMode","privRecognitionActivityTimeout","Interactive","Recognition","recognitionActivityTimeout","languageIdMode","SpeechServiceConnection_AutoDetectSourceLanguages","recognitionEndpointVersion","SpeechServiceConnection_RecognitionEndpointVersion","sourceLanguageModels","models","modelsExist","customProperty","modelId","maxRetryCount","isSpeakerDiarizationEnabled","RecognitionEvents_js_1","ServiceTelemetryListener_Internal_js_1","privDetachables","privIsAudioNodeDetached","privIsRecognizing","privIsSpeechEnded","privTurnStartAudioOffset","privLastRecoOffset","privHypothesisReceived","privBytesSent","privRecognitionBytesSent","privRecogNumber","privInTurn","privConnectionAttempts","privTurnDeferral","turnCompletionPromise","recogNumber","numConnectionAttempts","bytesSent","recognitionBytesSent","eventSource","privServiceTelemetryListener","attachListener","ServiceTelemetryListener","RecognitionTriggeredEvent","isError","onComplete","ListeningStartedEvent","onPreConnectionStart","ConnectingToServiceEvent","onAuthCompleted","onConnectionEstablishCompleted","RecognitionStartedEvent","continuousRecognition","onSpeechContext","hypothesisReceived","phraseReceived","onAudioSent","onRetryConnection","detachable","getTelemetry","hasTelemetry","onSpeechEnded","detachAudioNode","privActivityResponse","privDetailedSpeechPhrase","baseOffset","firstWordOffset","Words","details","word","DisplayWords","PrimaryLanguage","Confidence","SynthesisStatus","privIntentResponse","query","entities","privSimpleSpeechPhrase","privSpeechStartDetected","privSpeechHypothesis","privSpeechKeyword","MetadataType","SynthesisAudioMetadata","privSynthesisAudioMetadata","Metadata","TranslationStatus_js_1","TranslationHypothesis","privTranslationHypothesis","Translation","TranslationStatus","fromTranslationResponse","translationHypothesis","TranslationPhrase","privTranslationPhrase","translationResponse","SpeechPhrase","TranslationSynthesisEnd","privSynthesisEnd","FailureReason","TurnStatusResponsePayload","privMessageStatusResponse","privConnectionConfigurationPromise","privConnectionPromise","privSetTimeout","privIsLiveAudio","privAverageBytesPerMs","privExpectContentAssessmentResponse","recognizeSpeaker","sendPrePayloadJSONOverride","privMustReportEndOfStream","privAuthentication","privConnectionFactory","privAudioSource","RequestSession","privServiceEvents","privDynamicGrammar","DynamicGrammarBuilder","SpeechContext","privAgentConfig","WebWorkerLoadType","Worker","Timeout","globalThis","connectionClosedEvent","setLanguageIdJson","setOutputDetailLevelJson","setTranslationJson","targetLanguages","SpeechServiceConnection_TranslationToLanguages","languages","translationVoice","SpeechServiceConnection_TranslationVoice","onSuccess","interimResults","languageToVoiceMap","lang","defaultVoices","setSpeechSegmentationTimeoutJson","speechSegmentationTimeout","Conversation","Dictation","segmentationSilenceTimeoutMs","segmentation","sourceLanguages","speechContextLidMode","Priority","onUnknown","resultType","phraseResults","customModels","onInterim","setWordLevelTimings","Detailed","setDetailedOutputFormat","dynamicGrammar","conversationTranslatorToken","ConversationTranslator_Token","voiceProfileType","SpeechServiceConnection_SpeakerIdMode","auth","recognize","errorCallBack","audioStreamNode","receiveMessage","stopRecognizing","sendFinalAudio","connectAsync","cb","sendNetworkMessage","contentType","activityTemplate","privActivityTemplate","expectContentAssessmentResponse","sendTelemetryData","telemetryData","telemetryDataEnabled","privServiceHasSentMessage","sendPrePayloadJSON","updateSpeakerDiarizationAudioOffset","setSpeakerDiarizationAudioOffsetMs","generateNewRequestId","speechContextJson","noOp","retryableConnect","requestSession","SpeechServiceConfigJson","replacement","system","DisableReferenceChannel","MicSpec","configureConnection","nextSendTime","fastLaneSizeMs","maxSendUnthrottledBytes","startRecogNumber","readAndUploadCycle","audioStreamChunk","sendDelay","delay","isUnAuthorized","lastStatusCode","lastReason","authPromise","response","delayMs","writeBufferToConsole","readView","padStart","privListeningTriggerMetric","privMicMetric","privConnectionEstablishMetric","privReceivedMessages","privPhraseLatencies","privHypothesisLatencies","audioReceivedTime","End","Start","privMicStartTime","privConnectionStartTime","Id","ConnectionEstablishErrorEvent","getConnectionError","maxMessagesToSend","metrics","PhraseLatencyMs","FirstHypothesisLatencyMs","telemetry","Metrics","ReceivedMessages","SpeakerRecognitionConnectionFactoryBase","endpointPath","scenario","scenarioToPath","SpeechServiceConnection_Key","SpeakerServiceRecognizer","privSpeakerRecognizer","privSpeakerAudioSource","recognizeSpeakerOnce","SpeakerRecognitionResult","RecognizedSpeaker","privResultDeferral","privSpeakerModel","extractSpeakerContext","sendSpeakerRecognition","speakerContextJson","features","interimResult","progressiveDetection","profileIds","SpeechConnectionFactory","interactiveRelativeUri","conversationRelativeUri","dictationRelativeUri","ForceDictationPropertyName","ConnectionMessage","additionalHeaders","privPath","privContentType","privStreamId","privAdditionalHeaders","sectionName","setPronunciationAssessmentParams","contentAssessmentTopic","enrichment","pronunciationAssessment","phraseOutput","contentAssessment","topic","dgi","charAt","substring","recognition","os","System","build","platform","SpeechServiceRecognizer","speechRecognizer","privSpeechRecognizer","speechSynthesizer","audioDestination","privSpeechSynthesizer","onSynthesisStarted","synthesisStartEventArgs","SpeechSynthesisEventArgs","SpeechSynthesisResult","SynthesizingAudioStarted","synthesisStarted","onSynthesizing","synthesizing","audioWithHeader","privSynthesisTurn","audioOutputFormat","addHeader","SynthesizingAudio","onSynthesisCancelled","SynthesisCanceled","onSynthesisCompleted","synthesisCompleted","onWordBoundary","wordBoundaryEventArgs","wordBoundary","onVisemeReceived","visemeEventArgs","visemeReceived","onBookmarkReached","bookmarkEventArgs","bookmarkReached","synthesisUri","hostPrefix","avatarEnabled","speakOverride","connectImplOverride","privSessionAudioDestination","SynthesisTurn","SynthesisContext","cancelSynthesisLocal","synthesisContext","privAudioOutputFormat","Speak","isSSML","ssml","buildSsml","startNewSynthesis","sendSynthesisContext","sendSsmlMessage","stopSpeaking","cancelSynthesis","_cancellationReason","isSynthesizing","onStopSynthesizing","_connectionMessage","onServiceResponseMessage","onAudioChunkReceived","metadataList","WordBoundary","SentenceBoundary","onTextBoundaryEvent","SpeechSynthesisWordBoundaryEventArgs","Length","currentTextOffset","currentSentenceOffset","BoundaryType","Bookmark","SpeechSynthesisBookmarkEventArgs","Viseme","onVisemeMetadataReceived","IsLastAnimation","SpeechSynthesisVisemeEventArgs","VisemeId","getAndClearVisemeAnimation","AvatarSignal","SessionEnd","onSessionEnd","constructSynthesisResult","synthesisContextJson","_metadata","_requestId","_audio","_result","_wordBoundaryEventArgs","_visemeEventArgs","_bookmarkEventArgs","synthesisSection","buildSynthesisContext","metadataOptions","bookmarkEnabled","punctuationBoundaryEnabled","SpeechServiceResponse_RequestPunctuationBoundary","sentenceBoundaryEnabled","SpeechServiceResponse_RequestSentenceBoundary","sessionEndEnabled","visemeEnabled","wordBoundaryEnabled","SpeechServiceResponse_RequestWordBoundary","outputFormat","requestAudioFormatString","autoDetection","autoDetectSourceLanguage","SpeechSynthesisEvent","sessionAudioDestinationId","turnAudioDestinationId","privSessionAudioDestinationId","privTurnAudioDestinationId","audioSessionDestinationId","audioTurnDestinationId","privRestAdapter","RestMessageAdapter","getVoicesList","Get","SynthesisAudioMetadata_js_1","SynthesisEvents_js_1","privIsSynthesizing","privIsSynthesisEnded","privBytesReceived","privTextOffset","privNextSearchTextIndex","privSentenceOffset","privNextSearchSentenceIndex","isSynthesisEnded","bytesReceived","audioDuration","privAudioDuration","extraProperties","privWebRTCSDP","getAllReceivedAudio","privReceivedAudio","readAllAudioFromStream","getAllReceivedAudioWithHeader","privReceivedAudioWithHeader","hasHeader","rawText","privRawText","privIsSSML","privAudioOutputStream","PullAudioOutputStreamImpl","privPartialVisemeAnimation","privTurnAudioDestination","SynthesisTriggeredEvent","ConnectingToSynthesisServiceEvent","SynthesisStartedEvent","responseJson","webrtc","connectionString","updateTextOffset","AnimationChunk","audioBuffer","SynthesizingAudioCompleted","animation","isXmlTag","withinXmlTag","idx","SynthesisServiceType","privSynthesisServiceType","Standard","synthesisServiceType","synthesis","TranscriberConnectionFactory","multiaudioRelativeUri","hostDefault","setQueryParams","endpointUrl","wordLevelTimings","RestConfigBase_js_1","ConversationConnectionConfig","privHost","privApiVersion","privClientAppId","defaultLanguageCode","privDefaultLanguageCode","restPath","privRestPath","webSocketPath","privWebSocketPath","transcriptionEventKeys","privTranscriptionEventKeys","ConversationConnectionConfig_js_1","ConversationWebsocketMessageFormatter_js_1","ConversationConnectionFactory","endpointHost","ConversationTranslator_Host","ConversationTranslator_CorrelationId","ConversationWebsocketMessageFormatter","ConversationConnectionMessage","privConversationMessageType","conversationMessageType","privRequestParams","privErrors","createOrJoin","conversationCode","ConversationTranslator_Name","authToken","SpeechServiceAuthorization_Token","throwIfNullOrWhitespace","errMessageRaw","errorMessage","conversation","leave","privRequestCompletionDeferral","completionPromise","ConversationConnectionMessage_js_1","ConversationRequestSession_js_1","ConversationTranslatorEventArgs_js_1","ConversationTranslatorInterfaces_js_1","ConversationServiceAdapter","conversationServiceConnector","privConnectionConfigPromise","privLastPartialUtteranceId","privConversationServiceConnector","privConversationAuthentication","receiveConversationMessageOverride","conversationConnectImpl","privConversationRequestSession","ConversationRequestSession","privConversationConnectionFactory","privConversationIsDisposed","sendMessageAsync","ConversationTranslationCanceledEventArgs","sendFinal","commandPayload","CommandResponsePayload","command","participantsPayload","ParticipantsListPayloadResponse","participantsResult","participants","p","avatar","displayName","participantId","isHost","ishost","isMuted","ismuted","isUsingTts","usetts","preferredLanguage","locale","participantsListReceived","ParticipantsListEventArgs","roomid","translateTo","profanityFilter","roomProfanityFilter","roomLocked","muteAll","participantUpdateCommandReceived","ParticipantAttributeEventArgs","ConversationTranslatorCommandTypes","setTranslateToLanguages","setProfanityFiltering","setMute","muteAllCommandReceived","MuteAllEventArgs","conversationExpiration","ConversationExpirationEventArgs","setUseTTS","lockRoomCommandReceived","LockRoomEventArgs","changeNickname","joinParticipantPayload","ParticipantPayloadResponse","joiningParticipant","participantJoinCommandReceived","ParticipantEventArgs","leavingParticipant","participantLeaveCommandReceived","authorizationToken","onToken","speechPayload","SpeechResponsePayload","conversationResultReason","TranslatedParticipantSpeech","TranslatingParticipantSpeech","speechResult","ConversationTranslationResult","getTranslations","translations","isFinal","translationReceived","ConversationReceivedTranslationEventArgs","ConversationTranslatorMessageTypes","final","partial","textPayload","TextResponsePayload","textResult","originalText","instantMessage","messageRetrievalPromise","serviceResultTranslations","Translations","translation","StringUtils_js_1","ConversationTranslatorConnectionFactory","convGetter","privConvGetter","isVirtMicArrayEndpoint","convInfo","room","cognitiveSpeechRegion","replacementValues","CTS_VIRT_MIC_PATH","StringUtils","formatString","parsedUrl","searchParams","connFactory","TranslationConnectionFactory","getEndpointUrl","privIsMuted","isLocked","privIsLocked","participant","privParticipant","privKey","privValue","privParticipantId","isRoomLocked","isMuteAll","privRoomId","privSessionToken","privTranslateTo","privProfanityFilter","privRoomProfanityFilter","privIsRoomLocked","privParticipants","privIsMuteAll","privPayload","privCommand","meId","addOrUpdateParticipant","exists","getParticipantIndex","splice","getParticipant","findIndex","find","deleteParticipant","filter","me","keepAlive","participantCommand","translatedMessage","disconnectSession","ejectParticipant","instant_message","joinSession","leaveSession","participantList","roomExpirationWarning","setLockState","setMuteAll","ConversationConnectionFactory_js_1","ConversationServiceAdapter_js_1","fromConfig","speechConfig","audioConfig","ConversationTranslatorRecognizer","Recognizer","serviceConfigImpl","throwIfNull","conversationImpl","privConversation","privProperties","clone","privConnection","Connection","fromRecognizer","privClearTimeout","connected","disconnected","speechRecognitionLanguage","privSpeechRecognitionLanguage","throwIfDisposed","privReco","resetConversationTimeout","closeConnection","disposing","createRecognizerConfig","RecognizerConfig","createServiceRecognizer","PromiseToEmptyCallback","getKeepAlive","deferral","incomingMessage","textContent","binaryContent","ConversationManager_js_1","ConversationManager","ConversationTranslatorRecognizer_js_1","ConversationRecognizerFactory","TranscriberRecognizer_js_1","TranscriberRecognizer","InternalParticipants","privCommandResponse","parseCommandResponse","CommandResponsePayload_js_1","ParticipantResponsePayload_js_1","TranslationResponsePayload_js_1","privParticipantsPayloadResponse","parseListResponse","privParticipantPayloadResponse","parseParticipantResponse","privSpeechResponse","parseSpeechResponse","timestamp","privTextResponse","parseTextResponse","speechTranslationConfig","speechTranslationConfigImpl","audioConfigImpl","privDisposedRecognizer","isMeetingRecognizer","getConversationInfo","conversationInfo","meeting","privMeeting","getMeetingInfo","meetingInfo","IsMeetingRecognizer","startContinuousRecognitionAsync","marshalPromiseToCallbacks","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","pushConversationEvent","reco","sendSpeechEventAsync","pushMeetingEvent","sendMeetingSpeechEventAsync","enforceAudioGating","connectMeetingCallbacks","transcriber","disconnectCallbacks","implRecognizerStop","configImpl","TranscriptionServiceRecognizer","privTranscriberRecognizer","sendTranscriptionStartJSON","sendSpeechEvent","createSpeechEventPayload","createMeetingSpeechEventPayload","MeetingTranscriptionCanceledEventArgs","speechEventJson","eventDict","conversationProperties","attendees","meetingProperties","returnRegionPlaceholder","to","SpeechServiceResponse_TranslationRequestStablePartialResult","voice","TranslationServiceRecognizer","translationRecognizer","privTranslationRecognizer","onConnection","handleTranslationPhrase","translatedPhrase","TranslationRecognitionResult","TranslationRecognitionEventArgs","handleTranslationHypothesis","resultProperties","sendSynthesisAudio","synthEnd","TranslationSynthesisResult","retEvent","TranslationSynthesisEventArgs","canceledResult","TranslationRecognitionCanceledEventArgs","fromSpeechRecognitionResult","confidence","TranslatedSpeech","TranslatingSpeech","VoiceServiceRecognizer","privDeferralMap","DeferralMap","SpeakerAudioSource","operation","handleCreateResponse","handleResultResponse","enrollmentResponse","handleFetchResponse","phraseResponse","handlePhrasesResponse","VoiceProfileEnrollmentResult","enrollmentReasonFrom","enrollment","enrollmentStatus","getId","createProfile","profileType","createProfileDeferral","sendCreateProfile","resetProfile","profile","sendCommonRequest","deleteProfile","retrieveEnrollmentResult","privExpectedProfileId","profileId","getAllProfiles","getActivationPhrases","getPhrasesDeferral","sendPhrasesRequest","enrollProfile","enrollmentDeferral","sendBaseRequest","scenarioFrom","profileCreateRequest","number","VoiceProfileType","TextIndependentIdentification","TextIndependentVerification","profileRequest","maxPageSize","VoiceProfilePhraseResult","passPhraseType","phrases","EnrollingVoiceProfile","profiles","successReason","DeletedVoiceProfile","ResetVoiceProfile","VoiceProfileResult","profileInfo","iProfiles","profileResults","EnrolledVoiceProfile","textMessage","headerBodySplit","parseHeaders","binaryMessage","dataView","headerLength","getInt16","headersString","getInt8","makeHeaders","content","headerBuffer","stringToArrayBuffer","headerInt8Array","Int8Array","payloadInt8Array","bodyInt8Array","headerMatches","match","separatorIndex","setUint8","PlatformEvent_js_1","AudioSourceEvent","AudioStreamNodeEvent","Stream","targetChunkSize","privTargetChunkSize","privNextBufferReadyBytes","bytesCopiedFromBuffer","privNextBufferToWrite","privNextBufferStartTime","bytesToCopy","targetView","sourceView","jsonstring","privJsonResult","jsonString","ConnectionEvent","privReason","privStatusCode","privMessage","privType","statuscode","networkReceivedTimeISO","privNetworkReceivedTime","networkSentTimeISO","privNetworkSentTime","networkSentTime","Guid_js_1","privBody","privMessageType","privSize","privMap","DialogEvent","argumentName","ObjectDisposedError","objectName","privEventListeners","privConsoleListener","privMetadata","eventId","onEventCallback","listener","attachConsoleListener","EventSource_js_1","setEventSource","privInstance","uuid_1","v4","RegExp","List","privSubscriptionIdCounter","privAddSubscriptions","privRemoveSubscriptions","privDisposedSubscriptions","privDisposeReason","privList","item","itemIndex","insertAt","unshift","triggerSubscriptions","removeFirst","removeAt","removeLast","remove","count","removedElements","clear","onAdded","addedCallback","subscriptionId","onRemoved","removedCallback","onDisposed","disposedCallback","seperator","toArray","cloneCopy","any","where","all","select","selectList","filteredList","orderBy","compareFn","orderedArray","sort","orderByDesc","concatArray","subscriptions","OCSPEvent","signature","privSignature","serialNumber","expireTime","privExpireTime","startTime","privStartTime","privExpireTimeString","toLocaleDateString","privStartTimeString","toLocaleTimeString","privName","privEventId","privEventTime","privEventType","PromiseState","PromiseResult","promiseResultEventSource","throwIfError","on","privIsError","privResult","isCompleted","PromiseResultEventSource","setResult","privOnSetResult","setError","privOnSetError","onSetResult","onSetError","privResolve","privReject","privPromise","privState","privPromiseResult","privPromiseResultEvents","privSuccessHandlers","privErrorHandlers","Resolved","executeSuccessCallback","detachHandlers","Rejected","errorHandler","executeErrorCallback","List_js_1","Promise_js_1","SubscriberType","privPromiseStore","privIsDrainInProgress","privIsDisposing","privSubscribers","drain","enqueue","throwIfDispose","deferredSubscriber","Dequeue","peek","Peek","pendingItemProcessor","subs","promiseArray","wrapper","finally","lists","subscriber","dequeuedItem","ConnectionMessage_js_1","getPrototypeOf","actualSampleRate","desiredSampleRate","privActualSampleRate","privDesiredSampleRate","actualAudioFrame","audioFrame","downSampleAudioFrame","audioLength","floatTo16BitPCM","setString","setInt16","srcFrame","srcRate","dstRate","ratio","dstLength","dstFrame","Float32Array","srcOffset","dstOffset","nextSrcOffset","accum","Queue_js_1","privIsWriteEnded","privIsReadEnded","privReaderQueue","isReadEnded","streamChunk","throwIfClosed","replacements","formatted","appendToFormatted","appendToKey","appendFunc","load","scheduledTimeoutFunctions","unhandledRequests","workerUrl","worker","addEventListener","_ref","isCallNotification","timerId","idOrFunc","unhandledTimerId","isClearResponse","random","postMessage","func","performance","loadWorkerTimers","workerTimers","timers","privActivity","AudioFileWriter_js_1","AudioInputStream_js_1","AudioConfig","fromDefaultMicrophoneInput","pcmRecorder","PcmRecorder","AudioConfigImpl","fromMicrophoneInput","fromWavFileInput","FileAudioSource","fromStreamInput","PullAudioInputStreamCallback","PullAudioInputStreamImpl","AudioInputStream","MediaStream","fromDefaultSpeakerOutput","AudioOutputConfigImpl","SpeakerAudioDestination","fromSpeakerOutput","player","fromAudioFileOutput","AudioFileWriter","fromStreamOutput","PushAudioOutputStreamCallback","PushAudioOutputStreamImpl","PushAudioOutputStream","PullAudioOutputStream","def","privDestination","privFd","throwIfNotUndefined","privAudioFormat","headerOffset","privWriteStream","createWriteStream","fd","autoClose","updateHeader","bytesWritten","writeSync","closeSync","createPushStream","PushAudioInputStream","PullAudioInputStream","PushAudioInputStreamImpl","privFormat","privStream","dataBuffer","toBuffer","privCallback","privIsClosed","privBufferSize","transmitBuff","totalBytes","readBuff","pulledBytes","SpeechSynthesisOutputFormat_js_1","formatTag","blockAlign","audioFormatString","priAudioFormatString","priRequestAudioFormatString","priHasHeader","fromSpeechSynthesisOutputFormat","speechSynthesisOutputFormat","SpeechSynthesisOutputFormatToString","speechSynthesisOutputFormatString","AudioFormatTag","MuLaw","Siren","MP3","SILKSkype","PCM","OGG_OPUS","WEBM_OPUS","OPUS","FLAC","ALaw","AMR_WB","G722","privHeader","setUint32","SpeechSynthesisOutputFormat","Raw8Khz8BitMonoMULaw","Riff16Khz16KbpsMonoSiren","Audio16Khz16KbpsMonoSiren","Audio16Khz32KBitRateMonoMp3","Audio16Khz128KBitRateMonoMp3","Audio16Khz64KBitRateMonoMp3","Audio24Khz48KBitRateMonoMp3","Audio24Khz96KBitRateMonoMp3","Audio24Khz160KBitRateMonoMp3","Raw16Khz16BitMonoTrueSilk","Riff16Khz16BitMonoPcm","Riff8Khz16BitMonoPcm","Riff24Khz16BitMonoPcm","Riff8Khz8BitMonoMULaw","Raw16Khz16BitMonoPcm","Raw24Khz16BitMonoPcm","Raw8Khz16BitMonoPcm","Ogg16Khz16BitMonoOpus","Ogg24Khz16BitMonoOpus","Raw48Khz16BitMonoPcm","Riff48Khz16BitMonoPcm","Audio48Khz96KBitRateMonoMp3","Audio48Khz192KBitRateMonoMp3","Ogg48Khz16BitMonoOpus","Webm16Khz16BitMonoOpus","Webm24Khz16BitMonoOpus","Webm24Khz16Bit24KbpsMonoOpus","Raw24Khz16BitMonoTrueSilk","Raw8Khz8BitMonoALaw","Riff8Khz8BitMonoALaw","Audio16Khz16Bit32KbpsMonoOpus","Audio24Khz16Bit48KbpsMonoOpus","Audio24Khz16Bit24KbpsMonoOpus","Raw22050Hz16BitMonoPcm","Riff22050Hz16BitMonoPcm","Raw44100Hz16BitMonoPcm","Riff44100Hz16BitMonoPcm","AmrWb16000Hz","G72216Khz64Kbps","intView","privLastChunkView","tmpBuffer","getWaveFormat","samplesPerSecond","isWavFormat","setUint16","AudioContext","webkitAudioContext","getSupportedConstraints","audioContext","gainNode","autoUpdateBufferTimer","init","playAudioSample","newAudioData","ensureInitializedContext","audioData","formatAudioData","newSamplesData","samples","stopAudio","clearInterval","timerPeriod","setInterval","updateAudioBuffer","createGain","gain","currentTime","formatArrayBuffer","Int16Array","Int32Array","maxValue","float32Data","bufferSource","createBufferSource","frameCount","channel","channelOffset","playAudio","decodeAudioData","newBuffer","AudioFormatToMimeType","audioDestinationId","privPlaybackStarted","privAppendingToBuffer","privMediaSourceOpened","privIsPaused","privAudioBuffer","updateSourceBuffer","privSourceBuffer","handleSourceBufferUpdateEnd","receivedAudio","audioBlob","privAudio","notifyPlayback","onAudioEnd","mimeType","MediaSource","isTypeSupported","Audio","privMediaSource","onsourceopen","addSourceBuffer","onupdate","onupdateend","onupdatestart","volume","mute","muted","unmute","pause","play","internalAudio","sourceBufferAvailable","binary","appendBuffer","canEndStream","endOfStream","onAudioStart","onended","updating","LanguageIdMode_js_1","AutoDetectSourceLanguageConfig","LanguageIdMode","AtStart","fromOpenRange","AutoDetectSourceLanguagesOpenRangeOptionName","fromLanguages","throwIfArrayEmptyOrWhitespace","fromSourceLanguageConfigs","configs","autoConfig","langs","Continuous","AutoDetectSourceLanguageResult","languageDetectionConfidence","privLanguage","privLanguageDetectionConfidence","fromResult","fromConversationTranscriptionResult","privCustomized","AvatarVideoFormat","privBackgroundColor","privBackgroundImage","privRemoteIceServers","AvatarEventTypes","audioOffset","description","privOffset","privDescription","SpeechSynthesisConnectionFactory_js_1","Synthesizer_js_1","AvatarSynthesizer","Synthesizer","SpeechSynthesisConnectionFactory","implCommonSynthesizeSetup","privAdapter","startAvatarAsync","peerConnection","privIceServers","getConfiguration","iceGatheringDone","onicegatheringstatechange","iceGatheringState","onicecandidate","candidate","sdp","createOffer","setLocalDescription","localDescription","speak","SynthesisResult","sdpAnswerString","atob","sdpAnswer","RTCSessionDescription","setRemoteDescription","speakTextAsync","r","speakSsmlAsync","stopSpeakingAsync","synthesisRequestQueue","stopAvatarAsync","privDisposed","createSynthesisAdapter","createRestSynthesisAdapter","_authentication","_synthesizerConfig","createSynthesizerConfig","deferredResult","SynthesisRequest","privSynthesizing","adapterSpeak","setCropRange","AvatarWebRTCConnectionResult","SDPAnswer","privSDPAnswer","DialogServiceConfig_js_1","BotFrameworkConfig","DialogServiceConfigImpl","fromSubscription","subscription","botId","botFrameworkConfig","fromAuthorizationToken","fromHost","resolvedHost","fromEndpoint","CancellationDetailsBase_js_1","CancellationDetails","CancellationDetailsBase","RecognitionResult","simpleSpeech","privErrorDetails","privErrorCode","ErrorCode","CancellationEventArgsBase","recoBase","internalData","privInternalData","setupEvents","fromSynthesizer","synthesizer","synthBase","openConnection","setMessageProperty","propertyName","propertyValue","success","privEventListener","ConnectionEventArgs","messageSent","ConnectionMessageEventArgs","ConnectionMessageImpl","messageReceived","privServiceEventListener","receivedServiceMessage","ServiceEventArgs","PropertyCollection_js_1","PropertyId_js_1","privConnectionMessage","isTextMessage","isBinaryMessage","TextMessage","param","throwIfNullOrTooLong","maxLength","throwIfNullOrTooShort","minLength","throwIfFileDoesNotExist","CancellationEventArgsBase_js_1","CustomCommandsConfig","customCommandsConfig","Diagnostics","SetLoggingLevel","logLevel","privListener","ConsoleLoggingListener","StartConsoleOutput","StopConsoleOutput","SetLogOutputPath","onLogOutput","privSpeechConfig","SpeechConfigImpl","setProxy","setServiceProperty","DialogConnectorFactory_js_1","DialogServiceConnector","dialogConfig","dialogServiceConfigImpl","isTurnComplete","buildAgentConfig","listenOnceAsync","retPromise","callbackHolder","sendActivityAsync","errCb","commType","Conversation_Agent_Connection_Id","Conversation_Conversation_Id","fromId","Conversation_From_Id","ttsAudioFormat","AudioConfig_js_1","CancellationReason_js_1","PullAudioInputStreamCallback_js_1","PushAudioOutputStreamCallback_js_1","KeywordRecognitionModel_js_1","KeywordRecognitionModel","SessionEventArgs_js_1","RecognitionEventArgs_js_1","OutputFormat_js_1","IntentRecognitionEventArgs_js_1","RecognitionResult_js_1","SpeechRecognitionResult_js_1","IntentRecognitionResult_js_1","LanguageUnderstandingModel_js_1","LanguageUnderstandingModel","SpeechRecognitionEventArgs_js_1","MeetingTranscriptionEventArgs","SpeechRecognitionCanceledEventArgs_js_1","TranslationRecognitionEventArgs_js_1","TranslationSynthesisEventArgs_js_1","TranslationRecognitionResult_js_1","TranslationSynthesisResult_js_1","ResultReason_js_1","SpeechConfig_js_1","SpeechConfig","SpeechTranslationConfig_js_1","SpeechTranslationConfig","SpeechTranslationConfigImpl","Recognizer_js_1","SpeechRecognizer_js_1","SpeechRecognizer","IntentRecognizer_js_1","IntentRecognizer","VoiceProfileType_js_1","TranslationRecognizer_js_1","TranslationRecognizer","Translations_js_1","NoMatchReason_js_1","NoMatchReason","NoMatchDetails_js_1","NoMatchDetails","TranslationRecognitionCanceledEventArgs_js_1","IntentRecognitionCanceledEventArgs_js_1","CancellationDetails_js_1","CancellationErrorCodes_js_1","ConnectionEventArgs_js_1","ServiceEventArgs_js_1","Connection_js_1","PhraseListGrammar_js_1","PhraseListGrammar","BotFrameworkConfig_js_1","CustomCommandsConfig_js_1","DialogServiceConnector_js_1","ActivityReceivedEventArgs_js_1","TurnStatusReceivedEventArgs_js_1","ServicePropertyChannel_js_1","ServicePropertyChannel","ProfanityOption_js_1","ProfanityOption","BaseAudioPlayer_js_1","BaseAudioPlayer","ConnectionMessageEventArgs_js_1","VoiceProfile_js_1","VoiceProfile","VoiceProfileEnrollmentResult_js_1","VoiceProfileEnrollmentCancellationDetails","VoiceProfileResult_js_1","VoiceProfileCancellationDetails","VoiceProfilePhraseResult_js_1","VoiceProfileClient_js_1","VoiceProfileClient","SpeakerRecognizer_js_1","SpeakerRecognizer","SpeakerIdentificationModel_js_1","SpeakerIdentificationModel","SpeakerVerificationModel_js_1","SpeakerVerificationModel","AutoDetectSourceLanguageConfig_js_1","AutoDetectSourceLanguageResult_js_1","SourceLanguageConfig_js_1","SourceLanguageConfig","SpeakerRecognitionResult_js_1","SpeakerRecognitionResultType","SpeakerRecognitionCancellationDetails","ConversationParticipantsChangedEventArgs","ConversationTranslationEventArgs","ConversationTranslator","ConversationTranscriber","Meeting","MeetingTranscriber","Participant","ParticipantChangedReason","User","SpeechSynthesizer_js_1","SpeechSynthesizer","SynthesisResult_js_1","SpeechSynthesisResult_js_1","SpeechSynthesisEventArgs_js_1","SpeechSynthesisWordBoundaryEventArgs_js_1","SpeechSynthesisBookmarkEventArgs_js_1","SpeechSynthesisVisemeEventArgs_js_1","SpeechSynthesisBoundaryType_js_1","SpeechSynthesisBoundaryType","SynthesisVoicesResult_js_1","SynthesisVoicesResult","VoiceInfo_js_1","VoiceInfo","SpeakerAudioDestination_js_1","ConversationTranscriptionCanceledEventArgs_js_1","MeetingTranscriptionCanceledEventArgs_js_1","PronunciationAssessmentGradingSystem_js_1","PronunciationAssessmentGradingSystem","PronunciationAssessmentGranularity_js_1","PronunciationAssessmentGranularity","PronunciationAssessmentConfig_js_1","PronunciationAssessmentConfig","PronunciationAssessmentResult_js_1","PronunciationAssessmentResult","AvatarConfig_js_1","AvatarConfig","AvatarEventArgs_js_1","AvatarSynthesizer_js_1","AvatarVideoFormat_js_1","Coordinate","AvatarWebRTCConnectionResult_js_1","Diagnostics_js_1","privIntentId","privAddedIntents","privDisposedIntentRecognizer","recognizeOnceAsync","buildSpeechContext","Intent","recognizeOnceAsyncImpl","startKeywordRecognitionAsync","stopKeywordRecognitionAsync","addIntent","simplePhrase","addIntentWithLanguageModel","appId","AddedLmIntent","addAllIntents","errorCb","audioImpl","refGrammers","addedLmIntent","grammer","provider","fromFile","fileName","fromStream","hostname","langModelImp","LanguageUnderstandingModelImpl","firstDot","lastSegment","fromAppId","NotRecognized","InitialBabbleTimeout","recogBase","privGrammerBuilder","addPhrases","referenceText","gradingSystem","FivePoint","granularity","Phoneme","enableMiscue","PronunciationAssessment_ReferenceText","PronunciationAssessment_GradingSystem","PronunciationAssessment_Granularity","PronunciationAssessment_EnableMiscue","PronunciationAssessment_Json","updateJson","PronunciationAssessment_Params","applyTo","privContentAssessmentTopic","phonemeAlphabet","privPhonemeAlphabet","enableMiscueString","nbestPhonemeCount","privNBestPhonemeCount","enableProsodyAssessment","privEnableProsodyAssessment","enableContentAssessmentWithTopic","paramsJson","dimension","ContentAssessmentResult","detailResult","privPronJson","grammarScore","ContentAssessment","GrammarScore","vocabularyScore","VocabularyScore","topicScore","TopicScore","accuracyScore","PronunciationAssessment","AccuracyScore","pronunciationScore","PronScore","completenessScore","CompletenessScore","fluencyScore","FluencyScore","prosodyScore","ProsodyScore","contentAssessmentResult","privKeys","privValues","keyToUse","clonedMap","mergeTo","destinationCollection","privResultId","privText","privDuration","privJson","implCommonRecognizerSetup","telemetryEnabled","enableTelemetry","enabled","osPlatform","osName","osVersion","userAgent","appVersion","OS","getAuthFromProperties","CognitiveSubscriptionKeyAuthentication","privEventName","privEndpointId","fromLanguage","privVoiceProfiles","privProfileIds","fromProfiles","voiceProfileIds","Identify","Verify","privProfileId","identificationResult","identifiedProfile","privScore","score","RecognizedSpeakers","verificationResult","recognitionResult","SpeakerRecognitionConnectionFactory","privAudioConfigImpl","privDisposedSpeakerRecognizer","recognizeSpeakerOnceAsyncImpl","privVoiceProfile","fromProfile","voiceProfile","TextDependentVerification","speechImpl","href","hostName","endPoint","currentProperties","setProfanity","enableAudioLogging","requestWordLevelTimestamps","enableDictation","speechSynthesisLanguage","SpeechServiceConnection_SynthLanguage","speechSynthesisVoiceName","SpeechServiceConnection_SynthVoice","speakerId","privSpeakerId","speechConfigImpl","FromConfig","autoDetectSourceLanguageConfig","privAudioOffset","privAudioData","visemeId","privVisemeId","privAnimation","wordLength","textOffset","boundaryType","privWordLength","privBoundaryType","speakImpl","getVoicesAsync","getVoices","SynthesisRestAdapter","IsSsml","dataStream","Locale","privSpeechProperties","addTargetLanguage","voiceName","VoicesListRetrieved","privVoices","voices","languageToDefaultVoice","XMLEncode","SynthesizerConfig","createConversationAsync","arg2","arg3","arg4","ConversationImpl","onConnected","privIsConnected","privConversationTranslator","onDisconnected","onCanceled","onParticipantUpdateCommandReceived","updatedParticipant","translateToLanguages","participantsChanged","Updated","toParticipant","onLockRoomCommandReceived","onMuteAllCommandReceived","toParticipants","onParticipantJoinCommandReceived","newParticipant","JoinedConversation","onParticipantLeaveCommandReceived","ejectedParticipant","LeftConversation","onTranslationReceived","textMessageReceived","onParticipantsListReceived","privRoom","privIsReady","changeNicknameAsync","onConversationExpiration","privConversationId","privManager","Masked","hostNickname","privConfig","privTextMessageMaxLength","privConversationRecognizer","isMutedByHost","isConnected","transcriberRecognizer","convId","part","props","canSend","canSendAsHost","conversationTranslator","handleError","handleCallback","startConversationAsync","addParticipantAsync","addParticipantImplAsync","joinConversationAsync","cognitiveSpeechAuthToken","deleteConversationAsync","deleteConversationImplAsync","endConversationAsync","endConversationImplAsync","lockConversationAsync","getLockCommand","muteAllParticipantsAsync","getMuteAllCommand","muteParticipantAsync","userId","getMuteCommand","removeParticipantAsync","removeParticipantImplAsync","getEjectCommand","unlockConversationAsync","unmuteAllParticipantsAsync","unmuteParticipantAsync","sendTextMessageAsync","getMessageCommand","setTranslatedLanguagesAsync","getSetTranslateToLanguagesCommand","getChangeNicknameCommand","connectTranscriberRecognizer","includeHost","privAudioConfig","expirationTime","privExpirationTime","startTranscribingAsync","stopTranscribingAsync","originalLanguage","privOrigLang","originalLang","ConversationTranslatorConnectionFactory_js_1","Conversation_js_1","SpeechState","ConversationTranslationRecognizer","translator","privSpeechState","Inactive","privTranslator","tr","cancelSpeech","fireCancelEvent","newState","onCancelSpeech","ConversationCommon","privIsSpeaking","privPlaceholderKey","privPlaceholderRegion","canSpeak","privCTRecognizer","param1","param2","param3","privSpeechTranslationConfig","propertyIdsToCopy","UriQueryParameter","leaveConversationAsync","connectTranslatorRecognizer","startContinuousRecognition","ConversationCommon_js_1","ConversationExpirationEventArgs_js_1","ConversationParticipantsChangedEventArgs_js_1","ConversationTranslationCanceledEventArgs_js_1","ConversationTranslationEventArgs_js_1","ConversationTranslationResult_js_1","ConversationTranslator_js_1","ConversationTranscriber_js_1","IParticipant_js_1","ParticipantChangedReason_js_1","Meeting_js_1","MeetingImpl","MeetingTranscriber_js_1","ConversationTranscriptionResult_js_1","privUserId","privAvatar","privDisplayName","privIsHost","privIsUsingTts","privPreferredLanguage","privVoice","From","createMeetingAsync","meetingId","meetingImpl","startMeetingAsync","joinMeetingAsync","deleteMeetingAsync","deleteMeetingImplAsync","endMeetingAsync","endMeetingImplAsync","lockMeetingAsync","unlockMeetingAsync","leaveMeetingAsync","sessionid","privCancelReason","privTranslations","privDisposedTranslationRecognizer","removeTargetLanguage","updateLanguages","conn","TurnStatusPayload_js_1","turnStatus","privTurnStatus","SynthesisVoiceGender","SynthesisVoiceType","GENDER_LOOKUP","Neutral","Male","Female","privStyleList","privLocale","privShortName","ShortName","privLocaleName","LocaleName","DisplayName","privLocalName","LocalName","privVoiceType","VoiceType","OnlineStandard","OnlineNeural","privGender","Gender","StyleList","privSampleRateHertz","SampleRateHertz","ExtendedPropertyMap","privExtendedPropertyMap","privWordsPerMinute","WordsPerMinute","SecondaryLocaleList","privSecondaryLocaleList","RolePlayList","privRolePlayList","shortName","localName","localeName","gender","voiceType","styleList","sampleRateHertz","extendedPropertyMap","wordsPerMinute","secondaryLocaleList","rolePlayList","privProfileType","VoiceProfileConnectionFactory","privVoiceAdapter","privDisposedVoiceAdapter","createProfileAsync","retrieveEnrollmentResultAsync","getAllProfilesAsync","getActivationPhrasesAsync","enrollProfileAsync","deleteProfileAsync","resetProfileAsync","getResult","privDetails","enrollmentsCount","enrollmentsLength","enrollmentResultDetails","FromIdentificationProfileList","results","getIdentificationDetails","FromVerificationProfileList","getVerificationDetails","parseFloat","audioSpeechLength","enrollmentsSpeechLength","identificationProfileId","remainingEnrollmentsSpeechLength","verificationProfileId","remainingEnrollmentsCount","remainingEnrollments","phraseArray","assertPath","normalizeStringPosix","allowAboveRoot","lastSegmentLength","lastSlash","dots","lastSlashIndex","posix","cwd","resolvedPath","resolvedAbsolute","process","normalize","isAbsolute","trailingSeparator","joined","relative","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","_makeLong","dirname","hasRoot","matchedSlash","basename","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","pathObject","sep","root","base","_format","delimiter","win32","_nil","_parse","_stringify","_v","_v2","_v3","_v4","_validate","_version","_interopRequireDefault","__esModule","getOutputLength","inputLength8","safeAdd","lsw","md5cmn","q","t","cnt","md5ff","md5gg","md5hh","md5ii","_default","unescape","length32","hexTab","hex","md5ToHexEncodedArray","olda","oldb","oldc","oldd","wordsToMd5","length8","Uint32Array","bytesToWords","randomUUID","crypto","uuid","v","getRandomValues","rnds8","f","z","ROTL","K","H","l","N","ceil","M","W","T","unsafeStringify","byteToHex","_rng","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","DNS","hashfunc","generateUUID","namespace","_namespace","stringToBytes","_native","rnds","_sha","_regex","test"],"sourceRoot":""}