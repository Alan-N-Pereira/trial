{"version":3,"file":"static/js/830.a99c003c.chunk.js","mappings":"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","sources":["pages/app/header/index.tsx","pages/app/Modal.tsx","pages/app/main/ErrorPanel.tsx","pages/app/main/MicrophoneButton.tsx","pages/app/main/index.tsx","pages/app/spoken/index.tsx","pages/app/about/index.tsx","pages/app/help/index.tsx","pages/app/index.tsx","services/azure/use-voice-recognition.js","services/electron-ipc.js","services/global-context.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport Spoken from 'spoken'\nimport ReactTooltip from 'react-tooltip'\nimport { GlobalContext } from '../../../services/global-context'\n\nexport default function Header() {\n    const [open, setOpen] = useState(false)\n    const [langs, setLangs] = useState<{ lang: any, langName: any}[]>([])\n    const context = React.useContext(GlobalContext)\n    const selectedEditor = (context.editorState || []).find((a: any) => (a.status === 'ON' && a.current)) || {}\n    const [appVersion, setAppVersion] = React.useState(window.electronShellInfo?.appVersion)\n\n    React.useEffect(() => {\n        const langs_ = []\n\n        for (const module of Spoken.modules) {\n            for (const item of Object.values(module.grammar)) {\n                langs_.push({ lang: item[0].value.lang, langName: item[0].value.langName })\n            }\n        }\n\n        if (appVersion == null) {\n            fetch(window.__HOME_PAGE__ + '/manifest.json').then(res => res.json()).then(manifest => {\n                setAppVersion(manifest.version ? manifest.version : appVersion)\n            })\n        }\n\n        setLangs(langs_)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (context.mode === 'widget') return null\n\n    return (\n        <header>\n            <div className=\"menu\">\n                <div className=\"icon\" onClick={() => setOpen(!open)}>\n                    ☰\n                </div>\n            </div>\n            <div className={`menu-items ${open ? 'open' : ''}`}>\n                <div className=\"about\">\n                    <div className=\"title\">\n                        Speech2Code\n                        <figure onClick={() => context.toggleDebug()}>\n                            <img src={window.__HOME_PAGE__ + '/logo48x48.png'} width=\"25\" height=\"25\" alt=\"Speech2Code logo\"/>\n                        </figure>\n                    </div>\n                </div>\n                <ul>\n                    <li>\n                        <a href=\"#/\" onClick={() => setOpen(!open)}>\n                            <span>{i18n(context.language)('Home')}</span>\n                        </a>\n                    </li>\n                    <li><a href=\"#/spoken/\" onClick={() => setOpen(!open)}>{i18n(context.language)('Modules')}</a></li>\n                    <li><a href=\"#/help/\" onClick={() => setOpen(!open)}>{i18n(context.language)('Help')}</a></li>\n                    <li>\n                        <a href=\"#/about/\" onClick={() => setOpen(!open)}>\n                            <span>{i18n(context.language)('About')}</span>\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"divider\"></div>\n                <div className=\"settings\">\n                    <div className=\"title\">\n                        {i18n(context.language)('Settings')}\n                    </div>\n                    <div className=\"settings-list\">\n                        <div className=\"setting\">\n                            <label>\n                                {i18n(context.language)('Current editor')}:\n                                <span\n                                    data-tip={i18n(context.language)('current_editor_exp')}\n                                >\n                                    <i className=\"fa fa-question-circle\" />\n                                </span>\n                            </label>\n                            <select\n                                className=\"input\"\n                                value={selectedEditor?.name || ''}\n                                onChange={(evt: any) => context.changeEditor(evt.target.value)}\n                            >\n                                {!selectedEditor.name && (\n                                    <option label=\" \"></option>\n                                )}\n                                {(context.editorState || []).map((item: any) =>\n                                    <option\n                                        value={item.name}\n                                        disabled={item.status !== 'ON' ? true : false}\n                                        key={item.name}\n                                    >\n                                        {item.name}\n                                    </option>\n                                )}\n                            </select>\n                        </div>\n                        <div className=\"setting\">\n                            <label>\n                                {i18n(context.language)('Input language')}:\n                                <span\n                                    data-tip={i18n(context.language)('In what language are the voice commands be said ?')}\n                                >\n                                    <i className=\"fa fa-question-circle\" />\n                                </span>\n                            </label>\n                            <select\n                                className=\"input\"\n                                value={context.language || ''}\n                                onChange={(evt: any) => context.changeLanguage(evt.target.value)}\n                            >\n                                {langs.map((item) =>\n                                    <option\n                                        value={item.lang}\n                                        key={item.lang}\n                                    >\n                                        {item.langName}\n                                    </option>\n                                )}\n                            </select>\n                        </div>\n                        <div className=\"setting\">\n                            <label>\n                                {i18n(context.language)('Enable debug')}:\n                                <span\n                                    data-tip={i18n(context.language)('Displays a text box where you can write commands instead of saying it')}\n                                >\n                                    <i className=\"fa fa-question-circle\" />\n                                </span>\n                            </label>\n                            <div>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={context.__debug}\n                                    name=\"debug\"\n                                    onChange={() => context.toggleDebug()}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"setting\">\n                            <label>\n                                Client version: <b><VersionLink version={appVersion} /></b>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className={`menu-items-shade ${open ? 'open' : ''}`} onClick={() => setOpen(!open)}></div>\n            <div className=\"brand\">\n                <div className=\"title\"><i className=\"fa fa-angle-right\"></i> ./speech-to-code</div>\n            </div>\n            <ReactTooltip multiline effect=\"solid\" className=\"custom-tooltip\" />\n        </header>\n    )\n}\n\nfunction VersionLink(props: { version?: string }): JSX.Element {\n    const { version } = props\n\n    if (version == null) return <React.Fragment>error ??</React.Fragment>\n\n    return (\n        <a target=\"_blank\" rel=\"noreferrer\" href={`https://github.com/pedrooaugusto/speech-to-code/releases/tag/v${version}`}>\n            {version}\n        </a>\n    )\n}\n\nconst texts: Record<string, Record<string, any>> = {\n    'en-US': {\n        'current_editor_exp': 'Which code editor is Speech2Code controlling ? <br/><br/>Preferred option is Visual Studio Code.'\n    },\n    'pt-BR': {\n        'Help': 'Ajuda',\n        'Modules': 'Módulos',\n        'Home': 'Início',\n        'Article': 'Artigo',\n        'About': 'Sobre',\n        'Settings': 'Configurações',\n        'Current editor': 'Editor atual',\n        'Input language': 'Linguagem de entrada',\n        'Enable debug': 'Ativar depuração',\n        'Displays a text box where you can write commands instead of saying it':\n            'Exibe uma caixa de texto onde você pode escrever comandos ao invés de dizêlos',\n        'In what language are the voice commands be said ?': 'Em que idioma os comandos de voz serão ditos ?',\n        'current_editor_exp':\n            'Qual é o editor de código que está sendo controlado pelo Speech2Code ? <br/><br/>A opção preferida é o Visual Studio Code.'\n    }\n}\n\nconst i18n = (lang: string) => (textId: string) => texts[lang][textId] || textId","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { GlobalContext as GC } from '../../services/global-context'\n\nexport default function Modal({\n    isOpen,\n    children\n}: {\n    isOpen: boolean\n    children: React.ReactNode\n}) {\n    if (!isOpen) return null\n\n    const el = document.querySelector('#modal .content')\n\n    if (!el) return null\n\n    return ReactDOM.createPortal(isOpen ? children : null, el)\n}\n\nexport const ModalSection = () => {\n    const { toggleShade, shadeIsOpen } = React.useContext(GC)\n    const ref = React.useRef<HTMLDivElement>(null)\n\n    React.useEffect(() => {\n        let parent = ref.current?.parentElement\n\n        if (!parent || !parent.classList.contains('window-content')) parent = window.document.body\n\n        parent.style.overflow = shadeIsOpen ? 'hidden' : ''\n\n    }, [shadeIsOpen])\n\n    return (\n        <div id=\"modal\" ref={ref}>\n            <div className={`shade ${shadeIsOpen ? 'open' : ''}`} onClick={() => toggleShade()}></div>\n            <div className=\"content\"></div>\n        </div>\n    )\n}","import React from 'react'\nimport Modal from '../Modal'\nimport { GlobalContext } from '../../../services/global-context'\n\ninterface ErrorPanelProps {\n\tshow: boolean\n\tmainTitle: string\n\ttitle: string\n\tsubTitle: string\n\tbody: string | JSX.Element\n\tonShowDetails: () => void\n\tshowDetails: boolean\n}\n\nexport default function ErrorPanel(props: ErrorPanelProps) {\n\tif (!props.show) return null\n\n    return (\n\t\t<React.Fragment>\n\t\t\t<div className=\"panel error\" onClick={() => props.onShowDetails()} title=\"Click for more information\">\n\t\t\t\t<div>{props.mainTitle}</div>\n\t\t\t</div>\n\t\t\t<Modal isOpen={props.showDetails}>\n\t\t\t\t<div className=\"modal-content lost-connection\">\n\t\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t\t<div className=\"main-header\">\n\t\t\t\t\t\t\t<h2>{props.title}</h2>\n\t\t\t\t\t\t\t<div>{props.subTitle}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"divider\"></div>\n\t\t\t\t\t\t{typeof props.body === 'string' && (<div className=\"body\" dangerouslySetInnerHTML={{ __html: props.body as string }} />)}\n\t\t\t\t\t\t{typeof props.body !== 'string' && (<div className=\"body\">{props.body}</div>)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Modal>\n\t\t</React.Fragment>\n    )\n}\n\nexport function LostConnectionError() {\n\tconst context = React.useContext(GlobalContext)\n\t\n\treturn (\n\t\t<ErrorPanel\n\t\t\tshow={!(context.connectedToVSCode || context.mode === 'widget')}\n\t\t\tmainTitle={i18n(context.language)('no-connection-1')()}\n\t\t\ttitle={i18n(context.language)('no-connection-2')()}\n\t\t\tsubTitle={i18n(context.language)('no-connection-sub')()}\n\t\t\tbody={i18n(context.language)('no-connection-reason')()}\n\t\t\tshowDetails={context.shadeIsOpen}\n\t\t\tonShowDetails={context.toggleShade}\n\t\t/>\n\t)\n}\n\nconst SpokenLink = () => (\n\t<a\n\t\trel=\"noreferrer\"\n\t\thref=\"https://github.com/pedrooaugusto/speech-to-code/tree/main/spoken-vscode-driver\"\n\t\ttarget=\"_blank\"\n\t>\n\t\tSpoken\n\t</a>\n)\n\nconst texts: Record<string, Record<string, any>> = {\n    'en-US': {\n\t\t'no-connection-1': () => 'Could not connect to Visual Studio Code!',\n\t\t'no-connection-2': () => \"Couldn't connect to VSCode\",\n\t\t'no-connection-sub': () => 'Speech2Code depends on a connection with Visual Studio Code',\n\t\t'no-connection-reason': () => (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className=\"label\">Could not connect to Visual Studio Code, possible reasons include:</div>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Visual Studio Code is not installed.</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<SpokenLink />, a required VSCode extension is not installed.\n\t\t\t\t\t\tSpeech2Code tries to automatically install this extension.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tVisual Studio Code is not running. You first should open VSCode and then open\n\t\t\t\t\t\tthis application (in that sequence!).\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</React.Fragment>\n\t\t)\n    },\n    'pt-BR': {\n\t\t'no-connection-1': () => 'Erro ao conectar-se com o Visual Studio Code!',\n\t\t'no-connection-2': () => \"Falha ao conectar-se com o VSCode\",\n\t\t'no-connection-sub': () => 'Speech2Code depende de uma conexão com o Visual Studio Code',\n\t\t'no-connection-reason': () => (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className=\"label\">Falha ao conectar-se com o Visual Studio Code, possíveis razões incluem:</div>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Visual Studio Code não esta instalado.</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<SpokenLink />, uma extensão do VSCode obrigatória para o uso\n\t\t\t\t\t\tdesse programa não esta instalada. Speech2Code tenta instalar essa extensão automaticamente.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tO Visual Studio Code não esta aberto. Você deve primeiro abrir o VSCode e então abrir\n\t\t\t\t\t\teste programa (nessa sequência!).\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</React.Fragment>\n\t\t)\n    }\n}\n\nconst i18n = (lang: string) => (textId: string) => texts[lang][textId]","import React, { MouseEvent, useEffect } from 'react'\n\nexport function MicrophoneButton(\n    props: {\n        recording: boolean\n        active: boolean\n        toggleRecording: () => void\n        language: string\n        changingLanguage: boolean\n        setError: (error: any) => void\n        mode?: 'modalx' | 'widget'\n        onOpen?: Function\n    }\n) {\n\n    useEffect(() => {\n        const canvas = document.getElementById('micCanvas') as HTMLCanvasElement\n        const ctx = canvas.getContext('2d')\n        let audioContext: AudioContext | null = null\n        let streamSource: MediaStreamAudioSourceNode | null = null\n        let processor: ScriptProcessorNode | null = null\n\n        if (ctx == null || props.mode === 'widget')\n            return\n\n        drawCircle(ctx, canvas)\n\n        function draw(data: AudioProcessingEvent) {\n            if (document.hidden) return\n\n            window.requestAnimationFrame(() => {\n                if (ctx == null)\n                    return\n\n                ctx!.clearRect(0, 0, canvas.width, canvas.height)\n\n                drawCircle(ctx, canvas)\n                drawWaveform(canvas.width, canvas.height, ctx, data.inputBuffer)\n            })\n        }\n\n        navigator.mediaDevices.getUserMedia({\n            audio: {\n                echoCancellation: !false,\n                noiseSuppression: false,\n                autoGainControl: false\n            },\n            video: false\n        }).then(rawStream => {\n            audioContext = new AudioContext()\n            // audioContext.suspend()\n            streamSource = audioContext.createMediaStreamSource(rawStream)\n            processor = audioContext.createScriptProcessor(2 ** 12, 1, 1)\n\n            processor.connect(audioContext.destination)\n            streamSource.connect(processor)\n\n            processor.addEventListener('audioprocess', draw)\n\n            return rawStream\n        }).catch(err => {\n            // alert('Speech2Code could not access your microphone.\\n\\nErr: '+err.message + '.')\n            props.setError({\n                __error: err,\n                mainTitle: 'Could not access your microphone',\n                title: 'Microphone access is not required but recomended',\n                subTitle: 'Speech2Code? More like Text2Code!',\n                body: `Without microphone access you gonna have to <b>write</b> your voice commands on the debug option below.<br/><br/>\n                This app cannot use the microphone because of <i>${err}</i>`\n            })\n            console.error(err)\n        })\n\n        return () => {\n            if (!!audioContext) {\n                processor?.removeEventListener('audioprocess', draw)\n                streamSource?.disconnect(processor as ScriptProcessorNode)\n                processor?.disconnect(audioContext.destination)\n                audioContext.close()\n            }\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    // @ts-ignore Yeah I know, I know...\n    window.recording = props.recording\n\n    const disabled = !props.active || props.changingLanguage\n\n    const size = props.mode === 'widget' ? 50 : 122\n\n    const onClickMic = (e: MouseEvent) => {\n        if (disabled) return null\n        if (props.mode === 'widget') return props.onOpen?.()\n\n        return props.toggleRecording()\n    }\n\n    return (\n        <div\n            className={`record ${props.recording ? 'on' : 'off'} ${disabled ? 'error' : ''}`}\n            style={{'--size': size + 'px'} as any}\n        >\n            <div\n                className={`btn ${disabled ? 'disabled' : ''}`}\n                onClick={onClickMic}\n                title={\n                    disabled\n                        ? `Something is wrong, click on the red panel above for more details.`\n                        : `Click on it to ${props.recording ? 'stop' : 'start'} recording!`\n                }\n            >\n                {!props.changingLanguage && <i className=\"fa fa-microphone\" />}\n                {props.changingLanguage && <i className=\"fa fa-circle-o-notch fa-spin fa-3x\"></i>}\n                <canvas id=\"micCanvas\" width={size} height={size}></canvas>\n            </div>\n            <span className=\"info\">\n                {i18n(props.language)(props.recording ? 'rec' : 'not-rec')()}\n            </span>\n        </div>\n    )\n}\n\nfunction drawCircle(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) {\n    // @ts-ignore Yeah, I know...\n    const rec = window.recording\n\n    ctx.fillStyle = rec ? '#ef5350' : '#3da2de'\n    ctx.strokeStyle = rec ? '#ef5350' : '#3da2de'\n    ctx.lineWidth = 1\n    ctx.beginPath()\n    ctx.arc(canvas.width / 2, canvas.height / 2, (canvas.width / 2) - 2, 0, 2 * Math.PI)\n    ctx.stroke()\n    ctx.closePath()\n}\n\nfunction drawWaveform(width: number, height: number, context: CanvasRenderingContext2D, buffer: AudioBuffer) {\n    width = width / 3\n    const data = buffer.getChannelData(0)\n    const step = Math.ceil(data.length / width)\n    const amp = height * 0.5\n    for (let i = 0; i < width; i++) {\n        let min = 1.0\n        let max = -1.0\n        for (var j = 0; j < step; j++) {\n            var datum = data[((i) * step) + j]\n            if (datum < min)\n                min = datum\n            if (datum > max)\n                max = datum\n        }\n        context.fillRect((i * 3), (1 + min) * amp, 2, Math.max(1, (max - min) * amp))\n    }\n}\n\n\nconst texts: Record<string, Record<string, any>> = {\n    'en-US': {\n        'not-rec': () => <>Click on the mic to <b>start</b> recording.</>,\n        'rec': () => <>Click on the mic to <b>stop</b> recording.</>\n    },\n    'pt-BR': {\n        'not-rec': () => <>Clique no microfone para <b>começar</b> a gravação.</>,\n        'rec': () => <>Clique no microfone para <b>parar</b> a gravação.</>\n    }\n}\n\nconst i18n = (lang: string) => (textId: string) => texts[lang][textId]","import React, { useState, useEffect } from 'react'\nimport ReactTooltip from 'react-tooltip'\nimport ErrorPanel, { LostConnectionError }  from './ErrorPanel'\nimport { MicrophoneButton } from './MicrophoneButton'\nimport IpcRenderer from '../../../services/electron-ipc'\nimport useAzureVoiceRecognition from '../../../services/azure/use-voice-recognition'\nimport { RecognitionRequest, VoiceRecognitionHook } from '../../../services/use-voice-recognition'\nimport { GlobalContext } from '../../../services/global-context'\n\nexport default function factory(useVoiceRecognition: VoiceRecognitionHook = useAzureVoiceRecognition) {\n    return function Main() {\n        const [recording, setRecording] = useState(false)\n\n        const { results, start, stop, analyzeSentence, error, setError } = useVoiceRecognition()\n        const context = React.useContext(GlobalContext)\n\n        const toggleRecording = () => {\n            recording ? stop() : start()\n            setRecording(!recording)\n            context.onToggleRecording?.(!recording)\n        }\n\n        const analyze = () => {\n            const text = (document.querySelector('.transcription-text.input') as HTMLTextAreaElement)?.value\n            setTimeout(() => analyzeSentence(text), 2000)\n        }\n\n        useEffect(() => {\n            IpcRenderer.on('VoiceRecognition:toggleRecording', (r) => {\n                r ? start() : stop()\n                setRecording(r)\n            })\n            \n            // @ts-ignore\n            window.appcontext = context\n \n            return () => {\n                IpcRenderer.removeAllListeners('VoiceRecognition:toggleRecording')\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [])\n\n        return (\n            <main className={`main ${context.mode === 'widget' ? 'widget' : context.mode === 'modalx' ? 'modalx' : ''}`}>\n                <LostConnectionError />\n                {error && (\n                    <ErrorPanel\n                        {...error}\n                        show={context.mode !== 'widget' && error != null}\n                        showDetails={context.shadeIsOpen}\n                        onShowDetails={context.toggleShade}\n                    />\n                )}\n                <MicrophoneButton\n                    recording={recording}\n                    toggleRecording={toggleRecording}\n                    active={context.mode === 'widget' || (context.connectedToVSCode && error == null)}\n                    language={context.language}\n                    mode={context.mode}\n                    onOpen={context.onOpen}\n                    changingLanguage={context.changingLanguage}\n                    setError={setError}\n                />\n                <TranscriptionHistory\n                    results={results as RecognitionRequest}\n                    language={context.language}\n                    recording={recording}\n                    mode={context.mode}\n                />\n                <Debug show={context.__debug} analyze={analyze} mode={context.mode} language={context.language} />\n            </main>\n        )\n    }\n}\n\ninterface TranscriptionHistroyProps {\n    results: RecognitionRequest,\n    language: string,\n    recording: boolean,\n    mode?: string\n}\n\nfunction TranscriptionHistory(props: TranscriptionHistroyProps) {\n    const [history, setHistory] = React.useState<RecognitionRequest[]>([])\n\n    useEffect(() => {\n        const h = document.querySelector('.transcription-history .content')\n\n        if (h != null)\n            h.scrollTop = h.scrollHeight\n\n    }, [history.length])\n\n    useEffect(() => {\n        if (props.results?.id && props.results?.text) setHistory((h) => h.concat(props.results))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.results?.id])\n\n    return (\n        <div className=\"transcription-history\">\n            <label>\n                {i18n(props.language)('Dialog history')()}:\n                <span data-tip={i18n(props.language)('List of all voice commands said')()}>\n                    <i className=\"fa fa-question-circle\" />\n                </span>\n            </label>\n            <div className=\"content phrases\">\n                {history.length === 0 && !props.recording && (\n                    <div className=\"phrase final help\">\n                        {i18n(props.language)('empty-command-list')()}\n                    </div>\n                )}\n                {history.length === 0 && props.recording && (\n                    <div className=\"phrase final help\">\n                        {i18n(props.language)('say-some')()}\n                    </div>\n                )}\n                {history.map(item => <RecognizedPhrase key={item.id} item={item} language={props.language} />)}\n            </div>\n            <ReactTooltip multiline effect=\"solid\" className=\"custom-tooltip\" />\n        </div>\n    )\n}\n\nconst base = 'https://github.com/pedrooaugusto/speech-to-code/tree/main/spoken/src/modules/typescript/'\nfunction makeCommandUrl(command: RecognitionRequest, language: string): string {\n    return base + command.command + '#' + (language === 'pt-BR' ? 'português' : 'english')\n}\n\nfunction RecognizedPhrase({item, language}: {item: RecognitionRequest, language: string}): JSX.Element {\n    if (!item.recognized)\n        return (\n            <div key={item.id} className={`phrase ${item.isFinal ? 'final' : ''}`}>\n                {item.text}\n            </div>\n        )\n\n    return (\n        <a\n            key={item.id}\n            className={`phrase ${item.isFinal ? 'final' : ''} recognized`}\n            href={makeCommandUrl(item, language)}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n        >\n            {item.text}\n            <i className=\"fa fa-bolt\" />\n        </a>\n    )\n}\n\ninterface DebugProps {\n    show: boolean,\n    mode?: 'widget' | 'modalx',\n    analyze: () => void,\n    language: string\n}\n\nfunction Debug(props: DebugProps) {\n    const [loading, setLoading] = React.useState(false)\n\n    const analyze = () => {\n        setLoading(true)\n\n        props.analyze()\n        setTimeout(() => setLoading(false), 5000)\n    }\n\n    if (!props.show || props.mode === 'widget') return null\n\n    return (\n        <div className=\"debug\">\n            <ReactTooltip multiline effect=\"solid\" className=\"custom-tooltip\" id=\"debug\" />\n            <label>\n                Debug:\n                <span data-tip={i18n(props.language)('debug_desc')()} data-for=\"debug\">\n                    <i className=\"fa fa-question-circle\" />\n                </span>\n            </label>\n            <textarea className=\"transcription-text input\" style={{display: 'block', width: '100%'}}></textarea>\n            <button style={{ cursor: loading ? 'progress' : 'pointer' }} onClick={analyze} disabled={loading}>Analyze</button>\n        </div>\n    )\n}\n\nconst texts: Record<string, Record<string, any>> = {\n    'en-US': {\n        'empty-command-list': () => (\n            <React.Fragment>\n                The microphone above is a button, click on it to start recording.<br/><br/>\n                After that, you can say a voice command and it will appear on this list.<br/><br/>\n                Experiment saying: \"new constant answer equals number 42\".<br/><br/>\n                Alternatively, instead of saying a phrase, you can use the debug option below <b>to write it</b>.<br/><br/>\n                The complete list of voice commands can be found on <i>Menu {'>>'} Modules</i>.\n            </React.Fragment>\n        ),\n        'say-some': () => 'Experiment saying: \"new constant answer equals number 42\".',\n        'debug_desc': () => 'Use this option to write voice commands instead of saying it.'\n    },\n    'pt-BR': {\n        'empty-command-list': () => (\n            <React.Fragment>\n                O microfone acima é um botão, clique nele para começar a gravação.<br/><br/>\n                Depois disso, você pode dizer um comando de voz e ele irá aparecer nessa lista.<br/><br/>\n                Experimente dizer: \"nova constante valor igual a número 42\".<br/><br/>\n                Alternativamente, você pode usar a secção de debug abaixo para <b>escrever</b> a frase.<br/><br/>\n                A lista completa de comandos de voz pode ser encontrada em <i>Menu {'>>'} Modules</i>.\n            </React.Fragment>\n        ),\n        'say-some': () => 'Experimente dizer: \"nova constante valor igual a número 42\".',\n        'Dialog history': () => 'Histórico da conversa',\n        'List of all voice commands said': () => 'Lista de todos os comandos ditos',\n        'debug_desc': () => 'Utilize essa opção para escrever comandos de voz ao invés de dizê-los.'\n    }\n}\n\nconst i18n = (lang: string) => (textId: string) => texts[lang][textId] || (() => textId)","import React, { useState, useContext } from 'react'\nimport Modal from '../Modal'\nimport Spoken, { SpokenModule } from 'spoken'\nimport { GlobalContext } from '../../../services/global-context'\n\ntype ModalInfo = {\n    module: SpokenModule,\n    command: CommandDefinition\n}\n\ntype CommandDefinition = {\n    id: string,\n    label: string,\n    phrases: string[],\n    impl: string,\n    desc: string,\n    langName: string\n}\n\nconst DOC_LINK = 'https://github.com/pedrooaugusto/speech-to-code/tree/main/spoken/src/modules'\n\nexport default function SpokenModules() {\n    const [modalInfo, setModalInfo] = useState<null | ModalInfo>(null)\n    const [open, setOpen] = useState(!false)\n    const context = useContext(GlobalContext)\n    const lang = context.language\n\n    return (\n        <main className=\"spoken\">\n            <div className=\"wrapper\">\n                <div className=\"title\">\n                    <h2>{i18n(lang)('Modules')()}</h2>\n                    <div className=\"sub\">{i18n(lang)('modules_exp')()}.</div>\n                </div>\n                <div className=\"modules\">\n                    {Spoken.modules.map(mod => {\n                        return (\n                            <div className={`module ${open ? 'open' : ''}`} key={mod.id}>\n                                <div className=\"module__title\">\n                                    {mod.id}\n                                    <i onClick={() => setOpen(!open)} className=\"fa fa-angle-down angle\" />\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href={`${DOC_LINK}/${mod.id}#${mod.label.replaceAll(' ', '-')}`}\n                                        title=\"More information about this command\"\n                                    >\n                                        <i className=\"fa fa-info-circle info\" />\n                                    </a>\n                                </div>\n                                <div className=\"module__desc\">{mod.desc}</div>\n                                <div className=\"divider\"></div>\n                                <div className=\"module__commands\">\n                                    <ul>\n                                        {mod.grammar[context.language].map((c: any) => {\n                                            return (\n                                                <li\n                                                    onClick={() => {\n                                                        setModalInfo({ module: mod, command: c.value })\n                                                        context.toggleShade()\n                                                    }}\n                                                    key={c.value.id}\n                                                >\n                                                    {c.value.label}\n                                                </li>\n                                            )\n                                        })}\n                                    </ul>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n            {(modalInfo != null) && (<Modal isOpen={context.shadeIsOpen}>\n                <div className=\"modal-content command__details\">\n                    <div className=\"wrapper\">\n                        <div className=\"main-header\">\n                            <h2>{modalInfo!.command.label}</h2>\n                            <a\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                                href={`${DOC_LINK}/${modalInfo.module.id}/${modalInfo.command.id}#${capitalize(modalInfo.command.langName)}`}\n                                title=\"More information about this command\"\n                            >\n                                <i className=\"fa fa-info-circle info\" />\n                            </a>\n                            <div>{modalInfo!.command.desc}</div>\n                        </div>\n                        <div className=\"divider\"></div>\n                        <div className=\"body\">\n                            <div className=\"label\">{i18n(lang)('Accepted phrases')()}:</div>\n                            <ul className=\"highlight\">\n                                {modalInfo.command.phrases.map(item => {\n                                    return (\n                                        <li key={item}>{item}</li>\n                                    )\n                                })}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </Modal>)}\n        </main>\n    )\n}\n\nconst capitalize = (s: string) => {\n    return s.charAt(0).toLowerCase() + s.slice(1)\n}\n\nconst texts: Record<string, Record<string, any>> = {\n    'en-US': {\n        'modules_exp': () => <>\n            Each module represents a set of commands that can be said out loud.&nbsp;\n            <a href={DOC_LINK + '/typescript#readme'}>Click here to see the complete list.</a>\n    </>,\n    },\n    'pt-BR': {\n        'Help': () => 'Ajuda',\n        'Modules': () => 'Módulos',\n        'modules_exp': () => <>\n            Cada módulo representa um conjunto de comandos que podem ser ditos em voz alta.&nbsp;\n            <a href={DOC_LINK + '/typescript#readme'}>Clique aqui para a lista completa.</a>\n        </>,\n        'Accepted phrases': () => 'Frases reconhecidas'\n    }\n}\n\nconst i18n = (lang: string) => (textId: string) => texts[lang][textId] || (() => textId)","import React from 'react'\n\nexport default function About() {\n    return (\n        <main className=\"about\">\n            <div className=\"wrapper\">\n                <div className=\"title\">\n                    <h2>About</h2>\n                    <div className=\"sub\">Some information about Speech2Code</div>\n                </div>\n                <div className=\"body\">\n                    Speech2Code is an application developed by me, <a rel=\"noreferrer\" href=\"https://github.com/pedrooaugusto\" target=\"_blank\">Pedro Augusto</a>,\n                    as part of my undergraduate thesis in computer science at UNICARIOCA university.\n                    The purpose of this application is to help programmers suffering from\n                    RSI (repetitive strain injury) to continue exercising their main activity: programming.<br/><br/>\n                    If you speak portuguese you can read all about my <ThesisLink>dissertation here</ThesisLink>.<br/><br/>\n                    Big thanks to everyone involved in the development of the following open source projects ({'❤︎'}):\n                    Graphviz, Visual Studio Code, Graphviz (DOT) for VSCode, Graphlib, Graphlib-DOT, @hpcc-js/wasm,\n                    svg2img, jest and node-ipc.<br/><br/>\n\n                    Again, if you wanna know how this works read <ThesisLink>my dissertation</ThesisLink>{' '}\n                    or watch <RickLink>this <b>simple</b> video</RickLink>.<br/><br/>\n\n                    Github: <a rel=\"noreferrer\" target=\"_blank\" href=\"https://github.com/pedrooaugusto/speech-to-code\"><small>https://github.com/pedrooaugusto/speech-to-code</small></a><br/><br/>\n\n                    That is all, I guess. <br/><br/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nconst ThesisLink = (props: { children: any }) => (\n    <a\n        rel=\"noreferrer\"\n        href=\"https://pedrooaugusto.github.io/Programming With Voice - Assistive Technology Tool For Programming In JavaScript Using Voice - Pedro Silva.pdf\"\n        target=\"_blank\"\n    >\n        {props.children}\n    </a>\n)\n\nconst RickLink = (props: { children: any }) => (\n    <a\n        rel=\"noreferrer\"\n        href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n        target=\"_blank\"\n    >\n        {props.children}\n    </a>\n)","import React from 'react'\nimport { GlobalContext } from '../../../services/global-context'\n\nexport default function Help() {\n    // @ts-ignore\n    const { language: lang }: { language: 'pt-BR' | 'en-US' } = React.useContext(GlobalContext)\n    const i18n = _i18n(lang)\n\n    return (\n        <main className=\"help\">\n            <div className=\"wrapper\">\n                <div className=\"title\">\n                    <h2>{i18n('Help')}</h2>\n                    <div className=\"sub\">{i18n('Some information about Speech2Code')}</div>\n                </div>\n                <div className=\"body\">\n                    <b>Visual Studio Code</b><br/>\n                    {i18n('vscode_requirement')}\n\n                    <b>{i18n('List of voice commands')}</b><br/>\n                    {i18n('list_commands_exp')}.<br/><br/>\n\n                    <ul className=\"useful-commands\">\n                        {usefulCommands.map(item => (\n                            <li key={item.id}>\n                                <div className=\"c-title\">\n                                    <Link h={item.id}>{item[lang].title}</Link>\n                                </div>\n                                <div className=\"c-info\">\n                                    <div className=\"pattern\">\n                                        <div>{i18n('Pattern')}:</div>\n                                        {item[lang].pattern.map((pt, k) => <div key={k}>{pt}</div>)}\n                                    </div>\n                                    <div className=\"phrases\">\n                                        <div>{i18n('Phrases')}:</div>\n                                        {item[lang].phrases.map((pt, k) => <div key={k}>{pt}</div>)}\n                                    </div>\n                                    <div className=\"desc\">\n                                        <div>{i18n('Description')}:</div>\n                                        <div>{item[lang].desc}</div>\n                                    </div>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nconst Link = (props: { h: any, children: any }) => (\n    <a\n        href={'https://github.com/pedrooaugusto/speech-to-code/tree/main/spoken/src/modules/typescript/' + props.h + '#readme'}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n    >\n        {props.children}\n    </a>\n)\n\nconst texts: Record<string, Record<string, any>> = {\n    'en-US': {\n        'vscode_requirement': (\n            <React.Fragment>\n                To use this tool is necessary to have Visual Studio Code installed.\n                The communication between VSCode and this tool is done through the Spoken extension\n                which is automatically installed in VSCode, that said, you should first start VSCode and then\n                start this application, in that order, for the connection to be successfully.\n                <br/><br/>\n            </React.Fragment>\n        ),\n        'list_commands_exp': (\n            <React.Fragment>\n                Here will be listed some of the most useful voice commands and possible activation phrases.\n                The comple list of voice commands can be found in <a href=\"#/spoken\"><i>/Modules</i></a>\n            </React.Fragment>\n        ),\n    },\n    'pt-BR': {\n        'Help': 'Ajuda',\n        'Some information about Speech2Code': 'Informações sobre como usar esta ferramenta',\n        'Description': 'Descrição',\n        'Phrases': 'Frases',\n        'Pattern': 'Padrão',\n        'List of voice commands': 'Lista de Comandos',\n        'vscode_requirement': (\n            <React.Fragment>\n                Para usar esta ferramenta é necessário ter instalado o editor de código\n                Visual Studio Code. A comunicação entre o VSCode e esta\n                aplicação é feita através de uma extenção chamada Spoken que é\n                automaticamente instalada no VSCode, por isso é necessário que o\n                VSCode seja iniciado antes desta aplicação.<br/>\n                É necessário ainda que o editor de código contenha um arquivo em edição e o foco do mouse\n                esteja neste em uma das linhas deste arquivo.\n                <br/><br/>\n            </React.Fragment>\n        ),\n        'list_commands_exp': (\n            <React.Fragment>\n                Aqui serão listados os comandos mais comuns e possíveis frases de ativação, a lista completa\n                encontra-se em <a href=\"#/spoken\"><i>/Módulos</i></a>\n            </React.Fragment>\n        )\n    }\n}\n\nconst _i18n = (lang: string) => (textId: string) => texts[lang][textId] || textId\n\nconst usefulCommands = [\n    {\n        \"id\": \"go_to_line\",\n        \"en-US\": {\n            \"title\": \"Change line\",\n            \"pattern\": [\n                \"line <number>\",\n                \"go to line <number>\"\n            ],\n            \"phrases\": [\n                \"line 5\",\n                \"go to line 98\"\n            ],\n            \"desc\": \"Changes the current editor line\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Trocar de linha\",\n            \"pattern\": [\n                \"linha <número>\",\n                \"vá para a linha <número>\"\n            ],\n            \"phrases\": [\n                \"linha 5\",\n                \"vá para a linha 98\"\n            ],\n            \"desc\": \"Troca a linha atual do editor\"\n        }\n    },\n    {\n        \"id\": \"write\",\n        \"en-US\": {\n            \"title\": \"Write\",\n            \"pattern\": [\n                \"Write <...>\",\n                \"Write space\",\n                \"Print letter <letter>\"\n            ],\n            \"phrases\": [\n                \"print Hello who are you\",\n                \"write I am the doctor\",\n                \"print space\",\n                \"print letter b\"\n            ],\n            \"desc\": \"Writes anything in the current line\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Escrever\",\n            \"pattern\": [\n                \"escreva <...>\",\n                \"escreva (espaço)\"\n            ],\n            \"phrases\": [\n                \"escreva olá quem é você\",\n                \"escreva você sabe alguma coisa sobre\",\n                \"escreva espaço\"\n            ],\n            \"desc\": \"Escreva qualquer coisa na linha atual\"\n        }\n    },\n    {\n        \"id\": \"select\",\n        \"en-US\": {\n            \"title\": \"Select\",\n            \"pattern\": [\n                \"select from the line <number> to line <number>\",\n                \"select the word <word>\",\n                \"select the <order> word <word>\",\n                \"select the <order> letter <letter>\",\n                \"select the <order> symbol <symbol>\",\n                \"select from  <order> (letter | symbol) <letter | symbol> to the <order> (letter | symbol) <letter | symbol>\"\n            ],\n            \"phrases\": [\n                \"select from line 4 to the line 12\",\n                \"select the word gap\",\n                \"select the third word gap\",\n                \"select the fifth letter P\",\n                \"select the symbol 3\",\n                \"select from the letter A to the last letter Z\"\n            ],\n            \"desc\": \"Used to select lines, symbols, words and letters\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Selecionar\",\n            \"pattern\": [\n                \"selecione da linha <número> até a linha <número>\",\n                \"selecione a palavra <palavra>\",\n                \"selecione a <ordem> palavra <palavra>\",\n                \"selecione a <ordem> letra <letra>\",\n                \"selecione o <ordem> símbolo <símbolo>\",\n                \"selecione da <ordem> (letra | símbolo) <letra | símbolo> até a <ordem> (letra | símbolo) <letra | símbolo>\"\n            ],\n            \"phrases\": [\n                \"selecione da linha 4 até a linha 12\",\n                \"selecione a palavra gap\",\n                \"selecione a terceira palavra gap\",\n                \"selecione a quinta letra P\",\n                \"selecione o símbolo 3\",\n                \"selecione da letra A até a última letra Z\"\n            ],\n            \"desc\": \"Seleciona linhas, letras ou palavras\"\n        }\n    },\n    {\n        \"id\": \"new_line\",\n        \"en-US\": {\n            \"title\": \"Create line\",\n            \"pattern\": [\n                \"create line\",\n                \"create line (above | below)\",\n            ],\n            \"phrases\": [\n                \"create line\",\n                \"create line below\",\n                \"create line above\"\n            ],\n            \"desc\": \"Used to create a new line\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Linha nova\",\n            \"pattern\": [\n                \"linha nova\",\n                \"nova linha abaixo\",\n                \"nova linha acima\"\n            ],\n            \"phrases\": [\n                \"linha nova\",\n                \"nova linha abaixo\",\n                \"nova linha acima\"\n            ],\n            \"desc\": \"Cria uma nova linha acima ou abaixo\"\n        }\n    },\n    {\n        \"id\": \"number\",\n        \"en-US\": {\n            \"title\": \"Number\",\n            \"pattern\": [\n                \"nunber <number>\",\n                \"#<number>\"\n            ],\n            \"phrases\": [\n                \"number 7465\",\n                \"number 32\"\n            ],\n            \"desc\": \"Writes a number in the current line. Useful as arguments of other commands such as variable assigment.\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Número\",\n            \"pattern\": [\n                \"número <número>\",\n                \"#<número>\"\n            ],\n            \"phrases\": [\n                \"número 7465\",\n                \"número 32\"\n            ],\n            \"desc\": \"Escreve um número na linguagem JS. Pode ser usado como argumento para outros comandos\"\n        }\n    },\n    {\n        \"id\": \"string\",\n        \"en-US\": {\n            \"title\": \"String\",\n            \"pattern\": [\n                \"string <...> string\",\n                \"text <...> text\"\n            ],\n            \"phrases\": [\n                \"string this is just a thing string\",\n                \"text the dog is blue text\"\n            ],\n            \"desc\": \"Writes a string in the current line. Useful as arguments of other commands such as variable assigment.\"\n        },\n        \"pt-BR\": {\n            \"title\": \"String\",\n            \"pattern\": [\n                \"string <...> string\",\n                \"texto <...> texto\"\n            ],\n            \"phrases\": [\n                \"string isso é um teste string\",\n                \"texto isso é uma string entre aspas texto\"\n            ],\n            \"desc\": \"Escreve uma string na linguagem JS. Pode ser usado como argumento para outros comandos\"\n        }\n    },\n    {\n        \"id\": \"function_call\",\n        \"en-US\": {\n            \"title\": \"Function call\",\n            \"pattern\": [\n                \"execute function <word>\",\n                \"execute function called quote <...> quote\",\n                \"call function <word> with <number> arguments\",\n                \"call function <word> on [values] with the arguments [values] and [values]\"\n            ],\n            \"phrases\": [\n                \"execute the function sum\",\n                \"execute the function called quote create object quote\",\n                \"call function sum on variable calculator with the arguments number 1 and variable value\"\n            ],\n            \"desc\": \"Used to call a function\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Chamada de função\",\n            \"pattern\": [\n                \"execute a função <palavra>\",\n                \"execute a função <palavra> com <número> argumentos\",\n                \"execute a função <palavra> na [values] com os argumentos [values] e [values]\"\n            ],\n            \"phrases\": [\n                \"execute a função soma\",\n                \"execute a função stop com 3 argumentos\",\n                \"execute a função soma na variável calculadora com os argumentos número 1 e string tudo bem string\"\n            ],\n            \"desc\": \"Usada para chamar um função no objeto X com os argumentos Y\"\n        }\n    },\n    {\n        \"id\": \"undo_redo\",\n        \"en-US\": {\n            \"title\": \"Undo / Redo\",\n            \"pattern\": [\n                \"(undo | redo) (that | last command)\",\n            ],\n            \"phrases\": [\n                \"undo that\",\n                \"undo last command\",\n                \"redo that\",\n                \"redo last command\",\n            ],\n            \"desc\": \"Used to undo or redo the last command. Useful to fix mistakes. CTRL+Z and CTRL+Y\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Desfazer / Refazer\",\n            \"pattern\": [\n                \"(desfaça | refaça) isso\",\n                \"(desfaça | refaça) o último comando\",\n            ],\n            \"phrases\": [\n                \"desfaça isso\",\n                \"desfaça o último comando\",\n                \"refaça isso\",\n                \"refaça o último comando\",\n                \"desfazer o último comando\"\n            ],\n            \"desc\": \"CTRL+Z and CTRL+Y: Usada para desfazer e refazer o último comando.\"\n        }\n    },\n    {\n        \"id\": \"variable_assignment\",\n        \"en-US\": {\n            \"title\": \"Variable Assignment\",\n            \"pattern\": [\n                \"new (constant | variable) <word> equals [values]\",\n                \"(constant | variable) <word> equals [values]\"\n            ],\n            \"phrases\": [\n                \"new variable ball equals string hello peter what is happening string\",\n                \"constant value equals call function remove with arguments number 2\",\n                \"new constant value equals number 92\"\n            ],\n            \"desc\": \"Used to declare and assign a value to a variable\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Atribuição de variável\",\n            \"pattern\": [\n                \"nova (constante | variável) <palavra> igual a [values]\",\n                \"(constante | variável) <palavra> igual a [values]\"\n            ],\n            \"phrases\": [\n                \"nova variável bola igual a string ola que é você string\",\n                \"constante valor igual a execute a função soma\",\n                \"nova constante valor igual a número 92\"\n            ],\n            \"desc\": \"Usada para declarar ou atribuir um valor a uma variável\"\n        }\n    },\n    {\n        \"id\": \"math_operator\",\n        \"en-US\": {\n            \"title\": \"Arithmetic Operators\",\n            \"pattern\": [\n                \"expressão [values] (plus | minus | times | divided by | module) [values] (plus | minus | times | divided by | module) ...\"\n            ],\n            \"phrases\": [\n                \"expression number 3 plus number 42 minus string just a test string\",\n                \"expression call function sum plus variable value\",\n                \"expression number 3 times execute function sum with the arguments number 3 and number 2\"\n            ],\n            \"desc\": \"The arithmetic operators (+, -, *, /, %) in JS\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Operadores aritméticos\",\n            \"pattern\": [\n                \"expressão [values] (mais | menos | vezes | dividido por | modulo) [values] (mais | menos | vezes | dividido por | modulo) ...\"\n            ],\n            \"phrases\": [\n                \"expressão número 3 mais número 42 menos string ola pedro string\",\n                \"expressão execute a função soma mais a variável bola\",\n                \"expressão número 3 mais execute a função soma com os argumentos número 2 e número 3\"\n            ],\n            \"desc\": \"Usada para usar os operadores aritméticos (+, -, *, /, %) em JavaScript\"\n        }\n    },\n    {\n        \"id\": \"logical_operator\",\n        \"en-US\": {\n            \"title\": \"Logic operators\",\n            \"pattern\": [\n                \"expression [values] (and | or | equals) [values] (and | or | equals) ...\",\n                \"expression [values] (less | greater | less or equals) than [values] (less | greater | less or equals) than ...\"\n            ],\n            \"phrases\": [\n                \"expression number 3 and number 42 minus number 40\",\n                \"expression execute function sum or variable ball\",\n                \"expression número 3 eqauls number 1 plus number 2\",\n                \"expression not number 7 greater than number 10\"\n            ],\n            \"desc\": \"The logical operatos (||, &&, ===, !) in JavaScript\"\n        },\n        \"pt-BR\": {\n            \"title\": \"Operadores lógicos\",\n            \"pattern\": [\n                \"expressão [values] (e | ou | igual) [values] (e | ou | igual) ...\",\n                \"expressão [values] (maior | menor) que [values] (maior | menor) que ...\"\n            ],\n            \"phrases\": [\n                \"expressão número 3 e número 42 menos string ola pedro string\",\n                \"expressão execute a função soma ou a variável bola\",\n                \"expressão número 3 igual a execute a função soma\",\n                \"expressão número 0 maior ou igual a variável valor\"\n            ],\n            \"desc\": \"Usada para usar os operadores lógicos (||, &&, ===, !) em JavaScript\"\n        }\n    }\n]\n","import React, { useEffect, useState } from 'react'\nimport Header from './header'\nimport Main from './main'\nimport Modules from './spoken'\nimport About from './about'\nimport Help from './help'\nimport { ModalSection } from './Modal'\nimport GloablContext from '../../services/global-context'\nimport { VoiceRecognitionHook } from '../../services/use-voice-recognition'\nimport './index.scss'\n\ninterface Props {\n    initialLang?: string,\n    mode?: 'widget' | 'modalx',\n    onOpen?: Function\n    onClose?: Function\n    onToggleRecording?: Function\n}\nexport function factory(useVoiceRecognition?: VoiceRecognitionHook) {\n    const main = Main(useVoiceRecognition)\n\n    return function App(props: Props) {\n        return (\n            <GloablContext\n                lang={props.initialLang}\n                mode={props.mode}\n                onOpen={props.onOpen}\n                onClose={props.onOpen}\n                onToggleRecording={props.onToggleRecording}\n            >\n                <div>\n                    <Header />\n                    <Router\n                        pages={[\n                            { hash: '', component: main },\n                            { hash: 'spoken', component: Modules },\n                            { hash: 'help', component: Help },\n                            { hash: 'about', component: About }\n                        ]}\n                    />\n                </div>\n                <ModalSection />\n            </GloablContext>\n        )\n    }\n}\n\nexport default factory()\n\nfunction Router(props: { pages: { hash: string, component: React.FC }[] }) {\n    const [hash, setHash] = useState(window.location.hash)\n\n    useEffect(() => {\n        function hashchange() {\n            setHash(window.location.hash)\n        }\n\n        window.addEventListener('hashchange', hashchange)\n\n        return () => {\n            window.removeEventListener('hashchange', hashchange)\n        }\n\n    }, [])\n\n    const page = props.pages.find((page) => new RegExp('^(#|#/|)' + page.hash + '(/|)$').test(hash))\n\n    return page ? <page.component /> : null\n}","import { useState, useEffect, useContext } from 'react';\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport Spoken from 'spoken';\nimport IpcRenderer from '../electron-ipc';\nimport { GlobalContext } from '../global-context';\n\nconst useAzureVoiceRecognition = () => {\n\tconst [ results, setResults ] = useState(null);\n\tconst [ error, setError ] = useState(null);\n\tconst { language = 'pt-BR', executeInternalCommand } = useContext(GlobalContext);\n\tconst recognizer = MyRecognizer.getRecognizer();\n\n\tuseEffect(() => {\n\t\tIpcRenderer.on('Spoken:executeCommandResult', (result) => {\n\t\t\tconsole.log('[webapp.services.azure-voice-recognition.onResult]: Execute command result: ' + result);\n\t\t});\n\n\t\treturn () => {\n\t\t\tIpcRenderer.removeAllListeners('Spoken:executeCommandResult');\n\t\t};\n\t}, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tconsole.log('[webapp.services.azure-voice-recognition]: Initializing');\n\n\t\t\trecognizer\n\t\t\t\t.on('results', (result, isFinal) => {\n\t\t\t\t\tif (!result.text || result.text.trim() === '') return;\n\n\t\t\t\t\tconst attempt = {\n\t\t\t\t\t\ttext: sanitizePonctuation(result.text, language),\n\t\t\t\t\t\tisFinal,\n\t\t\t\t\t\tid: Date.now(),\n\t\t\t\t\t\trecognized: false,\n\t\t\t\t\t\tcommand: undefined\n\t\t\t\t\t};\n\n\t\t\t\t\tif (isFinal) {\n\t\t\t\t\t\tconst match = findComand(result, language);\n\n\t\t\t\t\t\tattempt.recognized = !!match;\n\t\t\t\t\t\tattempt.command = match && match.id;\n\n\t\t\t\t\t\tif (attempt.recognized) {\n\t\t\t\t\t\t\tif (match && match.id && match.id.startsWith('__')) {\n\t\t\t\t\t\t\t\texecuteInternalCommand(match);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tIpcRenderer.send('Spoken:executeCommand', match);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsetResults(attempt);\n\t\t\t\t})\n\t\t\t\t.on('error', (err) => {\n\t\t\t\t\tsetError({\n\t\t\t\t\t\t__error: err,\n\t\t\t\t\t\tmainTitle: 'Could not connect to Azure Speech to Text',\n\t\t\t\t\t\ttitle: \"Azure STT doesn't seem to be working\",\n\t\t\t\t\t\tsubTitle: 'Try switching STT provider to Chrome',\n\t\t\t\t\t\tbody: `This project is powered by Azure Speech to Text, which is a paid service, so maybe my free credits are over.\n                        If you are in the demo page try switching the STT provider to Chrome (free, works on Chrome and Edge).<br/><br/>\n                        <b>You can switch the STT provider to Chrome on the topbar menu or use the debug option to issue voice\n                            commands in text.</b>`\n\t\t\t\t\t});\n\t\t\t\t\tconsole.error('[webapp.services.azure-voice-recognition.onResultError]: Error', err.toString());\n\t\t\t\t})\n\t\t\t\t.init(language);\n\n\t\t\treturn () => {\n\t\t\t\trecognizer.destroy();\n\t\t\t};\n\t\t},\n\t\t[ language ]\n\t);\n\n\tconst start = async () => {\n\t\tconsole.log('start');\n\t\trecognizer.start();\n\t};\n\n\tconst stop = async () => {\n\t\tconsole.log('stop');\n\t\trecognizer.stop();\n\t};\n\n\tconst analyzeSentence = async (phrase, timeout = 3000) => {\n\t\tconst w = { text: sanitizePonctuation(phrase, language) };\n\t\tconst match = findComand(w, language);\n\n\t\tconst attempt = {\n\t\t\ttext: phrase,\n\t\t\tisFinal: true,\n\t\t\tid: Date.now(),\n\t\t\trecognized: !!match,\n\t\t\tcommand: match && match.id\n\t\t};\n\n\t\tconst fn = () => {\n\t\t\tsetResults(attempt);\n\t\t\tif (attempt.recognized) {\n\t\t\t\tif (match && match.id && match.id.startsWith('__')) {\n\t\t\t\t\texecuteInternalCommand(match);\n\t\t\t\t} else {\n\t\t\t\t\tIpcRenderer.send('Spoken:executeCommand', match);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (timeout) setTimeout(fn, timeout);\n\t\telse fn();\n\t};\n\n\treturn {\n\t\tresults,\n\t\tstart,\n\t\tstop,\n\t\terror,\n\t\tsetError,\n\t\tanalyzeSentence\n\t};\n};\n\nfunction findComand(voiceToTextResponse, language) {\n\tconst text = sanitizePonctuation(voiceToTextResponse.text, language);\n\tconst result = Spoken.recognizePhrase(text.toLocaleLowerCase(), language);\n\n\tif (result != null) {\n\t\tresult.extra._rawVoiceToTextResponse = voiceToTextResponse;\n\t\tresult.extra.phrase = text;\n\t}\n\n\treturn result;\n}\n\nfunction sanitizePonctuation(text, language) {\n\ttext = text.replace(/(?<! )(:|\\*|,|\\.|\\?|!)/gi, ' $1');\n\n\tif (language === 'pt-BR') {\n\t\treturn text.replace(/aspa(s|)/gi, '*');\n\t} else {\n\t\treturn text.replace(/quote(s|)/gi, '*');\n\t}\n}\n\nexport default useAzureVoiceRecognition;\n","// Define the ElectronIpc interface (in TypeScript, this would define the structure, but it's not needed in JavaScript)\nclass FakeIpc {\n\tconstructor() {\n\t\tthis.editors = [\n\t\t\t{\n\t\t\t\tname: 'VSCODE',\n\t\t\t\tstatus: 'ON',\n\t\t\t\tcurrent: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DEFAULT',\n\t\t\t\tstatus: 'ON',\n\t\t\t\tcurrent: false\n\t\t\t}\n\t\t];\n\n\t\tthis.changeEditorCallback = () => {};\n\t}\n\n\tsend(channel, editor) {\n\t\tconsole.warn('IPC not defined (this is a electron application!)');\n\t\tif (channel === 'Config:changeEditor') {\n\t\t\tthis.changeEditor(editor);\n\t\t}\n\t}\n\n\tremoveAllListeners(channel) {\n\t\tconsole.warn('IPC not defined (this is a electron application!)');\n\t}\n\n\tchangeEditor(editor) {\n\t\teditor = editor || 'VSCODE';\n\t\tthis.editors = this.editors\n\t\t\t.map((item) => ({ ...item, current: false }))\n\t\t\t.map((item) => ({ ...item, current: item.name === editor }));\n\n\t\tthis.changeEditorCallback(this.editors);\n\t}\n\n\ton(channel, cb) {\n\t\tconsole.warn('IPC not defined (this is a electron application!)');\n\t\tif (channel === 'Config:onChangeEditorState') {\n\t\t\tthis.changeEditorCallback = cb;\n\t\t}\n\t}\n}\n\n// Use the existing ipcRenderer from the window object, or fallback to the FakeIpc instance\nconst _ipcRenderer = window.ipcRenderer || new FakeIpc();\n\nexport default _ipcRenderer;\nexport { _ipcRenderer as ipcRenderer };\n","import React from 'react'\nimport Spoken, { SpokenCommand } from 'spoken'\nimport IpcRenderer from './electron-ipc'\n\nexport type MyContextType = {\n    changeEditor: (name: string) => void\n    changeLanguage: (lang: string) => any,\n    toggleShade: (value?: boolean) => void,\n    toggleDebug: () => void,\n    executeInternalCommand: (command: SpokenCommand) => void\n} & State\n\ntype State = {\n    language: string\n    shadeIsOpen: boolean\n    editorState: Record<string, any>[]\n    spokenIsLoaded: boolean\n    connectedToVSCode: boolean\n    changingLanguage: boolean\n    __debug: boolean\n    mode?: 'widget' | 'modalx'\n    onOpen?: Function\n    onClose?: Function\n    onToggleRecording?: Function\n}\n\n// @ts-ignore\nexport const GlobalContext = React.createContext<MyContextType>({})\n\ninterface Props {\n    children: any,\n    // Non Standalone mode\n    lang?: string,\n    mode?: 'widget' | 'modalx',\n    onOpen?: Function,\n    onClose?: Function\n    onToggleRecording?: Function\n}\nexport default function GloablContext(props: Props) {\n    const [state, setState] = React.useState<State>({\n        language: props.lang || 'pt-BR',\n        shadeIsOpen: false,\n        __debug: !false,\n        spokenIsLoaded: false,\n        connectedToVSCode: false,\n        changingLanguage: false,\n        editorState: []\n    })\n\n    const changeEditor = (t: string) => {\n        IpcRenderer.send('Config:changeEditor', t)\n    }\n\n    const toggleShade = (t?: boolean) => {\n        setState((sstate) => ({\n            ...sstate,\n            shadeIsOpen: t ?? !state.shadeIsOpen\n        }))\n    }\n\n    const toggleDebug = () => {\n        setState((sstate) => ({\n            ...sstate,\n            __debug: !sstate.__debug\n        }))\n    }\n\n    const changeLanguage = (lang: string) => setState((s) => ({...s, language: lang}))\n\n    const executeInternalCommand = (command: SpokenCommand) => {\n        if (command.id === '__change_lang') {\n            setState((sstate) => ({ ...sstate, changingLanguage: true }))\n            IpcRenderer.send('VoiceRecognition:setRecording', false)\n            // fix that, should support more languages\n            setTimeout(() => changeLanguage(command.lang === 'pt-BR' ? 'en-US' : 'pt-BR'), 1500)\n            setTimeout(() => {\n                IpcRenderer.send('VoiceRecognition:setRecording', true)\n                setState((sstate) => ({ ...sstate, changingLanguage: false }))\n            }, 3000)\n        }\n    }\n\n    React.useEffect(() => {\n        Spoken.init().then(() => {\n            setState((state) => ({ ...state, spokenIsLoaded: true }))\n        })\n\n        IpcRenderer.on('Config:onChangeEditorState', (editorState) => {\n            const connected = editorState?.find(({ name }: { name: string }) => {\n                const d = name.toLowerCase()\n                \n                return d === 'vscode' || d === 'codemirror'\n            })?.status === 'ON'\n\n            if (!connected) IpcRenderer.send('VoiceRecognition:setRecording', false)\n\n            setState((sstate) => ({\n                ...sstate,\n                editorState: editorState,\n                connectedToVSCode: connected\n            }))\n        })\n\n        // Request the current editor\n        IpcRenderer.send('Config:changeEditor', null)\n    }, [])\n\n    return (\n        <GlobalContext.Provider\n            value={{\n                ...state,\n                changeEditor,\n                changeLanguage,\n                toggleShade,\n                toggleDebug,\n                executeInternalCommand,\n                mode: props.mode,\n                onOpen: props.onOpen,\n                onClose: props.onClose,\n                onToggleRecording: props.onToggleRecording\n            }}\n        >\n            {state.spokenIsLoaded ? props.children : (<div>Loading...</div>)}\n        </GlobalContext.Provider>\n    )\n}"],"names":["Header","_window$electronShell","open","setOpen","useState","langs","setLangs","context","React","GlobalContext","selectedEditor","editorState","find","a","status","current","appVersion","setAppVersion","window","electronShellInfo","langs_","module","Spoken","item","Object","values","grammar","push","lang","value","langName","fetch","__HOME_PAGE__","then","res","json","manifest","version","mode","_jsxs","children","_jsx","className","onClick","toggleDebug","src","width","height","alt","href","i18n","language","name","onChange","evt","changeEditor","target","label","map","disabled","changeLanguage","type","checked","__debug","VersionLink","ReactTooltip","multiline","effect","props","rel","texts","textId","Modal","_ref","isOpen","el","document","querySelector","ReactDOM","ModalSection","toggleShade","shadeIsOpen","GC","ref","_ref$current","parent","parentElement","classList","contains","body","style","overflow","id","ErrorPanel","show","onShowDetails","title","mainTitle","showDetails","subTitle","dangerouslySetInnerHTML","__html","LostConnectionError","connectedToVSCode","SpokenLink","no-connection-1","no-connection-2","no-connection-sub","no-connection-reason","MicrophoneButton","useEffect","canvas","getElementById","ctx","getContext","audioContext","streamSource","processor","drawCircle","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","video","rawStream","AudioContext","createMediaStreamSource","createScriptProcessor","connect","destination","addEventListener","draw","catch","err","setError","__error","console","error","_processor","_streamSource","_processor2","removeEventListener","disconnect","close","data","hidden","requestAnimationFrame","clearRect","buffer","getChannelData","step","Math","ceil","length","amp","i","min","max","j","datum","fillRect","drawWaveform","inputBuffer","recording","active","changingLanguage","size","e","_props$onOpen","onOpen","call","toggleRecording","rec","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","stroke","closePath","not-rec","_Fragment","TranscriptionHistory","_props$results3","history","setHistory","h","scrollTop","scrollHeight","_props$results","_props$results2","results","text","concat","RecognizedPhrase","base","makeCommandUrl","command","recognized","isFinal","Debug","loading","setLoading","display","cursor","analyze","setTimeout","empty-command-list","say-some","debug_desc","Dialog history","List of all voice commands said","DOC_LINK","SpokenModules","modalInfo","setModalInfo","useContext","mod","replaceAll","desc","c","capitalize","phrases","s","charAt","toLowerCase","slice","modules_exp","Help","Modules","Accepted phrases","About","ThesisLink","RickLink","_i18n","usefulCommands","Link","pattern","pt","k","factory","useVoiceRecognition","main","arguments","undefined","useAzureVoiceRecognition","setRecording","start","stop","analyzeSentence","IpcRenderer","on","r","appcontext","removeAllListeners","_context$onToggleReco","onToggleRecording","_document$querySelect","Main","GloablContext","initialLang","onClose","Router","pages","hash","component","setHash","location","hashchange","page","RegExp","test","findComand","voiceToTextResponse","sanitizePonctuation","result","toLocaleLowerCase","extra","_rawVoiceToTextResponse","phrase","replace","setResults","executeInternalCommand","recognizer","MyRecognizer","getRecognizer","log","trim","attempt","Date","now","match","startsWith","send","toString","init","destroy","async","timeout","fn","ipcRenderer","constructor","this","editors","changeEditorCallback","channel","editor","warn","cb","state","setState","spokenIsLoaded","_editorState$find","connected","d","sstate","Provider","t"],"sourceRoot":""}